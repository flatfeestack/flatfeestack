{
  "address": "0x18E3cfDB7956854370BcfC40074Bc54A134B27Bd",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "userId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "totalPayOut",
          "type": "uint256"
        }
      ],
      "name": "getClaimableAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "userId",
          "type": "bytes32"
        }
      ],
      "name": "getPayedOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "payedOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "sendRecover",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "dev",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "userId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "totalPayOut",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xd055c1d39aac9d99d3bf3a53c5bcbb98686e11d4bd28d36306fb405a4cbd9788",
  "receipt": {
    "to": null,
    "from": "0xDba01b34D04789241B2a4B98295ad10ACA0C1339",
    "contractAddress": "0x18E3cfDB7956854370BcfC40074Bc54A134B27Bd",
    "transactionIndex": 42,
    "gasUsed": "678537",
    "logsBloom": "0x
    "blockHash": "0x045378b21685fee16adae7b0158386983a0d9ba0de28e10c418b1b6160db7d43",
    "transactionHash": "0xd055c1d39aac9d99d3bf3a53c5bcbb98686e11d4bd28d36306fb405a4cbd9788",
    "logs": [],
    "blockNumber": 8939739,
    "cumulativeGasUsed": "10085991",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "5e7ead6f489ba1541e29a5c0da5dc006",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"userId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"totalPayOut\",\"type\":\"uint256\"}],\"name\":\"getClaimableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"userId\",\"type\":\"bytes32\"}],\"name\":\"getPayedOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"payedOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sendRecover\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"dev\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"userId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"totalPayOut\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getClaimableAmount(bytes32,uint256)\":{\"details\":\"Gets the tea for the provided address.\"},\"getPayedOut(bytes32)\":{\"details\":\"Gets the tea for the provided address.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"sendRecover(address,uint256)\":{\"details\":\"Send back from contract in case something is wrong. This should rarely happen\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(address,bytes32,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Withdraw the earned amount. The signature has to be created by the contract owner and the signed message is the hash of the concatenation of the account and tea.\",\"params\":{\"dev\":\"The address to withdraw to.\",\"r\":\"The r value of the signature.\",\"s\":\"The s value of the signature.\",\"totalPayOut\":\"The total amount that the user earned.\",\"userId\":\"The user id that never changes\",\"v\":\"The recovery byte of the signature.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PayoutEth.sol\":\"PayoutEth\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"contracts/PayoutBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nabstract contract PayoutBase is Initializable, OwnableUpgradeable {\\n    /**\\n     * @dev Maps each userId to its current already payed out amount. The userId never changes\\n     */\\n    mapping(bytes32 => uint256) public payedOut;\\n    string private currencyCode;\\n\\n    function payoutInit(string memory _currencyCode) internal onlyInitializing {\\n        __Ownable_init();\\n        payoutInitUnchained(_currencyCode);\\n    }\\n\\n    function payoutInitUnchained(\\n        string memory _currencyCode\\n    ) internal onlyInitializing {\\n        currencyCode = _currencyCode;\\n    }\\n\\n    function sendRecover(\\n        address payable receiver,\\n        uint256 amount\\n    ) external virtual;\\n\\n    /**\\n     * @dev Gets the tea for the provided address.\\n     */\\n    function getPayedOut(bytes32 userId) external view returns (uint256) {\\n        return payedOut[userId];\\n    }\\n\\n    /**\\n     * @dev Gets the tea for the provided address.\\n     */\\n    function getClaimableAmount(\\n        bytes32 userId,\\n        uint256 totalPayOut\\n    ) external view returns (uint256) {\\n        return totalPayOut - payedOut[userId];\\n    }\\n\\n    /**\\n     * @dev Prepares everything to withdraw the earned amount. The signature has to be created by the contract owner and the signed message\\n     * is the hash of the concatenation of the account and tea.\\n     *\\n     * @param userId The user id that never changes\\n     * @param totalPayOut The total amount that the user earned.\\n     * @param v The recovery byte of the signature.\\n     * @param r The r value of the signature.\\n     * @param s The s value of the signature.\\n     */\\n    function calculateWithdraw(\\n        bytes32 userId,\\n        uint256 totalPayOut,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal returns (uint256) {\\n        require(totalPayOut > payedOut[userId], \\\"No new funds to be withdrawn\\\");\\n\\n        bytes32 payloadHash = keccak256(\\n            abi.encode(userId, \\\"#\\\", totalPayOut, currencyCode)\\n        );\\n        bytes32 messageHash = keccak256(\\n            abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", payloadHash)\\n        );\\n\\n        require(\\n            ecrecover(messageHash, v, r, s) == owner(),\\n            \\\"Signature no match\\\"\\n        );\\n        uint256 old = payedOut[userId];\\n        payedOut[userId] = totalPayOut;\\n\\n        return totalPayOut - old;\\n    }\\n\\n    function withdraw(\\n        address payable dev,\\n        bytes32 userId,\\n        uint256 totalPayOut,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external virtual;\\n}\\n\",\"keccak256\":\"0x86925e29b48af60e63014e6d986f00836c341bc9e348990c5f367960d5813dce\",\"license\":\"MIT\"},\"contracts/PayoutEth.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {PayoutBase} from \\\"./PayoutBase.sol\\\";\\n\\ncontract PayoutEth is PayoutBase {\\n    function initialize() public initializer {\\n        payoutInit(\\\"ETH\\\");\\n    }\\n\\n    receive() external payable {}\\n\\n    /**\\n     * @dev Send back from contract in case something is wrong. This should rarely happen\\n     */\\n    function sendRecover(\\n        address payable receiver,\\n        uint256 amount\\n    ) external override onlyOwner {\\n        receiver.transfer(amount);\\n    }\\n\\n    /**\\n     * @dev Withdraw the earned amount. The signature has to be created by the contract owner and the signed message\\n     * is the hash of the concatenation of the account and tea.\\n     *\\n     * @param dev The address to withdraw to.\\n     * @param userId The user id that never changes\\n     * @param totalPayOut The total amount that the user earned.\\n     * @param v The recovery byte of the signature.\\n     * @param r The r value of the signature.\\n     * @param s The s value of the signature.\\n     */\\n    function withdraw(\\n        address payable dev,\\n        bytes32 userId,\\n        uint256 totalPayOut,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external override {\\n        uint256 toBePaid = calculateWithdraw(userId, totalPayOut, v, r, s);\\n\\n        // transfer reverts transaction if not successful.\\n        dev.transfer(toBePaid);\\n    }\\n}\\n\",\"keccak256\":\"0x87f8cdb53f3c43fba622cbec8fccd95b643234917b4b47d07aa30e3312b32a93\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610b50806100206000396000f3fe60806040526004361061007a5760003560e01c80634c29371414610086578063715018a6146100c657806371676bd6146100dd5780638129fc1c146100fd5780638da5cb5b146101125780638e0fb98d1461013f578063d2fc98ea1461016c578063db6e81ef1461018c578063f2fde38b146101ac57600080fd5b3661008157005b600080fd5b34801561009257600080fd5b506100b36100a136600461079e565b60656020526000908152604090205481565b6040519081526020015b60405180910390f35b3480156100d257600080fd5b506100db6101cc565b005b3480156100e957600080fd5b506100db6100f83660046107cc565b6101e0565b34801561010957600080fd5b506100db610232565b34801561011e57600080fd5b50610127610364565b6040516001600160a01b0390911681526020016100bd565b34801561014b57600080fd5b506100b361015a36600461079e565b60009081526065602052604090205490565b34801561017857600080fd5b506100db61018736600461082e565b610373565b34801561019857600080fd5b506100b36101a736600461085a565b6103b6565b3480156101b857600080fd5b506100db6101c736600461087c565b6103d8565b6101d461044e565b6101de60006104ad565b565b60006101ef86868686866104ff565b6040519091506001600160a01b0388169082156108fc029083906000818181858888f19350505050158015610228573d6000803e3d6000fd5b5050505050505050565b600054610100900460ff16158080156102525750600054600160ff909116105b8061026c5750303b15801561026c575060005460ff166001145b6102d45760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff1916600117905580156102f7576000805461ff0019166101001790555b61031b6040518060400160405280600381526020016208aa8960eb1b8152506106d0565b8015610361576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50565b6033546001600160a01b031690565b61037b61044e565b6040516001600160a01b0383169082156108fc029083906000818181858888f193505050501580156103b1573d6000803e3d6000fd5b505050565b6000828152606560205260408120546103cf90836108a0565b90505b92915050565b6103e061044e565b6001600160a01b0381166104455760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102cb565b610361816104ad565b33610457610364565b6001600160a01b0316146101de5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102cb565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600085815260656020526040812054851161055b5760405162461bcd60e51b815260206004820152601c60248201527b2737903732bb90333ab73239903a37903132903bb4ba34323930bbb760211b60448201526064016102cb565b600086866066604051602001610573939291906108fb565b6040516020818303038152906040528051906020012090506000816040516020016105c991907b0ca2ba3432b932bab69029b4b3b732b21026b2b9b9b0b3b29d05199960211b8152601c810191909152603c0190565b6040516020818303038152906040528051906020012090506105e9610364565b6001600160a01b03166001828888886040516000815260200160405260405161062e949392919093845260ff9290921660208401526040830152606082015260800190565b6020604051602081039080840390855afa158015610650573d6000803e3d6000fd5b505050602060405103516001600160a01b0316146106a55760405162461bcd60e51b81526020600482015260126024820152710a6d2cedcc2e8eae4ca40dcde40dac2e8c6d60731b60448201526064016102cb565b60008881526065602052604090208054908890556106c381896108a0565b9998505050505050505050565b600054610100900460ff166106f75760405162461bcd60e51b81526004016102cb906109ac565b6106ff610708565b61036181610737565b600054610100900460ff1661072f5760405162461bcd60e51b81526004016102cb906109ac565b6101de61076e565b600054610100900460ff1661075e5760405162461bcd60e51b81526004016102cb906109ac565b606661076a8282610a5b565b5050565b600054610100900460ff166107955760405162461bcd60e51b81526004016102cb906109ac565b6101de336104ad565b6000602082840312156107b057600080fd5b5035919050565b6001600160a01b038116811461036157600080fd5b60008060008060008060c087890312156107e557600080fd5b86356107f0816107b7565b95506020870135945060408701359350606087013560ff8116811461081457600080fd5b9598949750929560808101359460a0909101359350915050565b6000806040838503121561084157600080fd5b823561084c816107b7565b946020939093013593505050565b6000806040838503121561086d57600080fd5b50508035926020909101359150565b60006020828403121561088e57600080fd5b8135610899816107b7565b9392505050565b818103818111156103d257634e487b7160e01b600052601160045260246000fd5b600181811c908216806108d557607f821691505b6020821081036108f557634e487b7160e01b600052602260045260246000fd5b50919050565b838152600060206080818401526001806080850152602360f81b60a085015285604085015260c0606085015260008554610934816108c1565b8060c088015260e084831660008114610954576001811461096e5761099c565b60ff1984168983015282151560051b89018201945061099c565b896000528660002060005b848110156109945781548b8201850152908701908801610979565b8a0183019550505b50929a9950505050505050505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b634e487b7160e01b600052604160045260246000fd5b601f8211156103b157600081815260208120601f850160051c81016020861015610a345750805b601f850160051c820191505b81811015610a5357828155600101610a40565b505050505050565b81516001600160401b03811115610a7457610a746109f7565b610a8881610a8284546108c1565b84610a0d565b602080601f831160018114610abd5760008415610aa55750858301515b600019600386901b1c1916600185901b178555610a53565b600085815260208120601f198616915b82811015610aec57888601518255948401946001909101908401610acd565b5085821015610b0a5787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea264697066735822122031c8239287193bfc3897290c79f390076ab53cc6370505018416aa45f4790f3364736f6c63430008110033",
  "deployedBytecode": "0x60806040526004361061007a5760003560e01c80634c29371414610086578063715018a6146100c657806371676bd6146100dd5780638129fc1c146100fd5780638da5cb5b146101125780638e0fb98d1461013f578063d2fc98ea1461016c578063db6e81ef1461018c578063f2fde38b146101ac57600080fd5b3661008157005b600080fd5b34801561009257600080fd5b506100b36100a136600461079e565b60656020526000908152604090205481565b6040519081526020015b60405180910390f35b3480156100d257600080fd5b506100db6101cc565b005b3480156100e957600080fd5b506100db6100f83660046107cc565b6101e0565b34801561010957600080fd5b506100db610232565b34801561011e57600080fd5b50610127610364565b6040516001600160a01b0390911681526020016100bd565b34801561014b57600080fd5b506100b361015a36600461079e565b60009081526065602052604090205490565b34801561017857600080fd5b506100db61018736600461082e565b610373565b34801561019857600080fd5b506100b36101a736600461085a565b6103b6565b3480156101b857600080fd5b506100db6101c736600461087c565b6103d8565b6101d461044e565b6101de60006104ad565b565b60006101ef86868686866104ff565b6040519091506001600160a01b0388169082156108fc029083906000818181858888f19350505050158015610228573d6000803e3d6000fd5b5050505050505050565b600054610100900460ff16158080156102525750600054600160ff909116105b8061026c5750303b15801561026c575060005460ff166001145b6102d45760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff1916600117905580156102f7576000805461ff0019166101001790555b61031b6040518060400160405280600381526020016208aa8960eb1b8152506106d0565b8015610361576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50565b6033546001600160a01b031690565b61037b61044e565b6040516001600160a01b0383169082156108fc029083906000818181858888f193505050501580156103b1573d6000803e3d6000fd5b505050565b6000828152606560205260408120546103cf90836108a0565b90505b92915050565b6103e061044e565b6001600160a01b0381166104455760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102cb565b610361816104ad565b33610457610364565b6001600160a01b0316146101de5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102cb565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600085815260656020526040812054851161055b5760405162461bcd60e51b815260206004820152601c60248201527b2737903732bb90333ab73239903a37903132903bb4ba34323930bbb760211b60448201526064016102cb565b600086866066604051602001610573939291906108fb565b6040516020818303038152906040528051906020012090506000816040516020016105c991907b0ca2ba3432b932bab69029b4b3b732b21026b2b9b9b0b3b29d05199960211b8152601c810191909152603c0190565b6040516020818303038152906040528051906020012090506105e9610364565b6001600160a01b03166001828888886040516000815260200160405260405161062e949392919093845260ff9290921660208401526040830152606082015260800190565b6020604051602081039080840390855afa158015610650573d6000803e3d6000fd5b505050602060405103516001600160a01b0316146106a55760405162461bcd60e51b81526020600482015260126024820152710a6d2cedcc2e8eae4ca40dcde40dac2e8c6d60731b60448201526064016102cb565b60008881526065602052604090208054908890556106c381896108a0565b9998505050505050505050565b600054610100900460ff166106f75760405162461bcd60e51b81526004016102cb906109ac565b6106ff610708565b61036181610737565b600054610100900460ff1661072f5760405162461bcd60e51b81526004016102cb906109ac565b6101de61076e565b600054610100900460ff1661075e5760405162461bcd60e51b81526004016102cb906109ac565b606661076a8282610a5b565b5050565b600054610100900460ff166107955760405162461bcd60e51b81526004016102cb906109ac565b6101de336104ad565b6000602082840312156107b057600080fd5b5035919050565b6001600160a01b038116811461036157600080fd5b60008060008060008060c087890312156107e557600080fd5b86356107f0816107b7565b95506020870135945060408701359350606087013560ff8116811461081457600080fd5b9598949750929560808101359460a0909101359350915050565b6000806040838503121561084157600080fd5b823561084c816107b7565b946020939093013593505050565b6000806040838503121561086d57600080fd5b50508035926020909101359150565b60006020828403121561088e57600080fd5b8135610899816107b7565b9392505050565b818103818111156103d257634e487b7160e01b600052601160045260246000fd5b600181811c908216806108d557607f821691505b6020821081036108f557634e487b7160e01b600052602260045260246000fd5b50919050565b838152600060206080818401526001806080850152602360f81b60a085015285604085015260c0606085015260008554610934816108c1565b8060c088015260e084831660008114610954576001811461096e5761099c565b60ff1984168983015282151560051b89018201945061099c565b896000528660002060005b848110156109945781548b8201850152908701908801610979565b8a0183019550505b50929a9950505050505050505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b634e487b7160e01b600052604160045260246000fd5b601f8211156103b157600081815260208120601f850160051c81016020861015610a345750805b601f850160051c820191505b81811015610a5357828155600101610a40565b505050505050565b81516001600160401b03811115610a7457610a746109f7565b610a8881610a8284546108c1565b84610a0d565b602080601f831160018114610abd5760008415610aa55750858301515b600019600386901b1c1916600185901b178555610a53565b600085815260208120601f198616915b82811015610aec57888601518255948401946001909101908401610acd565b5085821015610b0a5787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea264697066735822122031c8239287193bfc3897290c79f390076ab53cc6370505018416aa45f4790f3364736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getClaimableAmount(bytes32,uint256)": {
        "details": "Gets the tea for the provided address."
      },
      "getPayedOut(bytes32)": {
        "details": "Gets the tea for the provided address."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "sendRecover(address,uint256)": {
        "details": "Send back from contract in case something is wrong. This should rarely happen"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw(address,bytes32,uint256,uint8,bytes32,bytes32)": {
        "details": "Withdraw the earned amount. The signature has to be created by the contract owner and the signed message is the hash of the concatenation of the account and tea.",
        "params": {
          "dev": "The address to withdraw to.",
          "r": "The r value of the signature.",
          "s": "The s value of the signature.",
          "totalPayOut": "The total amount that the user earned.",
          "userId": "The user id that never changes",
          "v": "The recovery byte of the signature."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1950,
        "contract": "contracts/PayoutEth.sol:PayoutEth",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 1953,
        "contract": "contracts/PayoutEth.sol:PayoutEth",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4582,
        "contract": "contracts/PayoutEth.sol:PayoutEth",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 419,
        "contract": "contracts/PayoutEth.sol:PayoutEth",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 539,
        "contract": "contracts/PayoutEth.sol:PayoutEth",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 10511,
        "contract": "contracts/PayoutEth.sol:PayoutEth",
        "label": "payedOut",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 10513,
        "contract": "contracts/PayoutEth.sol:PayoutEth",
        "label": "currencyCode",
        "offset": 0,
        "slot": "102",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
