{
  "address": "0x45bf91fB9A17468ce469aEaB0AFA2d78a7771872",
  "abi": [
    {
      "inputs": [],
      "name": "Empty",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "newBylawsUrl",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "newBylawsHash",
          "type": "string"
        }
      ],
      "name": "BylawsChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "string[]",
          "name": "signatures",
          "type": "string[]"
        },
        {
          "indexed": false,
          "internalType": "bytes[]",
          "name": "calldatas",
          "type": "bytes[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "enum GovernorUpgradeable.ProposalCategory",
          "name": "category",
          "type": "uint8"
        }
      ],
      "name": "DAOProposalCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "string[]",
          "name": "signatures",
          "type": "string[]"
        },
        {
          "indexed": false,
          "internalType": "bytes[]",
          "name": "calldatas",
          "type": "bytes[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "name": "ExtraOrdinaryAssemblyRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timeslot",
          "type": "uint256"
        }
      ],
      "name": "NewTimeslotSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "ProposalCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "string[]",
          "name": "signatures",
          "type": "string[]"
        },
        {
          "indexed": false,
          "internalType": "bytes[]",
          "name": "calldatas",
          "type": "bytes[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "name": "ProposalCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "ProposalExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "eta",
          "type": "uint256"
        }
      ],
      "name": "ProposalQueued",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "oldTime",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "newTime",
          "type": "uint64"
        }
      ],
      "name": "ProposalVotingTimeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldQuorumNumerator",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newQuorumNumerator",
          "type": "uint256"
        }
      ],
      "name": "QuorumNumeratorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldTimelock",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newTimelock",
          "type": "address"
        }
      ],
      "name": "TimelockChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "support",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "VoteCast",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "support",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "params",
          "type": "bytes"
        }
      ],
      "name": "VoteCastWithParams",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "VotingSlotCancelled",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BALLOT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "COUNTING_MODE",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EXTENDED_BALLOT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "associationDissolutionQuorumNominator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bylawsHash",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bylawsUrl",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "cancelVotingSlot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "support",
          "type": "uint8"
        }
      ],
      "name": "castVote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "support",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "castVoteBySig",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "support",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "castVoteWithReason",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "support",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "params",
          "type": "bytes"
        }
      ],
      "name": "castVoteWithReasonAndParams",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "support",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "params",
          "type": "bytes"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "castVoteWithReasonAndParamsBySig",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daoActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dissolveDAO",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "calldatas",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes32",
          "name": "descriptionHash",
          "type": "bytes32"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "extraOrdinaryAssemblyProposals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "extraOrdinaryAssemblyVotingPeriod",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "extraordinaryVoteQuorumNominator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getExtraOrdinaryProposalsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMinDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "slotNumber",
          "type": "uint256"
        }
      ],
      "name": "getNumberOfProposalsInVotingSlot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSlotsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "params",
          "type": "bytes"
        }
      ],
      "name": "getVotesWithParams",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasVoted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "calldatas",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes32",
          "name": "descriptionHash",
          "type": "bytes32"
        }
      ],
      "name": "hashProposal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Membership",
          "name": "_membership",
          "type": "address"
        },
        {
          "internalType": "contract TimelockControllerUpgradeable",
          "name": "_timelock",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "bylawsHash",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "bylawsUrl",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "proposalDeadline",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "proposalEta",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "proposalSnapshot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposalThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "proposalVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "againstVotes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "forVotes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "abstainVotes",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "calldatas",
          "type": "bytes[]"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "name": "propose",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "calldatas",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes32",
          "name": "descriptionHash",
          "type": "bytes32"
        }
      ],
      "name": "queue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "quorum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "quorumDenominator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "quorumNumerator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "quorumNumerator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "relay",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "setAssociationDissolutionQuorumNominator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "newExtraOrdinaryAssemblyVotingPeriod",
          "type": "uint64"
        }
      ],
      "name": "setExtraOrdinaryAssemblyVotingPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "setExtraordinaryVoteQuorumNominator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newBylawsHash",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "newBylawsUrl",
          "type": "string"
        }
      ],
      "name": "setNewBylaws",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newSlotCloseTime",
          "type": "uint256"
        }
      ],
      "name": "setSlotCloseTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "setVotingSlot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "newVotingSlotAnnouncementPeriod",
          "type": "uint64"
        }
      ],
      "name": "setVotingSlotAnnouncementPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slotCloseTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "slots",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "state",
      "outputs": [
        {
          "internalType": "enum IGovernorUpgradeable.ProposalState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timelock",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IVotesUpgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newQuorumNumerator",
          "type": "uint256"
        }
      ],
      "name": "updateQuorumNumerator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract TimelockControllerUpgradeable",
          "name": "newTimelock",
          "type": "address"
        }
      ],
      "name": "updateTimelock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "votingDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "votingPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "votingSlotAnnouncementPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "votingSlots",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xdebd9e8f0d08999e121688b514c90d68f75c4aff1a26bf1c51508ee3d87161cb",
  "receipt": {
    "to": null,
    "from": "0xaC37Eb0d57f261AB95D3c65B8E8D93a60c128F50",
    "contractAddress": "0x45bf91fB9A17468ce469aEaB0AFA2d78a7771872",
    "transactionIndex": 86,
    "gasUsed": "4742681",
    "logsBloom": "0x
    "blockHash": "0x0f685e4dc88b5d97f2d6801b52f1d01640319304fea2c3dbb7741a14da646bab",
    "transactionHash": "0xdebd9e8f0d08999e121688b514c90d68f75c4aff1a26bf1c51508ee3d87161cb",
    "logs": [],
    "blockNumber": 8939550,
    "cumulativeGasUsed": "9503817",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "5e7ead6f489ba1541e29a5c0da5dc006",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"Empty\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"newBylawsUrl\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"newBylawsHash\",\"type\":\"string\"}],\"name\":\"BylawsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"enum GovernorUpgradeable.ProposalCategory\",\"name\":\"category\",\"type\":\"uint8\"}],\"name\":\"DAOProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"ExtraOrdinaryAssemblyRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeslot\",\"type\":\"uint256\"}],\"name\":\"NewTimeslotSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"ProposalCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"ProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"}],\"name\":\"ProposalQueued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"oldTime\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"newTime\",\"type\":\"uint64\"}],\"name\":\"ProposalVotingTimeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldQuorumNumerator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newQuorumNumerator\",\"type\":\"uint256\"}],\"name\":\"QuorumNumeratorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldTimelock\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTimelock\",\"type\":\"address\"}],\"name\":\"TimelockChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"support\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"VoteCast\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"support\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"VoteCastWithParams\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"VotingSlotCancelled\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BALLOT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COUNTING_MODE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXTENDED_BALLOT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"associationDissolutionQuorumNominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bylawsHash\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bylawsUrl\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"cancelVotingSlot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"support\",\"type\":\"uint8\"}],\"name\":\"castVote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"support\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"castVoteBySig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"support\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"castVoteWithReason\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"support\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"castVoteWithReasonAndParams\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"support\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"castVoteWithReasonAndParamsBySig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dissolveDAO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"descriptionHash\",\"type\":\"bytes32\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"extraOrdinaryAssemblyProposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extraOrdinaryAssemblyVotingPeriod\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extraordinaryVoteQuorumNominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExtraOrdinaryProposalsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"slotNumber\",\"type\":\"uint256\"}],\"name\":\"getNumberOfProposalsInVotingSlot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSlotsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"getVotesWithParams\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"descriptionHash\",\"type\":\"bytes32\"}],\"name\":\"hashProposal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Membership\",\"name\":\"_membership\",\"type\":\"address\"},{\"internalType\":\"contract TimelockControllerUpgradeable\",\"name\":\"_timelock\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"bylawsHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"bylawsUrl\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"proposalDeadline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"proposalEta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"proposalSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"proposalVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"againstVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"forVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"abstainVotes\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"propose\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"descriptionHash\",\"type\":\"bytes32\"}],\"name\":\"queue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"quorum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quorumDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"quorumNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quorumNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"relay\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setAssociationDissolutionQuorumNominator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"newExtraOrdinaryAssemblyVotingPeriod\",\"type\":\"uint64\"}],\"name\":\"setExtraOrdinaryAssemblyVotingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setExtraordinaryVoteQuorumNominator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newBylawsHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"newBylawsUrl\",\"type\":\"string\"}],\"name\":\"setNewBylaws\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSlotCloseTime\",\"type\":\"uint256\"}],\"name\":\"setSlotCloseTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"setVotingSlot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"newVotingSlotAnnouncementPeriod\",\"type\":\"uint64\"}],\"name\":\"setVotingSlotAnnouncementPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slotCloseTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"slots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum IGovernorUpgradeable.ProposalState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelock\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IVotesUpgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newQuorumNumerator\",\"type\":\"uint256\"}],\"name\":\"updateQuorumNumerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract TimelockControllerUpgradeable\",\"name\":\"newTimelock\",\"type\":\"address\"}],\"name\":\"updateTimelock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingSlotAnnouncementPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"votingSlots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"Empty()\":[{\"details\":\"An operation (e.g. {front}) couldn't be completed due to the queue being empty.\"}]},\"kind\":\"dev\",\"methods\":{\"COUNTING_MODE()\":{\"details\":\"A description of the possible `support` values for {castVote} and the way these votes are counted, meant to be consumed by UIs to show correct vote options and interpret the results. The string is a URL-encoded sequence of key-value pairs that each describe one aspect, for example `support=bravo&quorum=for,abstain`. There are 2 standard keys: `support` and `quorum`. - `support=bravo` refers to the vote options 0 = Against, 1 = For, 2 = Abstain, as in `GovernorBravo`. - `quorum=bravo` means that only For votes are counted towards quorum. - `quorum=for,abstain` means that both For and Abstain votes are counted towards quorum. If a counting module makes use of encoded `params`, it should  include this under a `params` key with a unique name that describes the behavior. For example: - `params=fractional` might refer to a scheme where votes are divided fractionally between for/against/abstain. - `params=erc721` might refer to a scheme where specific NFTs are delegated to vote. NOTE: The string can be decoded by the standard https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams[`URLSearchParams`] JavaScript class.\"},\"castVote(uint256,uint8)\":{\"details\":\"Cast a vote Emits a {VoteCast} event.\"},\"castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)\":{\"details\":\"Cast a vote using the user's cryptographic signature. Emits a {VoteCast} event.\"},\"castVoteWithReason(uint256,uint8,string)\":{\"details\":\"Cast a vote with a reason Emits a {VoteCast} event.\"},\"castVoteWithReasonAndParams(uint256,uint8,string,bytes)\":{\"details\":\"Cast a vote with a reason and additional encoded parameters Emits a {VoteCast} or {VoteCastWithParams} event depending on the length of params.\"},\"castVoteWithReasonAndParamsBySig(uint256,uint8,string,bytes,uint8,bytes32,bytes32)\":{\"details\":\"Cast a vote with a reason and additional encoded parameters using the user's cryptographic signature. Emits a {VoteCast} or {VoteCastWithParams} event depending on the length of params.\"},\"execute(address[],uint256[],bytes[],bytes32)\":{\"details\":\"Execute a successful proposal. This requires the quorum to be reached, the vote to be successful, and the deadline to be reached. Emits a {ProposalExecuted} event. Note: some module can modify the requirements for execution, for example by adding an additional timelock.\"},\"getVotesWithParams(address,uint256,bytes)\":{\"details\":\"Voting power of an `account` at a specific `blockNumber` given additional encoded parameters.\"},\"hasVoted(uint256,address)\":{\"details\":\"Returns whether `account` has cast a vote on `proposalId`.\"},\"hashProposal(address[],uint256[],bytes[],bytes32)\":{\"details\":\"Hashing function used to (re)build the proposal id from the proposal details..\"},\"name()\":{\"details\":\"Name of the governor instance (used in building the ERC712 domain separator).\"},\"proposalDeadline(uint256)\":{\"details\":\"Block number at which votes close. Votes close at the end of this block, so it is possible to cast a vote during this block.\"},\"proposalSnapshot(uint256)\":{\"details\":\"Block number used to retrieve user's votes and quorum. As per Compound's Comp and OpenZeppelin's ERC20Votes, the snapshot is performed at the end of this block. Hence, voting for this proposal starts at the beginning of the following block.\"},\"version()\":{\"details\":\"Version of the governor instance (used in building the ERC712 domain separator). Default: \\\"1\\\"\"},\"votingDelay()\":{\"details\":\"Delay, in number of block, between the proposal is created and the vote starts. This can be increassed to leave time for users to buy voting power, or delegate it, before the voting of a proposal starts.\"},\"votingPeriod()\":{\"details\":\"Delay, in number of blocks, between the vote start and vote ends. NOTE: The {votingDelay} can delay the start of the vote. This must be considered when setting the voting duration compared to the voting delay.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"COUNTING_MODE()\":{\"notice\":\"module:voting\"},\"getVotesWithParams(address,uint256,bytes)\":{\"notice\":\"module:reputation\"},\"hasVoted(uint256,address)\":{\"notice\":\"module:voting\"},\"hashProposal(address[],uint256[],bytes[],bytes32)\":{\"notice\":\"module:core\"},\"name()\":{\"notice\":\"module:core\"},\"proposalDeadline(uint256)\":{\"notice\":\"module:core\"},\"proposalSnapshot(uint256)\":{\"notice\":\"module:core\"},\"proposalThreshold()\":{\"notice\":\"The number of votes required in order for a voter to become a proposer Must have voting power to create a proposal\"},\"version()\":{\"notice\":\"module:core\"},\"votingDelay()\":{\"notice\":\"module:user-config\"},\"votingPeriod()\":{\"notice\":\"module:user-config\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DAO.sol\":\"DAO\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xe8f27a3e3e25067334e76799f03d4de6d8f8535c3fc4806468228a9ebd5de51a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/governance/IGovernorUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (governance/IGovernor.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Interface of the {Governor} core.\\n *\\n * _Available since v4.3._\\n */\\nabstract contract IGovernorUpgradeable is Initializable, IERC165Upgradeable {\\n    function __IGovernor_init() internal onlyInitializing {\\n    }\\n\\n    function __IGovernor_init_unchained() internal onlyInitializing {\\n    }\\n    enum ProposalState {\\n        Pending,\\n        Active,\\n        Canceled,\\n        Defeated,\\n        Succeeded,\\n        Queued,\\n        Expired,\\n        Executed\\n    }\\n\\n    /**\\n     * @dev Emitted when a proposal is created.\\n     */\\n    event ProposalCreated(\\n        uint256 proposalId,\\n        address proposer,\\n        address[] targets,\\n        uint256[] values,\\n        string[] signatures,\\n        bytes[] calldatas,\\n        uint256 startBlock,\\n        uint256 endBlock,\\n        string description\\n    );\\n\\n    /**\\n     * @dev Emitted when a proposal is canceled.\\n     */\\n    event ProposalCanceled(uint256 proposalId);\\n\\n    /**\\n     * @dev Emitted when a proposal is executed.\\n     */\\n    event ProposalExecuted(uint256 proposalId);\\n\\n    /**\\n     * @dev Emitted when a vote is cast without params.\\n     *\\n     * Note: `support` values should be seen as buckets. Their interpretation depends on the voting module used.\\n     */\\n    event VoteCast(address indexed voter, uint256 proposalId, uint8 support, uint256 weight, string reason);\\n\\n    /**\\n     * @dev Emitted when a vote is cast with params.\\n     *\\n     * Note: `support` values should be seen as buckets. Their interpretation depends on the voting module used.\\n     * `params` are additional encoded parameters. Their intepepretation also depends on the voting module used.\\n     */\\n    event VoteCastWithParams(\\n        address indexed voter,\\n        uint256 proposalId,\\n        uint8 support,\\n        uint256 weight,\\n        string reason,\\n        bytes params\\n    );\\n\\n    /**\\n     * @notice module:core\\n     * @dev Name of the governor instance (used in building the ERC712 domain separator).\\n     */\\n    function name() public view virtual returns (string memory);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Version of the governor instance (used in building the ERC712 domain separator). Default: \\\"1\\\"\\n     */\\n    function version() public view virtual returns (string memory);\\n\\n    /**\\n     * @notice module:voting\\n     * @dev A description of the possible `support` values for {castVote} and the way these votes are counted, meant to\\n     * be consumed by UIs to show correct vote options and interpret the results. The string is a URL-encoded sequence of\\n     * key-value pairs that each describe one aspect, for example `support=bravo&quorum=for,abstain`.\\n     *\\n     * There are 2 standard keys: `support` and `quorum`.\\n     *\\n     * - `support=bravo` refers to the vote options 0 = Against, 1 = For, 2 = Abstain, as in `GovernorBravo`.\\n     * - `quorum=bravo` means that only For votes are counted towards quorum.\\n     * - `quorum=for,abstain` means that both For and Abstain votes are counted towards quorum.\\n     *\\n     * If a counting module makes use of encoded `params`, it should  include this under a `params` key with a unique\\n     * name that describes the behavior. For example:\\n     *\\n     * - `params=fractional` might refer to a scheme where votes are divided fractionally between for/against/abstain.\\n     * - `params=erc721` might refer to a scheme where specific NFTs are delegated to vote.\\n     *\\n     * NOTE: The string can be decoded by the standard\\n     * https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams[`URLSearchParams`]\\n     * JavaScript class.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function COUNTING_MODE() public pure virtual returns (string memory);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Hashing function used to (re)build the proposal id from the proposal details..\\n     */\\n    function hashProposal(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) public pure virtual returns (uint256);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Current state of a proposal, following Compound's convention\\n     */\\n    function state(uint256 proposalId) public view virtual returns (ProposalState);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Block number used to retrieve user's votes and quorum. As per Compound's Comp and OpenZeppelin's\\n     * ERC20Votes, the snapshot is performed at the end of this block. Hence, voting for this proposal starts at the\\n     * beginning of the following block.\\n     */\\n    function proposalSnapshot(uint256 proposalId) public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Block number at which votes close. Votes close at the end of this block, so it is possible to cast a vote\\n     * during this block.\\n     */\\n    function proposalDeadline(uint256 proposalId) public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:user-config\\n     * @dev Delay, in number of block, between the proposal is created and the vote starts. This can be increassed to\\n     * leave time for users to buy voting power, or delegate it, before the voting of a proposal starts.\\n     */\\n    function votingDelay() public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:user-config\\n     * @dev Delay, in number of blocks, between the vote start and vote ends.\\n     *\\n     * NOTE: The {votingDelay} can delay the start of the vote. This must be considered when setting the voting\\n     * duration compared to the voting delay.\\n     */\\n    function votingPeriod() public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:user-config\\n     * @dev Minimum number of cast voted required for a proposal to be successful.\\n     *\\n     * Note: The `blockNumber` parameter corresponds to the snapshot used for counting vote. This allows to scale the\\n     * quorum depending on values such as the totalSupply of a token at this block (see {ERC20Votes}).\\n     */\\n    function quorum(uint256 blockNumber) public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:reputation\\n     * @dev Voting power of an `account` at a specific `blockNumber`.\\n     *\\n     * Note: this can be implemented in a number of ways, for example by reading the delegated balance from one (or\\n     * multiple), {ERC20Votes} tokens.\\n     */\\n    function getVotes(address account, uint256 blockNumber) public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:reputation\\n     * @dev Voting power of an `account` at a specific `blockNumber` given additional encoded parameters.\\n     */\\n    function getVotesWithParams(\\n        address account,\\n        uint256 blockNumber,\\n        bytes memory params\\n    ) public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:voting\\n     * @dev Returns whether `account` has cast a vote on `proposalId`.\\n     */\\n    function hasVoted(uint256 proposalId, address account) public view virtual returns (bool);\\n\\n    /**\\n     * @dev Create a new proposal. Vote start {IGovernor-votingDelay} blocks after the proposal is created and ends\\n     * {IGovernor-votingPeriod} blocks after the voting starts.\\n     *\\n     * Emits a {ProposalCreated} event.\\n     */\\n    function propose(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        string memory description\\n    ) public virtual returns (uint256 proposalId);\\n\\n    /**\\n     * @dev Execute a successful proposal. This requires the quorum to be reached, the vote to be successful, and the\\n     * deadline to be reached.\\n     *\\n     * Emits a {ProposalExecuted} event.\\n     *\\n     * Note: some module can modify the requirements for execution, for example by adding an additional timelock.\\n     */\\n    function execute(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) public payable virtual returns (uint256 proposalId);\\n\\n    /**\\n     * @dev Cast a vote\\n     *\\n     * Emits a {VoteCast} event.\\n     */\\n    function castVote(uint256 proposalId, uint8 support) public virtual returns (uint256 balance);\\n\\n    /**\\n     * @dev Cast a vote with a reason\\n     *\\n     * Emits a {VoteCast} event.\\n     */\\n    function castVoteWithReason(\\n        uint256 proposalId,\\n        uint8 support,\\n        string calldata reason\\n    ) public virtual returns (uint256 balance);\\n\\n    /**\\n     * @dev Cast a vote with a reason and additional encoded parameters\\n     *\\n     * Emits a {VoteCast} or {VoteCastWithParams} event depending on the length of params.\\n     */\\n    function castVoteWithReasonAndParams(\\n        uint256 proposalId,\\n        uint8 support,\\n        string calldata reason,\\n        bytes memory params\\n    ) public virtual returns (uint256 balance);\\n\\n    /**\\n     * @dev Cast a vote using the user's cryptographic signature.\\n     *\\n     * Emits a {VoteCast} event.\\n     */\\n    function castVoteBySig(\\n        uint256 proposalId,\\n        uint8 support,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual returns (uint256 balance);\\n\\n    /**\\n     * @dev Cast a vote with a reason and additional encoded parameters using the user's cryptographic signature.\\n     *\\n     * Emits a {VoteCast} or {VoteCastWithParams} event depending on the length of params.\\n     */\\n    function castVoteWithReasonAndParamsBySig(\\n        uint256 proposalId,\\n        uint8 support,\\n        string calldata reason,\\n        bytes memory params,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual returns (uint256 balance);\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x08fbe82089013a530d69403b6b2d2ab6c63ef25cba94f3f1531378eda4c49bc5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/governance/TimelockControllerUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.2) (governance/TimelockController.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../access/AccessControlUpgradeable.sol\\\";\\nimport \\\"../token/ERC721/IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"../token/ERC1155/IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which acts as a timelocked controller. When set as the\\n * owner of an `Ownable` smart contract, it enforces a timelock on all\\n * `onlyOwner` maintenance operations. This gives time for users of the\\n * controlled contract to exit before a potentially dangerous maintenance\\n * operation is applied.\\n *\\n * By default, this contract is self administered, meaning administration tasks\\n * have to go through the timelock process. The proposer (resp executor) role\\n * is in charge of proposing (resp executing) operations. A common use case is\\n * to position this {TimelockController} as the owner of a smart contract, with\\n * a multisig or a DAO as the sole proposer.\\n *\\n * _Available since v3.3._\\n */\\ncontract TimelockControllerUpgradeable is Initializable, AccessControlUpgradeable, IERC721ReceiverUpgradeable, IERC1155ReceiverUpgradeable {\\n    bytes32 public constant TIMELOCK_ADMIN_ROLE = keccak256(\\\"TIMELOCK_ADMIN_ROLE\\\");\\n    bytes32 public constant PROPOSER_ROLE = keccak256(\\\"PROPOSER_ROLE\\\");\\n    bytes32 public constant EXECUTOR_ROLE = keccak256(\\\"EXECUTOR_ROLE\\\");\\n    bytes32 public constant CANCELLER_ROLE = keccak256(\\\"CANCELLER_ROLE\\\");\\n    uint256 internal constant _DONE_TIMESTAMP = uint256(1);\\n\\n    mapping(bytes32 => uint256) private _timestamps;\\n    uint256 private _minDelay;\\n\\n    /**\\n     * @dev Emitted when a call is scheduled as part of operation `id`.\\n     */\\n    event CallScheduled(\\n        bytes32 indexed id,\\n        uint256 indexed index,\\n        address target,\\n        uint256 value,\\n        bytes data,\\n        bytes32 predecessor,\\n        uint256 delay\\n    );\\n\\n    /**\\n     * @dev Emitted when a call is performed as part of operation `id`.\\n     */\\n    event CallExecuted(bytes32 indexed id, uint256 indexed index, address target, uint256 value, bytes data);\\n\\n    /**\\n     * @dev Emitted when operation `id` is cancelled.\\n     */\\n    event Cancelled(bytes32 indexed id);\\n\\n    /**\\n     * @dev Emitted when the minimum delay for future operations is modified.\\n     */\\n    event MinDelayChange(uint256 oldDuration, uint256 newDuration);\\n\\n    /**\\n     * @dev Initializes the contract with the following parameters:\\n     *\\n     * - `minDelay`: initial minimum delay for operations\\n     * - `proposers`: accounts to be granted proposer and canceller roles\\n     * - `executors`: accounts to be granted executor role\\n     * - `admin`: optional account to be granted admin role; disable with zero address\\n     *\\n     * IMPORTANT: The optional admin can aid with initial configuration of roles after deployment\\n     * without being subject to delay, but this role should be subsequently renounced in favor of\\n     * administration through timelocked proposals. Previous versions of this contract would assign\\n     * this admin to the deployer automatically and should be renounced as well.\\n     */\\n    function __TimelockController_init(\\n        uint256 minDelay,\\n        address[] memory proposers,\\n        address[] memory executors,\\n        address admin\\n    ) internal onlyInitializing {\\n        __TimelockController_init_unchained(minDelay, proposers, executors, admin);\\n    }\\n\\n    function __TimelockController_init_unchained(\\n        uint256 minDelay,\\n        address[] memory proposers,\\n        address[] memory executors,\\n        address admin\\n    ) internal onlyInitializing {\\n        _setRoleAdmin(TIMELOCK_ADMIN_ROLE, TIMELOCK_ADMIN_ROLE);\\n        _setRoleAdmin(PROPOSER_ROLE, TIMELOCK_ADMIN_ROLE);\\n        _setRoleAdmin(EXECUTOR_ROLE, TIMELOCK_ADMIN_ROLE);\\n        _setRoleAdmin(CANCELLER_ROLE, TIMELOCK_ADMIN_ROLE);\\n\\n        // self administration\\n        _setupRole(TIMELOCK_ADMIN_ROLE, address(this));\\n\\n        // optional admin\\n        if (admin != address(0)) {\\n            _setupRole(TIMELOCK_ADMIN_ROLE, admin);\\n        }\\n\\n        // register proposers and cancellers\\n        for (uint256 i = 0; i < proposers.length; ++i) {\\n            _setupRole(PROPOSER_ROLE, proposers[i]);\\n            _setupRole(CANCELLER_ROLE, proposers[i]);\\n        }\\n\\n        // register executors\\n        for (uint256 i = 0; i < executors.length; ++i) {\\n            _setupRole(EXECUTOR_ROLE, executors[i]);\\n        }\\n\\n        _minDelay = minDelay;\\n        emit MinDelayChange(0, minDelay);\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only by a certain role. In\\n     * addition to checking the sender's role, `address(0)` 's role is also\\n     * considered. Granting a role to `address(0)` is equivalent to enabling\\n     * this role for everyone.\\n     */\\n    modifier onlyRoleOrOpenRole(bytes32 role) {\\n        if (!hasRole(role, address(0))) {\\n            _checkRole(role, _msgSender());\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev Contract might receive/hold ETH as part of the maintenance process.\\n     */\\n    receive() external payable {}\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, AccessControlUpgradeable) returns (bool) {\\n        return interfaceId == type(IERC1155ReceiverUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns whether an id correspond to a registered operation. This\\n     * includes both Pending, Ready and Done operations.\\n     */\\n    function isOperation(bytes32 id) public view virtual returns (bool registered) {\\n        return getTimestamp(id) > 0;\\n    }\\n\\n    /**\\n     * @dev Returns whether an operation is pending or not.\\n     */\\n    function isOperationPending(bytes32 id) public view virtual returns (bool pending) {\\n        return getTimestamp(id) > _DONE_TIMESTAMP;\\n    }\\n\\n    /**\\n     * @dev Returns whether an operation is ready or not.\\n     */\\n    function isOperationReady(bytes32 id) public view virtual returns (bool ready) {\\n        uint256 timestamp = getTimestamp(id);\\n        return timestamp > _DONE_TIMESTAMP && timestamp <= block.timestamp;\\n    }\\n\\n    /**\\n     * @dev Returns whether an operation is done or not.\\n     */\\n    function isOperationDone(bytes32 id) public view virtual returns (bool done) {\\n        return getTimestamp(id) == _DONE_TIMESTAMP;\\n    }\\n\\n    /**\\n     * @dev Returns the timestamp at with an operation becomes ready (0 for\\n     * unset operations, 1 for done operations).\\n     */\\n    function getTimestamp(bytes32 id) public view virtual returns (uint256 timestamp) {\\n        return _timestamps[id];\\n    }\\n\\n    /**\\n     * @dev Returns the minimum delay for an operation to become valid.\\n     *\\n     * This value can be changed by executing an operation that calls `updateDelay`.\\n     */\\n    function getMinDelay() public view virtual returns (uint256 duration) {\\n        return _minDelay;\\n    }\\n\\n    /**\\n     * @dev Returns the identifier of an operation containing a single\\n     * transaction.\\n     */\\n    function hashOperation(\\n        address target,\\n        uint256 value,\\n        bytes calldata data,\\n        bytes32 predecessor,\\n        bytes32 salt\\n    ) public pure virtual returns (bytes32 hash) {\\n        return keccak256(abi.encode(target, value, data, predecessor, salt));\\n    }\\n\\n    /**\\n     * @dev Returns the identifier of an operation containing a batch of\\n     * transactions.\\n     */\\n    function hashOperationBatch(\\n        address[] calldata targets,\\n        uint256[] calldata values,\\n        bytes[] calldata payloads,\\n        bytes32 predecessor,\\n        bytes32 salt\\n    ) public pure virtual returns (bytes32 hash) {\\n        return keccak256(abi.encode(targets, values, payloads, predecessor, salt));\\n    }\\n\\n    /**\\n     * @dev Schedule an operation containing a single transaction.\\n     *\\n     * Emits a {CallScheduled} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the 'proposer' role.\\n     */\\n    function schedule(\\n        address target,\\n        uint256 value,\\n        bytes calldata data,\\n        bytes32 predecessor,\\n        bytes32 salt,\\n        uint256 delay\\n    ) public virtual onlyRole(PROPOSER_ROLE) {\\n        bytes32 id = hashOperation(target, value, data, predecessor, salt);\\n        _schedule(id, delay);\\n        emit CallScheduled(id, 0, target, value, data, predecessor, delay);\\n    }\\n\\n    /**\\n     * @dev Schedule an operation containing a batch of transactions.\\n     *\\n     * Emits one {CallScheduled} event per transaction in the batch.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the 'proposer' role.\\n     */\\n    function scheduleBatch(\\n        address[] calldata targets,\\n        uint256[] calldata values,\\n        bytes[] calldata payloads,\\n        bytes32 predecessor,\\n        bytes32 salt,\\n        uint256 delay\\n    ) public virtual onlyRole(PROPOSER_ROLE) {\\n        require(targets.length == values.length, \\\"TimelockController: length mismatch\\\");\\n        require(targets.length == payloads.length, \\\"TimelockController: length mismatch\\\");\\n\\n        bytes32 id = hashOperationBatch(targets, values, payloads, predecessor, salt);\\n        _schedule(id, delay);\\n        for (uint256 i = 0; i < targets.length; ++i) {\\n            emit CallScheduled(id, i, targets[i], values[i], payloads[i], predecessor, delay);\\n        }\\n    }\\n\\n    /**\\n     * @dev Schedule an operation that is to becomes valid after a given delay.\\n     */\\n    function _schedule(bytes32 id, uint256 delay) private {\\n        require(!isOperation(id), \\\"TimelockController: operation already scheduled\\\");\\n        require(delay >= getMinDelay(), \\\"TimelockController: insufficient delay\\\");\\n        _timestamps[id] = block.timestamp + delay;\\n    }\\n\\n    /**\\n     * @dev Cancel an operation.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the 'canceller' role.\\n     */\\n    function cancel(bytes32 id) public virtual onlyRole(CANCELLER_ROLE) {\\n        require(isOperationPending(id), \\\"TimelockController: operation cannot be cancelled\\\");\\n        delete _timestamps[id];\\n\\n        emit Cancelled(id);\\n    }\\n\\n    /**\\n     * @dev Execute an (ready) operation containing a single transaction.\\n     *\\n     * Emits a {CallExecuted} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the 'executor' role.\\n     */\\n    // This function can reenter, but it doesn't pose a risk because _afterCall checks that the proposal is pending,\\n    // thus any modifications to the operation during reentrancy should be caught.\\n    // slither-disable-next-line reentrancy-eth\\n    function execute(\\n        address target,\\n        uint256 value,\\n        bytes calldata payload,\\n        bytes32 predecessor,\\n        bytes32 salt\\n    ) public payable virtual onlyRoleOrOpenRole(EXECUTOR_ROLE) {\\n        bytes32 id = hashOperation(target, value, payload, predecessor, salt);\\n\\n        _beforeCall(id, predecessor);\\n        _execute(target, value, payload);\\n        emit CallExecuted(id, 0, target, value, payload);\\n        _afterCall(id);\\n    }\\n\\n    /**\\n     * @dev Execute an (ready) operation containing a batch of transactions.\\n     *\\n     * Emits one {CallExecuted} event per transaction in the batch.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the 'executor' role.\\n     */\\n    // This function can reenter, but it doesn't pose a risk because _afterCall checks that the proposal is pending,\\n    // thus any modifications to the operation during reentrancy should be caught.\\n    // slither-disable-next-line reentrancy-eth\\n    function executeBatch(\\n        address[] calldata targets,\\n        uint256[] calldata values,\\n        bytes[] calldata payloads,\\n        bytes32 predecessor,\\n        bytes32 salt\\n    ) public payable virtual onlyRoleOrOpenRole(EXECUTOR_ROLE) {\\n        require(targets.length == values.length, \\\"TimelockController: length mismatch\\\");\\n        require(targets.length == payloads.length, \\\"TimelockController: length mismatch\\\");\\n\\n        bytes32 id = hashOperationBatch(targets, values, payloads, predecessor, salt);\\n\\n        _beforeCall(id, predecessor);\\n        for (uint256 i = 0; i < targets.length; ++i) {\\n            address target = targets[i];\\n            uint256 value = values[i];\\n            bytes calldata payload = payloads[i];\\n            _execute(target, value, payload);\\n            emit CallExecuted(id, i, target, value, payload);\\n        }\\n        _afterCall(id);\\n    }\\n\\n    /**\\n     * @dev Execute an operation's call.\\n     */\\n    function _execute(\\n        address target,\\n        uint256 value,\\n        bytes calldata data\\n    ) internal virtual {\\n        (bool success, ) = target.call{value: value}(data);\\n        require(success, \\\"TimelockController: underlying transaction reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Checks before execution of an operation's calls.\\n     */\\n    function _beforeCall(bytes32 id, bytes32 predecessor) private view {\\n        require(isOperationReady(id), \\\"TimelockController: operation is not ready\\\");\\n        require(predecessor == bytes32(0) || isOperationDone(predecessor), \\\"TimelockController: missing dependency\\\");\\n    }\\n\\n    /**\\n     * @dev Checks after execution of an operation's calls.\\n     */\\n    function _afterCall(bytes32 id) private {\\n        require(isOperationReady(id), \\\"TimelockController: operation is not ready\\\");\\n        _timestamps[id] = _DONE_TIMESTAMP;\\n    }\\n\\n    /**\\n     * @dev Changes the minimum timelock duration for future operations.\\n     *\\n     * Emits a {MinDelayChange} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the timelock itself. This can only be achieved by scheduling and later executing\\n     * an operation where the timelock is the target and the data is the ABI-encoded call to this function.\\n     */\\n    function updateDelay(uint256 newDelay) external virtual {\\n        require(msg.sender == address(this), \\\"TimelockController: caller must be timelock\\\");\\n        emit MinDelayChange(_minDelay, newDelay);\\n        _minDelay = newDelay;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155Receiver-onERC1155Received}.\\n     */\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155Receiver-onERC1155BatchReceived}.\\n     */\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[48] private __gap;\\n}\\n\",\"keccak256\":\"0x90aef154013190f8ebe5569323bd942b4eeeda4b55b09e795a9922d879490560\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/governance/extensions/IGovernorTimelockUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (governance/extensions/IGovernorTimelock.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IGovernorUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of the {IGovernor} for timelock supporting modules.\\n *\\n * _Available since v4.3._\\n */\\nabstract contract IGovernorTimelockUpgradeable is Initializable, IGovernorUpgradeable {\\n    function __IGovernorTimelock_init() internal onlyInitializing {\\n    }\\n\\n    function __IGovernorTimelock_init_unchained() internal onlyInitializing {\\n    }\\n    event ProposalQueued(uint256 proposalId, uint256 eta);\\n\\n    function timelock() public view virtual returns (address);\\n\\n    function proposalEta(uint256 proposalId) public view virtual returns (uint256);\\n\\n    function queue(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) public virtual returns (uint256 proposalId);\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xf490b5670f6ceca5a628d3d77854cd5c4c93ea3b5530b7fc5800ec45d441cb78\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/governance/utils/IVotesUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (governance/utils/IVotes.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Common interface for {ERC20Votes}, {ERC721Votes}, and other {Votes}-enabled contracts.\\n *\\n * _Available since v4.5._\\n */\\ninterface IVotesUpgradeable {\\n    /**\\n     * @dev Emitted when an account changes their delegate.\\n     */\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n    /**\\n     * @dev Emitted when a token transfer or delegate change results in changes to a delegate's number of votes.\\n     */\\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\\n\\n    /**\\n     * @dev Returns the current amount of votes that `account` has.\\n     */\\n    function getVotes(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of votes that `account` had at the end of a past block (`blockNumber`).\\n     */\\n    function getPastVotes(address account, uint256 blockNumber) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the total supply of votes available at the end of a past block (`blockNumber`).\\n     *\\n     * NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes.\\n     * Votes that have not been delegated are still part of total supply, even though they would not participate in a\\n     * vote.\\n     */\\n    function getPastTotalSupply(uint256 blockNumber) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the delegate that `account` has chosen.\\n     */\\n    function delegates(address account) external view returns (address);\\n\\n    /**\\n     * @dev Delegates votes from the sender to `delegatee`.\\n     */\\n    function delegate(address delegatee) external;\\n\\n    /**\\n     * @dev Delegates votes from signer to `delegatee`.\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0xe8e2d2f70db1913260634f710cc057d669b06eccf4dca27e18b79c3bbb101da6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xffcb29612efb57efc8f0d4897deb5abaeac830022c59a3aa17446d698dbc856b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CheckpointsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (utils/Checkpoints.sol)\\n// This file was procedurally generated from scripts/generate/templates/Checkpoints.js.\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SafeCastUpgradeable.sol\\\";\\n\\n/**\\n * @dev This library defines the `History` struct, for checkpointing values as they change at different points in\\n * time, and later looking up past values by block number. See {Votes} as an example.\\n *\\n * To create a history of checkpoints define a variable type `Checkpoints.History` in your contract, and store a new\\n * checkpoint for the current transaction block using the {push} function.\\n *\\n * _Available since v4.5._\\n */\\nlibrary CheckpointsUpgradeable {\\n    struct History {\\n        Checkpoint[] _checkpoints;\\n    }\\n\\n    struct Checkpoint {\\n        uint32 _blockNumber;\\n        uint224 _value;\\n    }\\n\\n    /**\\n     * @dev Returns the value at a given block number. If a checkpoint is not available at that block, the closest one\\n     * before it is returned, or zero otherwise. Because the number returned corresponds to that at the end of the\\n     * block, the requested block number must be in the past, excluding the current block.\\n     */\\n    function getAtBlock(History storage self, uint256 blockNumber) internal view returns (uint256) {\\n        require(blockNumber < block.number, \\\"Checkpoints: block not yet mined\\\");\\n        uint32 key = SafeCastUpgradeable.toUint32(blockNumber);\\n\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value at a given block number. If a checkpoint is not available at that block, the closest one\\n     * before it is returned, or zero otherwise. Similar to {upperLookup} but optimized for the case when the searched\\n     * checkpoint is probably \\\"recent\\\", defined as being among the last sqrt(N) checkpoints where N is the number of\\n     * checkpoints.\\n     */\\n    function getAtProbablyRecentBlock(History storage self, uint256 blockNumber) internal view returns (uint256) {\\n        require(blockNumber < block.number, \\\"Checkpoints: block not yet mined\\\");\\n        uint32 key = SafeCastUpgradeable.toUint32(blockNumber);\\n\\n        uint256 len = self._checkpoints.length;\\n\\n        uint256 low = 0;\\n        uint256 high = len;\\n\\n        if (len > 5) {\\n            uint256 mid = len - MathUpgradeable.sqrt(len);\\n            if (key < _unsafeAccess(self._checkpoints, mid)._blockNumber) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, low, high);\\n\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Pushes a value onto a History so that it is stored as the checkpoint for the current block.\\n     *\\n     * Returns previous value and new value.\\n     */\\n    function push(History storage self, uint256 value) internal returns (uint256, uint256) {\\n        return _insert(self._checkpoints, SafeCastUpgradeable.toUint32(block.number), SafeCastUpgradeable.toUint224(value));\\n    }\\n\\n    /**\\n     * @dev Pushes a value onto a History, by updating the latest value using binary operation `op`. The new value will\\n     * be set to `op(latest, delta)`.\\n     *\\n     * Returns previous value and new value.\\n     */\\n    function push(\\n        History storage self,\\n        function(uint256, uint256) view returns (uint256) op,\\n        uint256 delta\\n    ) internal returns (uint256, uint256) {\\n        return push(self, op(latest(self), delta));\\n    }\\n\\n    /**\\n     * @dev Returns the value in the most recent checkpoint, or zero if there are no checkpoints.\\n     */\\n    function latest(History storage self) internal view returns (uint224) {\\n        uint256 pos = self._checkpoints.length;\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns whether there is a checkpoint in the structure (i.e. it is not empty), and if so the key and value\\n     * in the most recent checkpoint.\\n     */\\n    function latestCheckpoint(History storage self)\\n        internal\\n        view\\n        returns (\\n            bool exists,\\n            uint32 _blockNumber,\\n            uint224 _value\\n        )\\n    {\\n        uint256 pos = self._checkpoints.length;\\n        if (pos == 0) {\\n            return (false, 0, 0);\\n        } else {\\n            Checkpoint memory ckpt = _unsafeAccess(self._checkpoints, pos - 1);\\n            return (true, ckpt._blockNumber, ckpt._value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the number of checkpoint.\\n     */\\n    function length(History storage self) internal view returns (uint256) {\\n        return self._checkpoints.length;\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into an ordered list of checkpoints, either by inserting a new checkpoint,\\n     * or by updating the last one.\\n     */\\n    function _insert(\\n        Checkpoint[] storage self,\\n        uint32 key,\\n        uint224 value\\n    ) private returns (uint224, uint224) {\\n        uint256 pos = self.length;\\n\\n        if (pos > 0) {\\n            // Copying to memory is important here.\\n            Checkpoint memory last = _unsafeAccess(self, pos - 1);\\n\\n            // Checkpoints keys must be increasing.\\n            require(last._blockNumber <= key, \\\"Checkpoint: invalid key\\\");\\n\\n            // Update or push new checkpoint\\n            if (last._blockNumber == key) {\\n                _unsafeAccess(self, pos - 1)._value = value;\\n            } else {\\n                self.push(Checkpoint({_blockNumber: key, _value: value}));\\n            }\\n            return (last._value, value);\\n        } else {\\n            self.push(Checkpoint({_blockNumber: key, _value: value}));\\n            return (0, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the index of the oldest checkpoint whose key is greater than the search key, or `high` if there is none.\\n     * `low` and `high` define a section where to do the search, with inclusive `low` and exclusive `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _upperBinaryLookup(\\n        Checkpoint[] storage self,\\n        uint32 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = MathUpgradeable.average(low, high);\\n            if (_unsafeAccess(self, mid)._blockNumber > key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Return the index of the oldest checkpoint whose key is greater or equal than the search key, or `high` if there is none.\\n     * `low` and `high` define a section where to do the search, with inclusive `low` and exclusive `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _lowerBinaryLookup(\\n        Checkpoint[] storage self,\\n        uint32 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = MathUpgradeable.average(low, high);\\n            if (_unsafeAccess(self, mid)._blockNumber < key) {\\n                low = mid + 1;\\n            } else {\\n                high = mid;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\\n     */\\n    function _unsafeAccess(Checkpoint[] storage self, uint256 pos) private pure returns (Checkpoint storage result) {\\n        assembly {\\n            mstore(0, self.slot)\\n            result.slot := add(keccak256(0, 0x20), pos)\\n        }\\n    }\\n\\n    struct Trace224 {\\n        Checkpoint224[] _checkpoints;\\n    }\\n\\n    struct Checkpoint224 {\\n        uint32 _key;\\n        uint224 _value;\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into a Trace224 so that it is stored as the checkpoint.\\n     *\\n     * Returns previous value and new value.\\n     */\\n    function push(\\n        Trace224 storage self,\\n        uint32 key,\\n        uint224 value\\n    ) internal returns (uint224, uint224) {\\n        return _insert(self._checkpoints, key, value);\\n    }\\n\\n    /**\\n     * @dev Returns the value in the oldest checkpoint with key greater or equal than the search key, or zero if there is none.\\n     */\\n    function lowerLookup(Trace224 storage self, uint32 key) internal view returns (uint224) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _lowerBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == len ? 0 : _unsafeAccess(self._checkpoints, pos)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the most recent checkpoint with key lower or equal than the search key.\\n     */\\n    function upperLookup(Trace224 storage self, uint32 key) internal view returns (uint224) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the most recent checkpoint, or zero if there are no checkpoints.\\n     */\\n    function latest(Trace224 storage self) internal view returns (uint224) {\\n        uint256 pos = self._checkpoints.length;\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns whether there is a checkpoint in the structure (i.e. it is not empty), and if so the key and value\\n     * in the most recent checkpoint.\\n     */\\n    function latestCheckpoint(Trace224 storage self)\\n        internal\\n        view\\n        returns (\\n            bool exists,\\n            uint32 _key,\\n            uint224 _value\\n        )\\n    {\\n        uint256 pos = self._checkpoints.length;\\n        if (pos == 0) {\\n            return (false, 0, 0);\\n        } else {\\n            Checkpoint224 memory ckpt = _unsafeAccess(self._checkpoints, pos - 1);\\n            return (true, ckpt._key, ckpt._value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the number of checkpoint.\\n     */\\n    function length(Trace224 storage self) internal view returns (uint256) {\\n        return self._checkpoints.length;\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into an ordered list of checkpoints, either by inserting a new checkpoint,\\n     * or by updating the last one.\\n     */\\n    function _insert(\\n        Checkpoint224[] storage self,\\n        uint32 key,\\n        uint224 value\\n    ) private returns (uint224, uint224) {\\n        uint256 pos = self.length;\\n\\n        if (pos > 0) {\\n            // Copying to memory is important here.\\n            Checkpoint224 memory last = _unsafeAccess(self, pos - 1);\\n\\n            // Checkpoints keys must be increasing.\\n            require(last._key <= key, \\\"Checkpoint: invalid key\\\");\\n\\n            // Update or push new checkpoint\\n            if (last._key == key) {\\n                _unsafeAccess(self, pos - 1)._value = value;\\n            } else {\\n                self.push(Checkpoint224({_key: key, _value: value}));\\n            }\\n            return (last._value, value);\\n        } else {\\n            self.push(Checkpoint224({_key: key, _value: value}));\\n            return (0, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the index of the oldest checkpoint whose key is greater than the search key, or `high` if there is none.\\n     * `low` and `high` define a section where to do the search, with inclusive `low` and exclusive `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _upperBinaryLookup(\\n        Checkpoint224[] storage self,\\n        uint32 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = MathUpgradeable.average(low, high);\\n            if (_unsafeAccess(self, mid)._key > key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Return the index of the oldest checkpoint whose key is greater or equal than the search key, or `high` if there is none.\\n     * `low` and `high` define a section where to do the search, with inclusive `low` and exclusive `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _lowerBinaryLookup(\\n        Checkpoint224[] storage self,\\n        uint32 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = MathUpgradeable.average(low, high);\\n            if (_unsafeAccess(self, mid)._key < key) {\\n                low = mid + 1;\\n            } else {\\n                high = mid;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\\n     */\\n    function _unsafeAccess(Checkpoint224[] storage self, uint256 pos)\\n        private\\n        pure\\n        returns (Checkpoint224 storage result)\\n    {\\n        assembly {\\n            mstore(0, self.slot)\\n            result.slot := add(keccak256(0, 0x20), pos)\\n        }\\n    }\\n\\n    struct Trace160 {\\n        Checkpoint160[] _checkpoints;\\n    }\\n\\n    struct Checkpoint160 {\\n        uint96 _key;\\n        uint160 _value;\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into a Trace160 so that it is stored as the checkpoint.\\n     *\\n     * Returns previous value and new value.\\n     */\\n    function push(\\n        Trace160 storage self,\\n        uint96 key,\\n        uint160 value\\n    ) internal returns (uint160, uint160) {\\n        return _insert(self._checkpoints, key, value);\\n    }\\n\\n    /**\\n     * @dev Returns the value in the oldest checkpoint with key greater or equal than the search key, or zero if there is none.\\n     */\\n    function lowerLookup(Trace160 storage self, uint96 key) internal view returns (uint160) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _lowerBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == len ? 0 : _unsafeAccess(self._checkpoints, pos)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the most recent checkpoint with key lower or equal than the search key.\\n     */\\n    function upperLookup(Trace160 storage self, uint96 key) internal view returns (uint160) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the most recent checkpoint, or zero if there are no checkpoints.\\n     */\\n    function latest(Trace160 storage self) internal view returns (uint160) {\\n        uint256 pos = self._checkpoints.length;\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns whether there is a checkpoint in the structure (i.e. it is not empty), and if so the key and value\\n     * in the most recent checkpoint.\\n     */\\n    function latestCheckpoint(Trace160 storage self)\\n        internal\\n        view\\n        returns (\\n            bool exists,\\n            uint96 _key,\\n            uint160 _value\\n        )\\n    {\\n        uint256 pos = self._checkpoints.length;\\n        if (pos == 0) {\\n            return (false, 0, 0);\\n        } else {\\n            Checkpoint160 memory ckpt = _unsafeAccess(self._checkpoints, pos - 1);\\n            return (true, ckpt._key, ckpt._value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the number of checkpoint.\\n     */\\n    function length(Trace160 storage self) internal view returns (uint256) {\\n        return self._checkpoints.length;\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into an ordered list of checkpoints, either by inserting a new checkpoint,\\n     * or by updating the last one.\\n     */\\n    function _insert(\\n        Checkpoint160[] storage self,\\n        uint96 key,\\n        uint160 value\\n    ) private returns (uint160, uint160) {\\n        uint256 pos = self.length;\\n\\n        if (pos > 0) {\\n            // Copying to memory is important here.\\n            Checkpoint160 memory last = _unsafeAccess(self, pos - 1);\\n\\n            // Checkpoints keys must be increasing.\\n            require(last._key <= key, \\\"Checkpoint: invalid key\\\");\\n\\n            // Update or push new checkpoint\\n            if (last._key == key) {\\n                _unsafeAccess(self, pos - 1)._value = value;\\n            } else {\\n                self.push(Checkpoint160({_key: key, _value: value}));\\n            }\\n            return (last._value, value);\\n        } else {\\n            self.push(Checkpoint160({_key: key, _value: value}));\\n            return (0, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the index of the oldest checkpoint whose key is greater than the search key, or `high` if there is none.\\n     * `low` and `high` define a section where to do the search, with inclusive `low` and exclusive `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _upperBinaryLookup(\\n        Checkpoint160[] storage self,\\n        uint96 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = MathUpgradeable.average(low, high);\\n            if (_unsafeAccess(self, mid)._key > key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Return the index of the oldest checkpoint whose key is greater or equal than the search key, or `high` if there is none.\\n     * `low` and `high` define a section where to do the search, with inclusive `low` and exclusive `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _lowerBinaryLookup(\\n        Checkpoint160[] storage self,\\n        uint96 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = MathUpgradeable.average(low, high);\\n            if (_unsafeAccess(self, mid)._key < key) {\\n                low = mid + 1;\\n            } else {\\n                high = mid;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\\n     */\\n    function _unsafeAccess(Checkpoint160[] storage self, uint256 pos)\\n        private\\n        pure\\n        returns (Checkpoint160 storage result)\\n    {\\n        assembly {\\n            mstore(0, self.slot)\\n            result.slot := add(keccak256(0, 0x20), pos)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x92fe8e1836627ba1baa62a2d4bd76c52ccfe53fec6650b609af33918be967a82\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/TimersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Timers.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Tooling for timepoints, timers and delays\\n */\\nlibrary TimersUpgradeable {\\n    struct Timestamp {\\n        uint64 _deadline;\\n    }\\n\\n    function getDeadline(Timestamp memory timer) internal pure returns (uint64) {\\n        return timer._deadline;\\n    }\\n\\n    function setDeadline(Timestamp storage timer, uint64 timestamp) internal {\\n        timer._deadline = timestamp;\\n    }\\n\\n    function reset(Timestamp storage timer) internal {\\n        timer._deadline = 0;\\n    }\\n\\n    function isUnset(Timestamp memory timer) internal pure returns (bool) {\\n        return timer._deadline == 0;\\n    }\\n\\n    function isStarted(Timestamp memory timer) internal pure returns (bool) {\\n        return timer._deadline > 0;\\n    }\\n\\n    function isPending(Timestamp memory timer) internal view returns (bool) {\\n        return timer._deadline > block.timestamp;\\n    }\\n\\n    function isExpired(Timestamp memory timer) internal view returns (bool) {\\n        return isStarted(timer) && timer._deadline <= block.timestamp;\\n    }\\n\\n    struct BlockNumber {\\n        uint64 _deadline;\\n    }\\n\\n    function getDeadline(BlockNumber memory timer) internal pure returns (uint64) {\\n        return timer._deadline;\\n    }\\n\\n    function setDeadline(BlockNumber storage timer, uint64 timestamp) internal {\\n        timer._deadline = timestamp;\\n    }\\n\\n    function reset(BlockNumber storage timer) internal {\\n        timer._deadline = 0;\\n    }\\n\\n    function isUnset(BlockNumber memory timer) internal pure returns (bool) {\\n        return timer._deadline == 0;\\n    }\\n\\n    function isStarted(BlockNumber memory timer) internal pure returns (bool) {\\n        return timer._deadline > 0;\\n    }\\n\\n    function isPending(BlockNumber memory timer) internal view returns (bool) {\\n        return timer._deadline > block.number;\\n    }\\n\\n    function isExpired(BlockNumber memory timer) internal view returns (bool) {\\n        return isStarted(timer) && timer._deadline <= block.number;\\n    }\\n}\\n\",\"keccak256\":\"0xb5dac0ce830eea037a65d37b83863f6a265668a37893b1ac4c01b77c7cf68e9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x12f297cafe6e2847ae0378502f155654d0764b532a9873c8afe4350950fa7971\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n *\\n * @custom:storage-size 52\\n */\\nabstract contract EIP712Upgradeable is Initializable {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private _HASHED_NAME;\\n    bytes32 private _HASHED_VERSION;\\n    bytes32 private constant _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\\n        return _HASHED_NAME;\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\\n        return _HASHED_VERSION;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x3017aded62c4a2b9707f5f06f92934e592c1c9b6f384b91b51340a6d5f841931\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCastUpgradeable {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xcef50f95b43b038aa40aed25b62fc45906c681a5c1d504a4fdcf3bc6330a8d4b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/DoubleEndedQueueUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/structs/DoubleEndedQueue.sol)\\npragma solidity ^0.8.4;\\n\\nimport \\\"../math/SafeCastUpgradeable.sol\\\";\\n\\n/**\\n * @dev A sequence of items with the ability to efficiently push and pop items (i.e. insert and remove) on both ends of\\n * the sequence (called front and back). Among other access patterns, it can be used to implement efficient LIFO and\\n * FIFO queues. Storage use is optimized, and all operations are O(1) constant time. This includes {clear}, given that\\n * the existing queue contents are left in storage.\\n *\\n * The struct is called `Bytes32Deque`. Other types can be cast to and from `bytes32`. This data structure can only be\\n * used in storage, and not in memory.\\n * ```\\n * DoubleEndedQueue.Bytes32Deque queue;\\n * ```\\n *\\n * _Available since v4.6._\\n */\\nlibrary DoubleEndedQueueUpgradeable {\\n    /**\\n     * @dev An operation (e.g. {front}) couldn't be completed due to the queue being empty.\\n     */\\n    error Empty();\\n\\n    /**\\n     * @dev An operation (e.g. {at}) couldn't be completed due to an index being out of bounds.\\n     */\\n    error OutOfBounds();\\n\\n    /**\\n     * @dev Indices are signed integers because the queue can grow in any direction. They are 128 bits so begin and end\\n     * are packed in a single storage slot for efficient access. Since the items are added one at a time we can safely\\n     * assume that these 128-bit indices will not overflow, and use unchecked arithmetic.\\n     *\\n     * Struct members have an underscore prefix indicating that they are \\\"private\\\" and should not be read or written to\\n     * directly. Use the functions provided below instead. Modifying the struct manually may violate assumptions and\\n     * lead to unexpected behavior.\\n     *\\n     * Indices are in the range [begin, end) which means the first item is at data[begin] and the last item is at\\n     * data[end - 1].\\n     */\\n    struct Bytes32Deque {\\n        int128 _begin;\\n        int128 _end;\\n        mapping(int128 => bytes32) _data;\\n    }\\n\\n    /**\\n     * @dev Inserts an item at the end of the queue.\\n     */\\n    function pushBack(Bytes32Deque storage deque, bytes32 value) internal {\\n        int128 backIndex = deque._end;\\n        deque._data[backIndex] = value;\\n        unchecked {\\n            deque._end = backIndex + 1;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes the item at the end of the queue and returns it.\\n     *\\n     * Reverts with `Empty` if the queue is empty.\\n     */\\n    function popBack(Bytes32Deque storage deque) internal returns (bytes32 value) {\\n        if (empty(deque)) revert Empty();\\n        int128 backIndex;\\n        unchecked {\\n            backIndex = deque._end - 1;\\n        }\\n        value = deque._data[backIndex];\\n        delete deque._data[backIndex];\\n        deque._end = backIndex;\\n    }\\n\\n    /**\\n     * @dev Inserts an item at the beginning of the queue.\\n     */\\n    function pushFront(Bytes32Deque storage deque, bytes32 value) internal {\\n        int128 frontIndex;\\n        unchecked {\\n            frontIndex = deque._begin - 1;\\n        }\\n        deque._data[frontIndex] = value;\\n        deque._begin = frontIndex;\\n    }\\n\\n    /**\\n     * @dev Removes the item at the beginning of the queue and returns it.\\n     *\\n     * Reverts with `Empty` if the queue is empty.\\n     */\\n    function popFront(Bytes32Deque storage deque) internal returns (bytes32 value) {\\n        if (empty(deque)) revert Empty();\\n        int128 frontIndex = deque._begin;\\n        value = deque._data[frontIndex];\\n        delete deque._data[frontIndex];\\n        unchecked {\\n            deque._begin = frontIndex + 1;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the item at the beginning of the queue.\\n     *\\n     * Reverts with `Empty` if the queue is empty.\\n     */\\n    function front(Bytes32Deque storage deque) internal view returns (bytes32 value) {\\n        if (empty(deque)) revert Empty();\\n        int128 frontIndex = deque._begin;\\n        return deque._data[frontIndex];\\n    }\\n\\n    /**\\n     * @dev Returns the item at the end of the queue.\\n     *\\n     * Reverts with `Empty` if the queue is empty.\\n     */\\n    function back(Bytes32Deque storage deque) internal view returns (bytes32 value) {\\n        if (empty(deque)) revert Empty();\\n        int128 backIndex;\\n        unchecked {\\n            backIndex = deque._end - 1;\\n        }\\n        return deque._data[backIndex];\\n    }\\n\\n    /**\\n     * @dev Return the item at a position in the queue given by `index`, with the first item at 0 and last item at\\n     * `length(deque) - 1`.\\n     *\\n     * Reverts with `OutOfBounds` if the index is out of bounds.\\n     */\\n    function at(Bytes32Deque storage deque, uint256 index) internal view returns (bytes32 value) {\\n        // int256(deque._begin) is a safe upcast\\n        int128 idx = SafeCastUpgradeable.toInt128(int256(deque._begin) + SafeCastUpgradeable.toInt256(index));\\n        if (idx >= deque._end) revert OutOfBounds();\\n        return deque._data[idx];\\n    }\\n\\n    /**\\n     * @dev Resets the queue back to being empty.\\n     *\\n     * NOTE: The current items are left behind in storage. This does not affect the functioning of the queue, but misses\\n     * out on potential gas refunds.\\n     */\\n    function clear(Bytes32Deque storage deque) internal {\\n        deque._begin = 0;\\n        deque._end = 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of items in the queue.\\n     */\\n    function length(Bytes32Deque storage deque) internal view returns (uint256) {\\n        // The interface preserves the invariant that begin <= end so we assume this will not overflow.\\n        // We also assume there are at most int256.max items in the queue.\\n        unchecked {\\n            return uint256(int256(deque._end) - int256(deque._begin));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the queue is empty.\\n     */\\n    function empty(Bytes32Deque storage deque) internal view returns (bool) {\\n        return deque._end <= deque._begin;\\n    }\\n}\\n\",\"keccak256\":\"0xbe229da2ffa728d587ff64e42f4fcc2e83482d04e18374c8c00b685ed015a3e7\",\"license\":\"MIT\"},\"contracts/DAO.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/TimersUpgradeable.sol\\\";\\n\\nimport \\\"./governor/GovernorUpgradeable.sol\\\";\\nimport \\\"./governor/GovernorVotesUpgradeable.sol\\\";\\nimport \\\"./governor/GovernorCountingSimpleUpgradeable.sol\\\";\\nimport \\\"./governor/GovernorVotesQuorumFractionUpgradeable.sol\\\";\\nimport \\\"./governor/GovernorTimelockControlUpgradeable.sol\\\";\\n\\nimport \\\"./Membership.sol\\\";\\n\\ncontract DAO is\\n    Initializable,\\n    GovernorUpgradeable,\\n    GovernorVotesUpgradeable,\\n    GovernorCountingSimpleUpgradeable,\\n    GovernorVotesQuorumFractionUpgradeable,\\n    GovernorTimelockControlUpgradeable\\n{\\n    Membership private _membershipContract;\\n\\n    using SafeCastUpgradeable for uint256;\\n    using TimersUpgradeable for TimersUpgradeable.BlockNumber;\\n\\n    event ProposalVotingTimeChanged(\\n        uint256 proposalId,\\n        uint64 oldTime,\\n        uint64 newTime\\n    );\\n\\n    event VotingSlotCancelled(uint256 blockNumber, string reason);\\n\\n    string public bylawsHash;\\n    bool private _foundingSetupDone;\\n    uint256 public extraordinaryVoteQuorumNominator;\\n    uint256 public associationDissolutionQuorumNominator;\\n    uint256 public votingSlotAnnouncementPeriod;\\n    string public bylawsUrl;\\n\\n    event BylawsChanged(\\n        string indexed newBylawsUrl,\\n        string indexed newBylawsHash\\n    );\\n\\n    function initialize(\\n        Membership _membership,\\n        TimelockControllerUpgradeable _timelock,\\n        string memory bylawsHash,\\n        string memory bylawsUrl\\n    ) public initializer {\\n        _membershipContract = Membership(_membership);\\n        _foundingSetupDone = false;\\n\\n        extraOrdinaryAssemblyVotingPeriod = 50400;\\n        extraordinaryVoteQuorumNominator = 20;\\n        associationDissolutionQuorumNominator = 20;\\n        votingSlotAnnouncementPeriod = 201600;\\n\\n        governorInit(\\\"FlatFeeStack\\\");\\n        governorVotesInit(_membership);\\n        governorCountingSimpleInit();\\n        governorVotesQuorumFractionInit(5);\\n        governorTimelockControlInit(_timelock);\\n        setupDAOFoundingSlotAndProposal(bylawsHash, bylawsUrl);\\n    }\\n\\n    function votingDelay() public pure override returns (uint256) {\\n        return 0;\\n        // Votes get assigned to slots, so delay is differs every time\\n    }\\n\\n    function votingPeriod() public pure override returns (uint256) {\\n        return 7200;\\n        // 1 day in blocks\\n    }\\n\\n    function proposalThreshold() public pure override returns (uint256) {\\n        return 1;\\n    }\\n\\n    function quorum(\\n        uint256 blockNumber\\n    )\\n        public\\n        view\\n        override(IGovernorUpgradeable, GovernorVotesQuorumFractionUpgradeable)\\n        returns (uint256)\\n    {\\n        return super.quorum(blockNumber);\\n    }\\n\\n    function getVotes(\\n        address account,\\n        uint256 blockNumber\\n    )\\n        public\\n        view\\n        override(GovernorUpgradeable, IGovernorUpgradeable)\\n        returns (uint256)\\n    {\\n        return super.getVotes(account, blockNumber);\\n    }\\n\\n    function state(\\n        uint256 proposalId\\n    )\\n        public\\n        view\\n        override(GovernorUpgradeable, GovernorTimelockControlUpgradeable)\\n        returns (ProposalState)\\n    {\\n        return super.state(proposalId);\\n    }\\n\\n    function propose(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        string memory description\\n    )\\n        public\\n        override(GovernorUpgradeable, IGovernorUpgradeable)\\n        returns (uint256)\\n    {\\n        require(daoActive, \\\"The DAO is not active\\\");\\n        return super.propose(targets, values, calldatas, description);\\n    }\\n\\n    function _execute(\\n        uint256 proposalId,\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    )\\n        internal\\n        override(GovernorUpgradeable, GovernorTimelockControlUpgradeable)\\n    {\\n        require(daoActive, \\\"The DAO is not active\\\");\\n        super._execute(proposalId, targets, values, calldatas, descriptionHash);\\n    }\\n\\n    function _cancel(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    )\\n        internal\\n        override(GovernorUpgradeable, GovernorTimelockControlUpgradeable)\\n        returns (uint256)\\n    {\\n        return super._cancel(targets, values, calldatas, descriptionHash);\\n    }\\n\\n    function _executor()\\n        internal\\n        view\\n        override(GovernorUpgradeable, GovernorTimelockControlUpgradeable)\\n        returns (address)\\n    {\\n        return super._executor();\\n    }\\n\\n    // Sets a new voting slot\\n    // the voting slot has to be four weeks from now\\n    // it is calculated in blocks and we assume that 7200 blocks will be mined in a day\\n    function setVotingSlot(uint256 blockNumber) public returns (uint256) {\\n        require(daoActive, \\\"The DAO is not active\\\");\\n        require(\\n            _membershipContract.isCouncilMember(msg.sender) ||\\n                _msgSender() == _executor(),\\n            \\\"only council member or governor\\\"\\n        );\\n\\n        require(\\n            blockNumber >= block.number + votingSlotAnnouncementPeriod,\\n            \\\"Announcement too late!\\\"\\n        );\\n\\n        uint256 previousMaxIndex = slots.length - 1;\\n\\n        for (uint256 i = previousMaxIndex; i >= 0; i--) {\\n            if (slots[i] == blockNumber) {\\n                revert(\\\"Vote slot already exists\\\");\\n            }\\n\\n            if (i == 0) {\\n                // prevent underflow\\n                break;\\n            }\\n        }\\n\\n        uint256 targetIndex = 0;\\n        for (uint256 i = previousMaxIndex; i >= 0; i--) {\\n            if (slots[i] < blockNumber) {\\n                targetIndex = i + 1;\\n                break;\\n            }\\n\\n            if (i == 0) {\\n                // prevent underflow\\n                break;\\n            }\\n        }\\n\\n        slots.push(blockNumber);\\n        if (targetIndex < slots.length - 1) {\\n            for (uint256 i = previousMaxIndex; i >= targetIndex; i--) {\\n                slots[i + 1] = slots[i];\\n\\n                if (i == 0) {\\n                    // prevent underflow\\n                    break;\\n                }\\n            }\\n        }\\n\\n        slots[targetIndex] = blockNumber;\\n\\n        emit NewTimeslotSet(blockNumber);\\n        return blockNumber;\\n    }\\n\\n    function cancelVotingSlot(\\n        uint256 blockNumber,\\n        string calldata reason\\n    ) public {\\n        require(daoActive, \\\"The DAO is not active\\\");\\n        require(\\n            _membershipContract.isCouncilMember(msg.sender),\\n            \\\"only council member\\\"\\n        );\\n        require(\\n            blockNumber >= block.number + 7200,\\n            \\\"Must be a day before slot!\\\"\\n        );\\n\\n        uint256 index;\\n        bool slotExists = false;\\n\\n        for (index = 0; index < slots.length; index++) {\\n            if (slots[index] == blockNumber) {\\n                slotExists = true;\\n                break;\\n            }\\n        }\\n\\n        if (!slotExists) {\\n            revert(\\\"Voting slot does not exist!\\\");\\n        }\\n\\n        for (uint256 i = index; i < slots.length - 1; i++) {\\n            slots[i] = slots[i + 1];\\n        }\\n        slots.pop();\\n\\n        uint256[] memory proposalIds = votingSlots[blockNumber];\\n\\n        delete votingSlots[blockNumber];\\n        uint256 nextSlot = _getNextPossibleVotingSlot();\\n\\n        for (uint256 j = 0; j < proposalIds.length; j++) {\\n            ProposalCore storage proposal = _proposals[proposalIds[j]];\\n\\n            uint64 oldStart = proposal.voteStart.getDeadline();\\n            uint64 start = nextSlot.toUint64();\\n            uint64 end = start + votingPeriod().toUint64();\\n\\n            proposal.voteStart.setDeadline(start);\\n            proposal.voteEnd.setDeadline(end);\\n\\n            votingSlots[nextSlot].push(proposalIds[j]);\\n\\n            emit ProposalVotingTimeChanged(\\n                proposalIds[j],\\n                oldStart,\\n                proposal.voteStart.getDeadline()\\n            );\\n        }\\n\\n        emit VotingSlotCancelled(blockNumber, reason);\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    )\\n        public\\n        view\\n        override(GovernorUpgradeable, GovernorTimelockControlUpgradeable)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    function setNewBylaws(\\n        string memory newBylawsHash,\\n        string memory newBylawsUrl\\n    ) external onlyGovernance {\\n        bylawsHash = newBylawsHash;\\n        bylawsUrl = newBylawsUrl;\\n\\n        emit BylawsChanged(bylawsUrl, bylawsHash);\\n    }\\n\\n    function setupDAOFoundingSlotAndProposal(\\n        string memory newBylawsHash,\\n        string memory newBylawsUrl\\n    ) internal {\\n        require(_foundingSetupDone == false, \\\"already done\\\");\\n\\n        // Create slot\\n        uint256 slotBlockNumber = block.number + slotCloseTime + 1;\\n        // First slot is in a week\\n        slots.push(slotBlockNumber);\\n        emit NewTimeslotSet(slotBlockNumber);\\n\\n        // CreateProposal\\n        bytes memory calldatas = abi.encodeCall(\\n            DAO.setNewBylaws,\\n            (newBylawsHash, newBylawsUrl)\\n        );\\n        string memory description = \\\"Founding Proposal. Set initial bylaws.\\\";\\n        address[] memory targets = new address[](1);\\n        targets[0] = address(this);\\n\\n        uint256[] memory values = new uint256[](1);\\n        values[0] = 0;\\n\\n        bytes[] memory calldatasArray = new bytes[](1);\\n        calldatasArray[0] = calldatas;\\n\\n        uint256 proposalId = hashProposal(\\n            targets,\\n            values,\\n            calldatasArray,\\n            keccak256(bytes(description))\\n        );\\n\\n        ProposalCore storage proposal = _buildProposal(\\n            proposalId,\\n            calldatasArray\\n        );\\n\\n        emit ProposalCreated(\\n            proposalId,\\n            _msgSender(),\\n            targets,\\n            values,\\n            new string[](targets.length),\\n            calldatasArray,\\n            proposal.voteStart._deadline,\\n            proposal.voteEnd._deadline,\\n            description\\n        );\\n\\n        emit DAOProposalCreated(\\n            proposalId,\\n            _msgSender(),\\n            targets,\\n            values,\\n            new string[](targets.length),\\n            calldatasArray,\\n            proposal.voteStart._deadline,\\n            proposal.voteEnd._deadline,\\n            description,\\n            proposal.category\\n        );\\n\\n        _foundingSetupDone = true;\\n    }\\n\\n    function setSlotCloseTime(\\n        uint256 newSlotCloseTime\\n    ) external onlyGovernance {\\n        slotCloseTime = newSlotCloseTime;\\n    }\\n\\n    function setExtraOrdinaryAssemblyVotingPeriod(\\n        uint64 newExtraOrdinaryAssemblyVotingPeriod\\n    ) external onlyGovernance {\\n        extraOrdinaryAssemblyVotingPeriod = newExtraOrdinaryAssemblyVotingPeriod;\\n    }\\n\\n    // this overs the case that an extraordinary vote needs 20% of all members to participate\\n    function _quorumReached(\\n        uint256 proposalId\\n    )\\n        internal\\n        view\\n        virtual\\n        override(GovernorCountingSimpleUpgradeable, GovernorUpgradeable)\\n        returns (bool)\\n    {\\n        ProposalCategory proposalCategory = _proposals[proposalId].category;\\n        if (proposalCategory == ProposalCategory.Generic) {\\n            return super._quorumReached(proposalId);\\n        }\\n\\n        ProposalVote storage proposalVote = _proposalVotes[proposalId];\\n\\n        uint256 voteStart = proposalSnapshot(proposalId);\\n        uint256 quorumNominator = 0;\\n        if (proposalCategory == ProposalCategory.ExtraordinaryVote) {\\n            quorumNominator = extraordinaryVoteQuorumNominator;\\n        } else if (\\n            proposalCategory == ProposalCategory.AssociationDissolution\\n        ) {\\n            quorumNominator = associationDissolutionQuorumNominator;\\n        } else {\\n            revert(\\\"Not implemented proposal quorum\\\");\\n        }\\n        uint256 neededQuorum = (token.getPastTotalSupply(voteStart) *\\n            quorumNominator) / quorumDenominator();\\n        return\\n            neededQuorum <= proposalVote.forVotes + proposalVote.abstainVotes;\\n    }\\n\\n    function getMinDelay() public view virtual returns (uint256 duration) {\\n        return _timelock.getMinDelay();\\n    }\\n\\n    function setVotingSlotAnnouncementPeriod(\\n        uint64 newVotingSlotAnnouncementPeriod\\n    ) external onlyGovernance {\\n        votingSlotAnnouncementPeriod = newVotingSlotAnnouncementPeriod;\\n    }\\n\\n    function dissolveDAO() public onlyGovernance {\\n        daoActive = false;\\n    }\\n\\n    function setExtraordinaryVoteQuorumNominator(\\n        uint256 newValue\\n    ) public onlyGovernance {\\n        require(newValue <= 20, \\\"mustt be less than 20\\\");\\n        extraordinaryVoteQuorumNominator = newValue;\\n    }\\n\\n    function setAssociationDissolutionQuorumNominator(\\n        uint256 newValue\\n    ) public onlyGovernance {\\n        require(newValue <= 100, \\\"must be less than 100\\\");\\n        associationDissolutionQuorumNominator = newValue;\\n    }\\n}\\n\",\"keccak256\":\"0x77089bd5e8627f7594f8e1f79017c3097a7e34057905a845e9d7df5642235ddb\",\"license\":\"UNLICENSED\"},\"contracts/Membership.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"./Wallet.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/CheckpointsUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/governance/utils/IVotesUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\n// we rely on time to track membership payments\\n// however, we don't care about second-level precision, as we deal with a much longer time period\\n// there is a good exaplanation about this on StackExchange https://ethereum.stackexchange.com/a/117874\\n/* solhint-disable not-rely-on-time */\\ncontract Membership is Initializable, IVotesUpgradeable, OwnableUpgradeable {\\n    using CheckpointsUpgradeable for CheckpointsUpgradeable.History;\\n\\n    enum MembershipStatus {\\n        nonMember,\\n        requesting,\\n        approvedByOne,\\n        isMember\\n    }\\n\\n    Wallet private _wallet;\\n\\n    mapping(address => uint256) public nextMembershipFeePayment;\\n\\n    // used for IVotes\\n    mapping(address => CheckpointsUpgradeable.History) private _voteCheckpoints;\\n    CheckpointsUpgradeable.History private _totalCheckpoints;\\n\\n    uint256 public minimumCouncilMembers;\\n    uint256 public membershipFee;\\n\\n    address[] public councilMembers;\\n    address[] public members;\\n\\n    mapping(address => MembershipStatus) internal membershipList;\\n    mapping(address => address) internal firstApproval;\\n\\n    bool public membershipActive;\\n\\n    event ChangeInMembershipStatus(\\n        address indexed accountAddress,\\n        uint256 indexed currentStatus\\n    );\\n\\n    event ChangeInCouncilMember(\\n        address indexed concernedCouncilMember,\\n        bool removedOrAdded\\n    );\\n\\n    event ChangeInWalletAddress(\\n        address indexed oldWallet,\\n        address indexed newWallet\\n    );\\n\\n    modifier nonMemberOnly() {\\n        require(\\n            membershipList[msg.sender] == MembershipStatus.nonMember,\\n            \\\"only non-members\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier memberOnly() {\\n        require(\\n            membershipList[msg.sender] == MembershipStatus.isMember,\\n            \\\"only members\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier councilMemberOnly() {\\n        require(isCouncilMember(msg.sender) == true, \\\"only council member\\\");\\n        _;\\n    }\\n\\n    function initialize(\\n        address _firstCouncilMember,\\n        address _secondCouncilMember,\\n        Wallet _walletContract\\n    ) public initializer {\\n        __Ownable_init();\\n\\n        minimumCouncilMembers = 2;\\n        membershipFee = 30000 wei;\\n        _wallet = _walletContract;\\n        membershipActive = true;\\n        emit ChangeInWalletAddress(address(0x0), address(_wallet));\\n\\n        councilMembers.push(_firstCouncilMember);\\n        councilMembers.push(_secondCouncilMember);\\n\\n        membershipList[_firstCouncilMember] = MembershipStatus.isMember;\\n        membershipList[_secondCouncilMember] = MembershipStatus.isMember;\\n\\n        members.push(_firstCouncilMember);\\n        members.push(_secondCouncilMember);\\n\\n        nextMembershipFeePayment[_firstCouncilMember] = block.timestamp;\\n        nextMembershipFeePayment[_secondCouncilMember] = block.timestamp;\\n\\n        _totalCheckpoints.push(_add, 2);\\n        _voteCheckpoints[_firstCouncilMember].push(_add, 1);\\n        _voteCheckpoints[_secondCouncilMember].push(_add, 1);\\n\\n        emit ChangeInMembershipStatus(\\n            _firstCouncilMember,\\n            uint256(MembershipStatus.isMember)\\n        );\\n\\n        emit ChangeInCouncilMember(_firstCouncilMember, true);\\n\\n        emit ChangeInMembershipStatus(\\n            _secondCouncilMember,\\n            uint256(MembershipStatus.isMember)\\n        );\\n\\n        emit ChangeInCouncilMember(_secondCouncilMember, true);\\n    }\\n\\n    function requestMembership() public nonMemberOnly returns (bool) {\\n        require(membershipActive, \\\"Membership is not active\\\");\\n        membershipList[msg.sender] = MembershipStatus.requesting;\\n        members.push(msg.sender);\\n        emit ChangeInMembershipStatus(\\n            msg.sender,\\n            uint256(MembershipStatus.requesting)\\n        );\\n        return true;\\n    }\\n\\n    function getMembershipStatus(address _adr) public view returns (uint256) {\\n        return uint256(membershipList[_adr]);\\n    }\\n\\n    function addCouncilMember(address _adr) public onlyOwner returns (bool) {\\n        require(membershipActive, \\\"Membership is not active\\\");\\n        require(\\n            membershipList[_adr] == MembershipStatus.isMember,\\n            \\\"Must be a member\\\"\\n        );\\n        require(isCouncilMember(_adr) == false, \\\"Is already council member!\\\");\\n\\n        councilMembers.push(_adr);\\n        emit ChangeInCouncilMember(_adr, true);\\n\\n        return true;\\n    }\\n\\n    function removeCouncilMember(address _adr) public returns (bool) {\\n        require(membershipActive, \\\"Membership is not active\\\");\\n        require(isCouncilMember(_adr) == true, \\\"Is no council member!\\\");\\n        require(\\n            this.getCouncilMembersLength() > minimumCouncilMembers,\\n            \\\"Min council members not met!\\\"\\n        );\\n\\n        if (msg.sender != _adr) {\\n            _checkOwner();\\n        }\\n\\n        uint256 i;\\n\\n        for (i = 0; i < this.getCouncilMembersLength() - 1; i++) {\\n            if (councilMembers[i] == _adr) {\\n                break;\\n            }\\n        }\\n\\n        if (i != this.getCouncilMembersLength() - 1) {\\n            councilMembers[i] = councilMembers[\\n                this.getCouncilMembersLength() - 1\\n            ];\\n        }\\n        councilMembers.pop();\\n\\n        emit ChangeInCouncilMember(_adr, false);\\n\\n        return true;\\n    }\\n\\n    function approveMembership(\\n        address _adr\\n    ) public councilMemberOnly returns (bool) {\\n        require(membershipActive, \\\"Membership is not active\\\");\\n        require(\\n            membershipList[_adr] == MembershipStatus.requesting ||\\n                (membershipList[_adr] == MembershipStatus.approvedByOne &&\\n                    firstApproval[_adr] != msg.sender),\\n            \\\"Invalid member status!\\\"\\n        );\\n        if (membershipList[_adr] == MembershipStatus.requesting) {\\n            membershipList[_adr] = MembershipStatus.approvedByOne;\\n            firstApproval[_adr] = msg.sender;\\n            emit ChangeInMembershipStatus(\\n                _adr,\\n                uint256(MembershipStatus.approvedByOne)\\n            );\\n        } else {\\n            membershipList[_adr] = MembershipStatus.isMember;\\n\\n            emit ChangeInMembershipStatus(\\n                _adr,\\n                uint256(MembershipStatus.isMember)\\n            );\\n        }\\n        return true;\\n    }\\n\\n    function payMembershipFee() public payable memberOnly {\\n        require(membershipActive, \\\"Membership is not active\\\");\\n        uint256 nextDueDate = nextMembershipFeePayment[msg.sender];\\n        require(nextDueDate <= block.timestamp, \\\"Membership fee not due yet.\\\");\\n        // we don't say \\\"no\\\" if somebody pays more than they should :)\\n        require(msg.value >= membershipFee, \\\"Membership fee not covered!\\\");\\n\\n        nextMembershipFeePayment[msg.sender] = block.timestamp + 365 days;\\n        _wallet.payContribution{value: msg.value}(msg.sender);\\n\\n        if (nextDueDate == 0) {\\n            _totalCheckpoints.push(_add, 1);\\n            _voteCheckpoints[msg.sender].push(_add, 1);\\n        }\\n    }\\n\\n    function setMembershipFee(uint256 newMembershipFee) external onlyOwner {\\n        membershipFee = newMembershipFee;\\n    }\\n\\n    function setMinimumCouncilMembers(\\n        uint256 newMinimumCouncilMembers\\n    ) external onlyOwner {\\n        require(\\n            newMinimumCouncilMembers <= councilMembers.length,\\n            \\\"To few council members!\\\"\\n        );\\n        minimumCouncilMembers = newMinimumCouncilMembers;\\n    }\\n\\n    function setNewWalletAddress(Wallet newWallet) external onlyOwner {\\n        address oldWallet = address(_wallet);\\n        _wallet = newWallet;\\n        emit ChangeInWalletAddress(oldWallet, address(newWallet));\\n    }\\n\\n    function removeMember(address _adr) public {\\n        require(membershipActive, \\\"Membership is not active\\\");\\n        require(\\n            membershipList[_adr] != MembershipStatus.nonMember,\\n            \\\"Address is not a member!\\\"\\n        );\\n\\n        if (msg.sender != _adr) {\\n            _checkOwner();\\n        }\\n\\n        if (isCouncilMember(_adr)) {\\n            removeCouncilMember(_adr);\\n        }\\n\\n        _removeMember(_adr);\\n    }\\n\\n    function _removeMember(address _adr) private {\\n        if (\\n            membershipList[_adr] == MembershipStatus.isMember &&\\n            nextMembershipFeePayment[_adr] > 0\\n        ) {\\n            _totalCheckpoints.push(_subtract, 1);\\n            _voteCheckpoints[_adr].push(_subtract, 1);\\n        }\\n\\n        delete firstApproval[_adr];\\n        membershipList[_adr] = MembershipStatus.nonMember;\\n\\n        for (uint256 i = 0; i < members.length; i++) {\\n            if (members[i] == _adr) {\\n                members[i] = members[members.length - 1];\\n                members.pop();\\n                break;\\n            }\\n        }\\n\\n        emit ChangeInMembershipStatus(\\n            _adr,\\n            uint256(MembershipStatus.nonMember)\\n        );\\n    }\\n\\n    function removeMembersThatDidntPay() public {\\n        require(membershipActive, \\\"Membership is not active\\\");\\n        address[] memory toBeRemoved = new address[](members.length);\\n        uint256 toBeRemovedIndex = 0;\\n        for (uint256 i = 0; i < members.length; i++) {\\n            address member = members[i];\\n            uint256 nextPayment = nextMembershipFeePayment[member];\\n            if (nextPayment > 0 && block.timestamp > nextPayment) {\\n                if (!isCouncilMember(member)) {\\n                    toBeRemoved[toBeRemovedIndex] = member;\\n                    toBeRemovedIndex++;\\n                }\\n            }\\n        }\\n        for (uint256 i = 0; i < toBeRemoved.length; i++) {\\n            _removeMember(toBeRemoved[i]);\\n        }\\n    }\\n\\n    function getVotes(\\n        address account\\n    ) public view virtual override returns (uint256) {\\n        return _voteCheckpoints[account].latest();\\n    }\\n\\n    function getPastVotes(\\n        address account,\\n        uint256 blockNumber\\n    ) public view virtual override returns (uint256) {\\n        return _voteCheckpoints[account].getAtProbablyRecentBlock(blockNumber);\\n    }\\n\\n    function getPastTotalSupply(\\n        uint256 blockNumber\\n    ) public view virtual override returns (uint256) {\\n        require(blockNumber < block.number, \\\"Votes: block not yet mined\\\");\\n        return _totalCheckpoints.getAtProbablyRecentBlock(blockNumber);\\n    }\\n\\n    /* solhint-disable no-empty-blocks */\\n    function delegate(address delegatee) public virtual override {\\n        // doesnt need to anything\\n    }\\n\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        // is fine to be empty\\n    }\\n\\n    function getFirstApproval(address _adr) external view returns (address) {\\n        return firstApproval[_adr];\\n    }\\n\\n    /* solhint-enable no-empty-blocks */\\n\\n    function delegates(address account) external pure returns (address) {\\n        return account;\\n    }\\n\\n    function _add(uint256 a, uint256 b) private pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    function _subtract(uint256 a, uint256 b) private pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    function isCouncilMember(address _adr) public view returns (bool) {\\n        bool check = false;\\n\\n        for (uint256 i = 0; i < this.getCouncilMembersLength(); i++) {\\n            if (councilMembers[i] == _adr) {\\n                check = true;\\n                break;\\n            }\\n        }\\n\\n        return check;\\n    }\\n\\n    function getCouncilMembersLength() external view returns (uint256) {\\n        return councilMembers.length;\\n    }\\n\\n    function getMembersLength() external view returns (uint256) {\\n        return members.length;\\n    }\\n\\n    function lockMembership() public onlyOwner {\\n        membershipActive = false;\\n    }\\n}\\n/* solhint-enable not-rely-on-time */\\n\",\"keccak256\":\"0x5021a616ca5c464200b2520a553eae23dfb4fc3b1571b3d2a28da6f55781977d\",\"license\":\"UNLICENSED\"},\"contracts/Wallet.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\ncontract Wallet is Initializable, OwnableUpgradeable {\\n    uint256 public totalBalance;\\n    uint256 public totalAllowance;\\n\\n    uint256 private _knownSenderLength;\\n    address[] private _knownSender;\\n\\n    mapping(address => uint256) public individualContribution;\\n    mapping(address => uint256) public allowance;\\n    mapping(address => uint256) public withdrawingAllowance;\\n\\n    event IncreaseAllowance(address indexed account, uint256 amount);\\n    event AcceptPayment(address indexed account, uint256 amount);\\n    event WithdrawFunds(address indexed account, uint256 amount);\\n\\n    modifier knownSender() {\\n        require(isKnownSender(msg.sender) == true, \\\"only known senders\\\");\\n        _;\\n    }\\n\\n    function initialize() public initializer {\\n        __Ownable_init();\\n        addKnownSender(msg.sender);\\n        _knownSenderLength = 1;\\n    }\\n\\n    receive() external payable {\\n        totalBalance += msg.value;\\n        individualContribution[msg.sender] += msg.value;\\n\\n        emit AcceptPayment(msg.sender, msg.value);\\n    }\\n\\n    function addKnownSender(address _adr) public onlyOwner {\\n        if (isKnownSender(_adr) == false) {\\n            _knownSender.push(_adr);\\n            _knownSenderLength++;\\n        }\\n    }\\n\\n    function isKnownSender(address _adr) public view returns (bool) {\\n        bool check = false;\\n        for (uint256 i = 0; i < _knownSenderLength; i++) {\\n            if (_knownSender[i] == _adr) {\\n                check = true;\\n                break;\\n            }\\n        }\\n        return check;\\n    }\\n\\n    function removeKnownSender(address _adr) public onlyOwner {\\n        require(_adr != owner(), \\\"Owner cannot be removed!\\\");\\n\\n        uint256 i;\\n\\n        for (i = 0; i < _knownSenderLength - 1; i++) {\\n            if (_knownSender[i] == _adr) {\\n                break;\\n            }\\n        }\\n\\n        if (i != _knownSenderLength - 1) {\\n            _knownSender[i] = _knownSender[_knownSenderLength - 1];\\n        }\\n\\n        _knownSenderLength--;\\n    }\\n\\n    function increaseAllowance(\\n        address _adr,\\n        uint256 _amount\\n    ) public onlyOwner returns (bool) {\\n        require(\\n            (totalAllowance + _amount) <= totalBalance,\\n            \\\"Keep allowance below balance!\\\"\\n        );\\n        allowance[_adr] += _amount;\\n        totalAllowance += _amount;\\n        emit IncreaseAllowance(_adr, _amount);\\n        return true;\\n    }\\n\\n    function payContribution(\\n        address _adr\\n    ) public payable knownSender returns (bool) {\\n        uint256 _amount = msg.value;\\n        totalBalance += _amount;\\n        individualContribution[_adr] += _amount;\\n\\n        emit AcceptPayment(_adr, _amount);\\n\\n        return true;\\n    }\\n\\n    function withdrawMoney(address payable _adr) public returns (bool) {\\n        require(allowance[_adr] > 0, \\\"No allowance for this account!\\\");\\n\\n        uint256 operatingAmount = allowance[_adr];\\n\\n        allowance[_adr] -= operatingAmount;\\n        totalAllowance -= withdrawingAllowance[_adr];\\n        totalBalance -= withdrawingAllowance[_adr];\\n        withdrawingAllowance[_adr] = 0;\\n\\n        _adr.transfer(operatingAmount);\\n\\n        emit WithdrawFunds(_adr, totalAllowance);\\n        return true;\\n    }\\n\\n    function liquidate(address payable liquidator) public onlyOwner {\\n        uint256 amountToLiquidate = totalBalance - totalAllowance;\\n        if (amountToLiquidate > 0) {\\n            liquidator.transfer(amountToLiquidate);\\n            emit WithdrawFunds(liquidator, amountToLiquidate);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd3b8355724d245ba0521b581e97d52abd2b8617ea57e62003631d46a7fa20a84\",\"license\":\"UNLICENSED\"},\"contracts/governor/GovernorCountingSimpleUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (governance/extensions/GovernorCountingSimple.sol)\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"./GovernorUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nabstract contract GovernorCountingSimpleUpgradeable is\\n    Initializable,\\n    GovernorUpgradeable\\n{\\n    // solhint-disable-next-line  no-empty-blocks\\n    function governorCountingSimpleInit() internal onlyInitializing {}\\n\\n    enum VoteType {\\n        Against,\\n        For,\\n        Abstain\\n    }\\n\\n    struct ProposalVote {\\n        uint256 againstVotes;\\n        uint256 forVotes;\\n        uint256 abstainVotes;\\n        mapping(address => bool) hasVoted;\\n    }\\n\\n    mapping(uint256 => ProposalVote) internal _proposalVotes;\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function COUNTING_MODE()\\n        public\\n        pure\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        return \\\"support=bravo&quorum=for,abstain\\\";\\n    }\\n\\n    function hasVoted(\\n        uint256 proposalId,\\n        address account\\n    ) public view virtual override returns (bool) {\\n        return _proposalVotes[proposalId].hasVoted[account];\\n    }\\n\\n    function proposalVotes(\\n        uint256 proposalId\\n    )\\n        public\\n        view\\n        virtual\\n        returns (uint256 againstVotes, uint256 forVotes, uint256 abstainVotes)\\n    {\\n        ProposalVote storage proposalVote = _proposalVotes[proposalId];\\n        return (\\n            proposalVote.againstVotes,\\n            proposalVote.forVotes,\\n            proposalVote.abstainVotes\\n        );\\n    }\\n\\n    function _quorumReached(\\n        uint256 proposalId\\n    ) internal view virtual override returns (bool) {\\n        ProposalVote storage proposalVote = _proposalVotes[proposalId];\\n\\n        return\\n            quorum(proposalSnapshot(proposalId)) <=\\n            proposalVote.forVotes + proposalVote.abstainVotes;\\n    }\\n\\n    function _voteSucceeded(\\n        uint256 proposalId\\n    ) internal view virtual override returns (bool) {\\n        ProposalVote storage proposalVote = _proposalVotes[proposalId];\\n\\n        return proposalVote.forVotes > proposalVote.againstVotes;\\n    }\\n\\n    function _countVote(\\n        uint256 proposalId,\\n        address account,\\n        uint8 support,\\n        uint256 weight,\\n        bytes memory // params\\n    ) internal virtual override {\\n        ProposalVote storage proposalVote = _proposalVotes[proposalId];\\n\\n        require(!proposalVote.hasVoted[account], \\\"Vote already cast\\\");\\n        proposalVote.hasVoted[account] = true;\\n\\n        if (support == uint8(VoteType.Against)) {\\n            proposalVote.againstVotes += weight;\\n        } else if (support == uint8(VoteType.For)) {\\n            proposalVote.forVotes += weight;\\n        } else if (support == uint8(VoteType.Abstain)) {\\n            proposalVote.abstainVotes += weight;\\n        } else {\\n            revert(\\\"Invalid value for enum VoteType\\\");\\n        }\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb1ea922221ea4fa7d5c784b3583a642e2f65856269b3c5d50feee0d5b4b900ef\",\"license\":\"MIT\"},\"contracts/governor/GovernorTimelockControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (governance/extensions/GovernorTimelockControl.sol)\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"./GovernorUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/governance/TimelockControllerUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/governance/extensions/IGovernorTimelockUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nabstract contract GovernorTimelockControlUpgradeable is\\n    Initializable,\\n    IGovernorTimelockUpgradeable,\\n    GovernorUpgradeable\\n{\\n    TimelockControllerUpgradeable internal _timelock;\\n    mapping(uint256 => bytes32) private _timelockIds;\\n\\n    event TimelockChange(address oldTimelock, address newTimelock);\\n\\n    function governorTimelockControlInit(\\n        TimelockControllerUpgradeable timelockAddress\\n    ) internal onlyInitializing {\\n        governorTimelockControlInitUnchained(timelockAddress);\\n    }\\n\\n    function governorTimelockControlInitUnchained(\\n        TimelockControllerUpgradeable timelockAddress\\n    ) internal onlyInitializing {\\n        _updateTimelock(timelockAddress);\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    )\\n        public\\n        view\\n        virtual\\n        override(IERC165Upgradeable, GovernorUpgradeable)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IGovernorTimelockUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    function state(\\n        uint256 proposalId\\n    )\\n        public\\n        view\\n        virtual\\n        override(IGovernorUpgradeable, GovernorUpgradeable)\\n        returns (ProposalState)\\n    {\\n        ProposalState status = super.state(proposalId);\\n\\n        if (status != ProposalState.Succeeded) {\\n            return status;\\n        }\\n\\n        // core tracks execution, so we just have to check if successful proposal have been queued.\\n        bytes32 queueid = _timelockIds[proposalId];\\n        if (queueid == bytes32(0)) {\\n            return status;\\n        } else if (_timelock.isOperationDone(queueid)) {\\n            return ProposalState.Executed;\\n        } else if (_timelock.isOperationPending(queueid)) {\\n            return ProposalState.Queued;\\n        } else {\\n            return ProposalState.Canceled;\\n        }\\n    }\\n\\n    function timelock() public view virtual override returns (address) {\\n        return address(_timelock);\\n    }\\n\\n    function proposalEta(\\n        uint256 proposalId\\n    ) public view virtual override returns (uint256) {\\n        uint256 eta = _timelock.getTimestamp(_timelockIds[proposalId]);\\n        return eta == 1 ? 0 : eta; // _DONE_TIMESTAMP (1) should be replaced with a 0 value\\n    }\\n\\n    function queue(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) public virtual override returns (uint256) {\\n        uint256 proposalId = hashProposal(\\n            targets,\\n            values,\\n            calldatas,\\n            descriptionHash\\n        );\\n\\n        require(\\n            state(proposalId) == ProposalState.Succeeded,\\n            \\\"Proposal not successful\\\"\\n        );\\n\\n        uint256 delay = _timelock.getMinDelay();\\n        _timelockIds[proposalId] = _timelock.hashOperationBatch(\\n            targets,\\n            values,\\n            calldatas,\\n            0,\\n            descriptionHash\\n        );\\n        _timelock.scheduleBatch(\\n            targets,\\n            values,\\n            calldatas,\\n            0,\\n            descriptionHash,\\n            delay\\n        );\\n\\n        // solhint-disable-next-line not-rely-on-time\\n        emit ProposalQueued(proposalId, block.timestamp + delay);\\n\\n        return proposalId;\\n    }\\n\\n    function _execute(\\n        uint256 /* proposalId */,\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) internal virtual override {\\n        _timelock.executeBatch{value: msg.value}(\\n            targets,\\n            values,\\n            calldatas,\\n            0,\\n            descriptionHash\\n        );\\n    }\\n\\n    function _cancel(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) internal virtual override returns (uint256) {\\n        uint256 proposalId = super._cancel(\\n            targets,\\n            values,\\n            calldatas,\\n            descriptionHash\\n        );\\n\\n        if (_timelockIds[proposalId] != 0) {\\n            _timelock.cancel(_timelockIds[proposalId]);\\n            delete _timelockIds[proposalId];\\n        }\\n\\n        return proposalId;\\n    }\\n\\n    function _executor() internal view virtual override returns (address) {\\n        return address(_timelock);\\n    }\\n\\n    function updateTimelock(\\n        TimelockControllerUpgradeable newTimelock\\n    ) external virtual onlyGovernance {\\n        _updateTimelock(newTimelock);\\n    }\\n\\n    function _updateTimelock(\\n        TimelockControllerUpgradeable newTimelock\\n    ) private {\\n        emit TimelockChange(address(_timelock), address(newTimelock));\\n        _timelock = newTimelock;\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x46fa992649adb9a1964395a82422dc8fd04053a33fa05082e289e070b49124b0\",\"license\":\"MIT\"},\"contracts/governor/GovernorUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (governance/Governor.sol)\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/structs/DoubleEndedQueueUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/TimersUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/governance/IGovernorUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nabstract contract GovernorUpgradeable is\\n    Initializable,\\n    ContextUpgradeable,\\n    EIP712Upgradeable,\\n    IGovernorUpgradeable\\n{\\n    using DoubleEndedQueueUpgradeable for DoubleEndedQueueUpgradeable.Bytes32Deque;\\n    using SafeCastUpgradeable for uint256;\\n    using TimersUpgradeable for TimersUpgradeable.BlockNumber;\\n\\n    bytes32 public constant BALLOT_TYPEHASH =\\n        keccak256(\\\"Ballot(uint256 proposalId,uint8 support)\\\");\\n    bytes32 public constant EXTENDED_BALLOT_TYPEHASH =\\n        keccak256(\\n            \\\"ExtendedBallot(uint256 proposalId,uint8 support,string reason,bytes params)\\\"\\n        );\\n    bytes4 private constant SET_VOTING_SLOT_SIGNATURE =\\n        bytes4(keccak256(\\\"setVotingSlot(uint256)\\\"));\\n\\n    bytes4 private constant DISSOLVE_DAO_SIGNATURE =\\n        bytes4(keccak256(\\\"dissolveDAO()\\\"));\\n\\n    bytes4 private constant LOCK_MEMBERSHIP_SIGNATURE =\\n        bytes4(keccak256(\\\"lockMembership()\\\"));\\n\\n    bytes4 private constant LIQUIDATE_WALLET_SIGNATURE =\\n        bytes4(keccak256(\\\"liquidate(address)\\\"));\\n\\n    uint64 public extraOrdinaryAssemblyVotingPeriod;\\n\\n    event DAOProposalCreated(\\n        uint256 indexed proposalId,\\n        address indexed proposer,\\n        address[] targets,\\n        uint256[] values,\\n        string[] signatures,\\n        bytes[] calldatas,\\n        uint256 startBlock,\\n        uint256 endBlock,\\n        string description,\\n        ProposalCategory indexed category\\n    );\\n\\n    event ExtraOrdinaryAssemblyRequested(\\n        uint256 indexed proposalId,\\n        address indexed proposer,\\n        address[] targets,\\n        uint256[] values,\\n        string[] signatures,\\n        bytes[] calldatas,\\n        uint256 startBlock,\\n        uint256 endBlock,\\n        string description\\n    );\\n\\n    enum ProposalCategory {\\n        Generic,\\n        ExtraordinaryVote,\\n        AssociationDissolution\\n    }\\n\\n    struct ProposalCore {\\n        TimersUpgradeable.BlockNumber voteStart;\\n        TimersUpgradeable.BlockNumber voteEnd;\\n        ProposalCategory category;\\n        bool executed;\\n        bool canceled;\\n    }\\n\\n    string private _name;\\n\\n    mapping(uint256 => ProposalCore) internal _proposals;\\n\\n    uint256[] public slots;\\n    // BlockNumber => ProposalId[]\\n    mapping(uint256 => uint256[]) public votingSlots;\\n\\n    // number of blocks before voting slot closes for submission\\n    uint256 public slotCloseTime;\\n\\n    DoubleEndedQueueUpgradeable.Bytes32Deque private _governanceCall;\\n\\n    // index of requested extra ordinary proposal ids\\n    uint256[] public extraOrdinaryAssemblyProposals;\\n\\n    bool public daoActive;\\n\\n    event NewTimeslotSet(uint256 timeslot);\\n\\n    modifier onlyGovernance() {\\n        require(_msgSender() == _executor(), \\\"Governor: onlyGovernance\\\");\\n        if (_executor() != address(this)) {\\n            bytes32 msgDataHash = keccak256(_msgData());\\n            // loop until popping the expected operation - throw if deque is empty (operation not authorized)\\n            // solhint-disable-next-line  no-empty-blocks\\n            while (_governanceCall.popFront() != msgDataHash) {}\\n        }\\n        _;\\n    }\\n\\n    function governorInit(string memory name_) internal onlyInitializing {\\n        __EIP712_init_unchained(name_, version());\\n        governorInitUnchained(name_);\\n        slotCloseTime = 50400;\\n        // 1 week before\\n        daoActive = true;\\n    }\\n\\n    function governorInitUnchained(\\n        string memory name_\\n    ) internal onlyInitializing {\\n        _name = name_;\\n    }\\n\\n    receive() external payable virtual {\\n        require(_executor() == address(this), \\\"can only called by governor\\\");\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId ==\\n            (type(IGovernorUpgradeable).interfaceId ^\\n                this.castVoteWithReasonAndParams.selector ^\\n                this.castVoteWithReasonAndParamsBySig.selector ^\\n                this.getVotesWithParams.selector) ||\\n            interfaceId == type(IGovernorUpgradeable).interfaceId;\\n    }\\n\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    function version() public view virtual override returns (string memory) {\\n        return \\\"1\\\";\\n    }\\n\\n    function hashProposal(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) public pure virtual override returns (uint256) {\\n        return\\n            uint256(\\n                keccak256(\\n                    abi.encode(targets, values, calldatas, descriptionHash)\\n                )\\n            );\\n    }\\n\\n    function state(\\n        uint256 proposalId\\n    ) public view virtual override returns (ProposalState) {\\n        ProposalCore storage proposal = _proposals[proposalId];\\n\\n        if (proposal.executed) {\\n            return ProposalState.Executed;\\n        }\\n\\n        if (proposal.canceled) {\\n            return ProposalState.Canceled;\\n        }\\n\\n        uint256 proposalStart = proposalSnapshot(proposalId);\\n\\n        if (proposalStart == 0) {\\n            revert(\\\"Governor: unknown proposal id\\\");\\n        }\\n\\n        if (proposalStart >= block.number) {\\n            return ProposalState.Pending;\\n        }\\n\\n        uint256 deadline = proposalDeadline(proposalId);\\n\\n        if (deadline >= block.number) {\\n            return ProposalState.Active;\\n        }\\n\\n        if (_quorumReached(proposalId) && _voteSucceeded(proposalId)) {\\n            return ProposalState.Succeeded;\\n        } else {\\n            return ProposalState.Defeated;\\n        }\\n    }\\n\\n    function proposalSnapshot(\\n        uint256 proposalId\\n    ) public view virtual override returns (uint256) {\\n        return _proposals[proposalId].voteStart.getDeadline();\\n    }\\n\\n    function proposalDeadline(\\n        uint256 proposalId\\n    ) public view virtual override returns (uint256) {\\n        return _proposals[proposalId].voteEnd.getDeadline();\\n    }\\n\\n    /**\\n     * The number of votes required in order for a voter to become a proposer\\n     * Must have voting power to create a proposal\\n     */\\n    function proposalThreshold() public view virtual returns (uint256) {\\n        return 1;\\n    }\\n\\n    function _quorumReached(\\n        uint256 proposalId\\n    ) internal view virtual returns (bool);\\n\\n    function _voteSucceeded(\\n        uint256 proposalId\\n    ) internal view virtual returns (bool);\\n\\n    function _getVotes(\\n        address account,\\n        uint256 blockNumber,\\n        bytes memory params\\n    ) internal view virtual returns (uint256);\\n\\n    function _countVote(\\n        uint256 proposalId,\\n        address account,\\n        uint8 support,\\n        uint256 weight,\\n        bytes memory params\\n    ) internal virtual;\\n\\n    function propose(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        string memory description\\n    ) public virtual override(IGovernorUpgradeable) returns (uint256) {\\n        require(daoActive, \\\"The DAO is not active\\\");\\n        uint256 proposalId = _checkAndHashProposal(\\n            targets,\\n            values,\\n            calldatas,\\n            description\\n        );\\n\\n        ProposalCore storage proposal = _buildProposal(proposalId, calldatas);\\n\\n        emit ProposalCreated(\\n            proposalId,\\n            _msgSender(),\\n            targets,\\n            values,\\n            new string[](targets.length),\\n            calldatas,\\n            proposal.voteStart._deadline,\\n            proposal.voteEnd._deadline,\\n            description\\n        );\\n\\n        emit DAOProposalCreated(\\n            proposalId,\\n            _msgSender(),\\n            targets,\\n            values,\\n            new string[](targets.length),\\n            calldatas,\\n            proposal.voteStart._deadline,\\n            proposal.voteEnd._deadline,\\n            description,\\n            proposal.category\\n        );\\n\\n        if (proposal.category == ProposalCategory.ExtraordinaryVote) {\\n            emit ExtraOrdinaryAssemblyRequested(\\n                proposalId,\\n                _msgSender(),\\n                targets,\\n                values,\\n                new string[](targets.length),\\n                calldatas,\\n                proposal.voteStart._deadline,\\n                proposal.voteEnd._deadline,\\n                description\\n            );\\n        }\\n\\n        return proposalId;\\n    }\\n\\n    function _checkAndHashProposal(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        string memory description\\n    ) internal view returns (uint256) {\\n        require(\\n            getVotes(_msgSender(), block.number - 1) >= proposalThreshold(),\\n            \\\"Proposer votes below threshold\\\"\\n        );\\n\\n        uint256 proposalId = hashProposal(\\n            targets,\\n            values,\\n            calldatas,\\n            keccak256(bytes(description))\\n        );\\n\\n        require(targets.length == values.length, \\\"Invalid proposal length\\\");\\n        require(targets.length == calldatas.length, \\\"Invalid proposal length\\\");\\n        require(targets.length > 0, \\\"Empty proposal\\\");\\n\\n        return proposalId;\\n    }\\n\\n    function _buildProposal(\\n        uint256 proposalId,\\n        bytes[] memory calldatas\\n    ) internal returns (ProposalCore storage) {\\n        ProposalCore storage proposal = _proposals[proposalId];\\n        require(proposal.voteStart.isUnset(), \\\"Proposal already exists\\\");\\n\\n        bool isRequestingExtraOrdinaryVotingSlot = false;\\n        bool isRequestingDissolveOfDAO = false;\\n        if (calldatas.length == 3) {\\n            bytes4 functionSignature0 = bytes4(calldatas[0]);\\n            bytes4 functionSignature1 = bytes4(calldatas[1]);\\n            bytes4 functionSignature2 = bytes4(calldatas[2]);\\n            if (\\n                functionSignature0 == LIQUIDATE_WALLET_SIGNATURE &&\\n                functionSignature1 == LOCK_MEMBERSHIP_SIGNATURE &&\\n                functionSignature2 == DISSOLVE_DAO_SIGNATURE\\n            ) {\\n                isRequestingDissolveOfDAO = true;\\n            }\\n        }\\n        if (isRequestingDissolveOfDAO != true) {\\n            for (uint256 i = 0; i < calldatas.length; i++) {\\n                bytes4 functionSignature = bytes4(calldatas[i]);\\n                if (functionSignature == SET_VOTING_SLOT_SIGNATURE) {\\n                    isRequestingExtraOrdinaryVotingSlot = true;\\n                    break;\\n                }\\n                if (\\n                    functionSignature == LIQUIDATE_WALLET_SIGNATURE ||\\n                    functionSignature == LOCK_MEMBERSHIP_SIGNATURE ||\\n                    functionSignature == DISSOLVE_DAO_SIGNATURE\\n                ) {\\n                    revert(\\\"Wrong functions\\\");\\n                }\\n            }\\n        }\\n\\n        if (isRequestingExtraOrdinaryVotingSlot) {\\n            uint64 start = block.number.toUint64() + votingDelay().toUint64();\\n            uint64 end = start + extraOrdinaryAssemblyVotingPeriod;\\n\\n            proposal.voteStart.setDeadline(start);\\n            proposal.voteEnd.setDeadline(end);\\n            proposal.category = ProposalCategory.ExtraordinaryVote;\\n\\n            extraOrdinaryAssemblyProposals.push(proposalId);\\n        } else {\\n            uint256 nextSlot = _getNextPossibleVotingSlot();\\n\\n            uint64 start = nextSlot.toUint64();\\n            uint64 end = start + votingPeriod().toUint64();\\n\\n            proposal.voteStart.setDeadline(start);\\n            proposal.voteEnd.setDeadline(end);\\n            if (isRequestingDissolveOfDAO) {\\n                proposal.category = ProposalCategory.AssociationDissolution;\\n            } else {\\n                proposal.category = ProposalCategory.Generic;\\n            }\\n\\n            votingSlots[nextSlot].push(proposalId);\\n        }\\n\\n        return proposal;\\n    }\\n\\n    function execute(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) public payable virtual override returns (uint256) {\\n        uint256 proposalId = hashProposal(\\n            targets,\\n            values,\\n            calldatas,\\n            descriptionHash\\n        );\\n\\n        ProposalState status = state(proposalId);\\n        require(\\n            status == ProposalState.Succeeded || status == ProposalState.Queued,\\n            \\\"Proposal not successful\\\"\\n        );\\n        _proposals[proposalId].executed = true;\\n\\n        emit ProposalExecuted(proposalId);\\n\\n        _beforeExecute(proposalId, targets, values, calldatas, descriptionHash);\\n        _execute(proposalId, targets, values, calldatas, descriptionHash);\\n        _afterExecute(proposalId, targets, values, calldatas, descriptionHash);\\n\\n        return proposalId;\\n    }\\n\\n    function _execute(\\n        uint256 /* proposalId */,\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 /*descriptionHash*/\\n    ) internal virtual {\\n        string memory errorMessage = \\\"Call reverted without message\\\";\\n        for (uint256 i = 0; i < targets.length; ++i) {\\n            // solhint-disable-next-line avoid-low-level-calls\\n            (bool success, bytes memory returndata) = targets[i].call{\\n                value: values[i]\\n            }(calldatas[i]);\\n            AddressUpgradeable.verifyCallResult(\\n                success,\\n                returndata,\\n                errorMessage\\n            );\\n        }\\n    }\\n\\n    function _beforeExecute(\\n        uint256 /* proposalId */,\\n        address[] memory targets,\\n        uint256[] memory /* values */,\\n        bytes[] memory calldatas,\\n        bytes32 /*descriptionHash*/\\n    ) internal virtual {\\n        if (_executor() != address(this)) {\\n            for (uint256 i = 0; i < targets.length; ++i) {\\n                if (targets[i] == address(this)) {\\n                    _governanceCall.pushBack(keccak256(calldatas[i]));\\n                }\\n            }\\n        }\\n    }\\n\\n    function _afterExecute(\\n        uint256 /* proposalId */,\\n        address[] memory /* targets */,\\n        uint256[] memory /* values */,\\n        bytes[] memory /* calldatas */,\\n        bytes32 /*descriptionHash*/\\n    ) internal virtual {\\n        if (_executor() != address(this)) {\\n            if (!_governanceCall.empty()) {\\n                _governanceCall.clear();\\n            }\\n        }\\n    }\\n\\n    function _cancel(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) internal virtual returns (uint256) {\\n        uint256 proposalId = hashProposal(\\n            targets,\\n            values,\\n            calldatas,\\n            descriptionHash\\n        );\\n        ProposalState status = state(proposalId);\\n\\n        require(\\n            status != ProposalState.Canceled &&\\n                status != ProposalState.Expired &&\\n                status != ProposalState.Executed,\\n            \\\"Governor: proposal not active\\\"\\n        );\\n        _proposals[proposalId].canceled = true;\\n\\n        emit ProposalCanceled(proposalId);\\n\\n        return proposalId;\\n    }\\n\\n    function getVotes(\\n        address account,\\n        uint256 blockNumber\\n    ) public view virtual override returns (uint256) {\\n        return _getVotes(account, blockNumber, \\\"\\\");\\n    }\\n\\n    function getVotesWithParams(\\n        address account,\\n        uint256 blockNumber,\\n        bytes memory params\\n    ) public view virtual override returns (uint256) {\\n        return _getVotes(account, blockNumber, params);\\n    }\\n\\n    function castVote(\\n        uint256 proposalId,\\n        uint8 support\\n    ) public virtual override returns (uint256) {\\n        address voter = _msgSender();\\n        return _castVote(proposalId, voter, support, \\\"\\\");\\n    }\\n\\n    function castVoteWithReason(\\n        uint256 proposalId,\\n        uint8 support,\\n        string calldata reason\\n    ) public virtual override returns (uint256) {\\n        address voter = _msgSender();\\n        return _castVote(proposalId, voter, support, reason);\\n    }\\n\\n    function castVoteWithReasonAndParams(\\n        uint256 proposalId,\\n        uint8 support,\\n        string calldata reason,\\n        bytes memory params\\n    ) public virtual override returns (uint256) {\\n        address voter = _msgSender();\\n        return _castVote(proposalId, voter, support, reason, params);\\n    }\\n\\n    /* solhint-disable no-unused-vars */\\n    function castVoteBySig(\\n        uint256 proposalId,\\n        uint8 support,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override returns (uint256) {\\n        // The law says you always have to vote yourself\\n        require(1 == 0, \\\"not possible\\\");\\n        return 0;\\n    }\\n\\n    function castVoteWithReasonAndParamsBySig(\\n        uint256 proposalId,\\n        uint8 support,\\n        string calldata reason,\\n        bytes memory params,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override returns (uint256) {\\n        // The law says you always have to vote yourself\\n        require(1 == 0, \\\"not possible\\\");\\n        return 0;\\n    }\\n\\n    /* solhint-enable no-unused-vars */\\n\\n    function _castVote(\\n        uint256 proposalId,\\n        address account,\\n        uint8 support,\\n        string memory reason\\n    ) internal virtual returns (uint256) {\\n        return _castVote(proposalId, account, support, reason, \\\"\\\");\\n    }\\n\\n    function _castVote(\\n        uint256 proposalId,\\n        address account,\\n        uint8 support,\\n        string memory reason,\\n        bytes memory params\\n    ) internal virtual returns (uint256) {\\n        ProposalCore storage proposal = _proposals[proposalId];\\n        require(\\n            state(proposalId) == ProposalState.Active,\\n            \\\"Vote not currently active\\\"\\n        );\\n\\n        uint256 weight = _getVotes(\\n            account,\\n            proposal.voteStart.getDeadline(),\\n            params\\n        );\\n        require(weight > 0, \\\"no voting rights\\\");\\n        _countVote(proposalId, account, support, weight, params);\\n\\n        if (params.length == 0) {\\n            emit VoteCast(account, proposalId, support, weight, reason);\\n        } else {\\n            emit VoteCastWithParams(\\n                account,\\n                proposalId,\\n                support,\\n                weight,\\n                reason,\\n                params\\n            );\\n        }\\n\\n        return weight;\\n    }\\n\\n    function relay(\\n        address target,\\n        uint256 value,\\n        bytes calldata data\\n    ) external payable virtual onlyGovernance {\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{value: value}(\\n            data\\n        );\\n        AddressUpgradeable.verifyCallResult(\\n            success,\\n            returndata,\\n            \\\"Relay reverted without message\\\"\\n        );\\n    }\\n\\n    function _executor() internal view virtual returns (address) {\\n        return address(this);\\n    }\\n\\n    function _getNextPossibleVotingSlot() internal view returns (uint256) {\\n        for (uint256 i = 0; i < slots.length; i++) {\\n            if (block.number < (slots[i] - slotCloseTime)) {\\n                return slots[i];\\n            }\\n        }\\n        revert(\\\"No voting slot found\\\");\\n    }\\n\\n    function getSlotsLength() external view returns (uint256) {\\n        return slots.length;\\n    }\\n\\n    function getNumberOfProposalsInVotingSlot(\\n        uint256 slotNumber\\n    ) external view returns (uint256) {\\n        return votingSlots[slotNumber].length;\\n    }\\n\\n    function getExtraOrdinaryProposalsLength() external view returns (uint256) {\\n        return extraOrdinaryAssemblyProposals.length;\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xbde5e99b1497f461c42b433266cf605981ff154b23a464c30bae16eb30d7d134\",\"license\":\"MIT\"},\"contracts/governor/GovernorVotesQuorumFractionUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (governance/extensions/GovernorVotesQuorumFraction.sol)\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"./GovernorVotesUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/CheckpointsUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nabstract contract GovernorVotesQuorumFractionUpgradeable is\\n    Initializable,\\n    GovernorVotesUpgradeable\\n{\\n    using CheckpointsUpgradeable for CheckpointsUpgradeable.History;\\n\\n    uint256 private _quorumNumerator; // DEPRECATED\\n    CheckpointsUpgradeable.History private _quorumNumeratorHistory;\\n\\n    event QuorumNumeratorUpdated(\\n        uint256 oldQuorumNumerator,\\n        uint256 newQuorumNumerator\\n    );\\n\\n    function governorVotesQuorumFractionInit(\\n        uint256 quorumNumeratorValue\\n    ) internal onlyInitializing {\\n        governorVotesQuorumFractionInitUnchained(quorumNumeratorValue);\\n    }\\n\\n    function governorVotesQuorumFractionInitUnchained(\\n        uint256 quorumNumeratorValue\\n    ) internal onlyInitializing {\\n        _updateQuorumNumerator(quorumNumeratorValue);\\n    }\\n\\n    function quorumNumerator() public view virtual returns (uint256) {\\n        return\\n            _quorumNumeratorHistory._checkpoints.length == 0\\n                ? _quorumNumerator\\n                : _quorumNumeratorHistory.latest();\\n    }\\n\\n    function quorumNumerator(\\n        uint256 blockNumber\\n    ) public view virtual returns (uint256) {\\n        // If history is empty, fallback to old storage\\n        uint256 length = _quorumNumeratorHistory._checkpoints.length;\\n        if (length == 0) {\\n            return _quorumNumerator;\\n        }\\n\\n        // Optimistic search, check the latest checkpoint\\n        CheckpointsUpgradeable.Checkpoint\\n            memory latest = _quorumNumeratorHistory._checkpoints[length - 1];\\n        if (latest._blockNumber <= blockNumber) {\\n            return latest._value;\\n        }\\n\\n        // Otherwise, do the binary search\\n        return _quorumNumeratorHistory.getAtBlock(blockNumber);\\n    }\\n\\n    function quorumDenominator() public view virtual returns (uint256) {\\n        return 100;\\n    }\\n\\n    function quorum(\\n        uint256 blockNumber\\n    ) public view virtual override returns (uint256) {\\n        return\\n            (token.getPastTotalSupply(blockNumber) *\\n                quorumNumerator(blockNumber)) / quorumDenominator();\\n    }\\n\\n    function updateQuorumNumerator(\\n        uint256 newQuorumNumerator\\n    ) external virtual onlyGovernance {\\n        _updateQuorumNumerator(newQuorumNumerator);\\n    }\\n\\n    function _updateQuorumNumerator(\\n        uint256 newQuorumNumerator\\n    ) internal virtual {\\n        require(\\n            newQuorumNumerator <= quorumDenominator(),\\n            \\\"Numerator over denominator\\\"\\n        );\\n\\n        uint256 oldQuorumNumerator = quorumNumerator();\\n\\n        // Make sure we keep track of the original numerator in contracts upgraded from a version without checkpoints.\\n        if (\\n            oldQuorumNumerator != 0 &&\\n            _quorumNumeratorHistory._checkpoints.length == 0\\n        ) {\\n            _quorumNumeratorHistory._checkpoints.push(\\n                CheckpointsUpgradeable.Checkpoint({\\n                    _blockNumber: 0,\\n                    _value: SafeCastUpgradeable.toUint224(oldQuorumNumerator)\\n                })\\n            );\\n        }\\n\\n        // Set new quorum for future proposals\\n        _quorumNumeratorHistory.push(newQuorumNumerator);\\n\\n        emit QuorumNumeratorUpdated(oldQuorumNumerator, newQuorumNumerator);\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x2d01c7af9a46c9a530a083129301a2668b5212d0702b8e9c8f30fd35cefa06cf\",\"license\":\"MIT\"},\"contracts/governor/GovernorVotesUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (governance/extensions/GovernorVotes.sol)\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"./GovernorUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/governance/utils/IVotesUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nabstract contract GovernorVotesUpgradeable is\\n    Initializable,\\n    GovernorUpgradeable\\n{\\n    IVotesUpgradeable public token;\\n\\n    function governorVotesInit(\\n        IVotesUpgradeable tokenAddress\\n    ) internal onlyInitializing {\\n        governorVotesInitUnchained(tokenAddress);\\n    }\\n\\n    function governorVotesInitUnchained(\\n        IVotesUpgradeable tokenAddress\\n    ) internal onlyInitializing {\\n        token = tokenAddress;\\n    }\\n\\n    function _getVotes(\\n        address account,\\n        uint256 blockNumber,\\n        bytes memory /*params*/\\n    ) internal view virtual override returns (uint256) {\\n        return token.getPastVotes(account, blockNumber);\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xc2841a280fa0ad399f2e51efd2535104a4201b137c089da86c9864532f70636f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506154cd806100206000396000f3fe6080604052600436106102ab5760003560e01c806301ffc9a71461031957806302a251a31461034e578063034201811461036d57806304e108dc1461038d57806305106e53146103ad57806306f3f9e6146103cd57806306fdde03146103ed5780630ff3dc011461040f57806312a26e5d1461043c578063160cbed71461045c5780631b2d17281461047c5780632016a0d2146104925780632656227d146104b25780632d63f693146104c55780632e559b99146104e55780632ee3e71d146104fa5780632fe3e26114610514578063387dd9e9146105485780633932abb1146105685780633bccf4fd1461057c5780633e4f49e61461059757806343859632146105c4578063496911bb1461060f578063527e098f1461062f578063544ffc9c1461064f57806354fd4d50146106a557806356781388146106ba5780635eacd3c6146106da5780635f398a14146106fa57806360c4247f1461071a5780637b3c71d31461073a5780637b9bf7941461075a5780637d5e81e21461076f57806381894d341461078f57806396537303146107a457806397c3d334146107c4578063990581d4146107d85780639a802a6d146107f8578063a3e857da14610818578063a7713a7014610850578063a890c91014610865578063aa10701a14610885578063ab58fb8e1461089a578063acabafb6146108ba578063aeb275c8146108da578063b58131b0146108ef578063c01f9e3714610903578063c28bc2fa14610923578063c59057e414610936578063d33219b414610956578063d87b33ec14610978578063dd4e2ba51461098f578063deaaa7cc146109d5578063df74874914610a09578063e041d6dc14610a20578063e12a6b7714610a37578063eb9019d414610a57578063f27a0c9214610a77578063f8ce560a14610a8c578063fc0c546a14610aac57600080fd5b3661031457306102b9610acd565b6001600160a01b0316146103125760405162461bcd60e51b815260206004820152601b60248201527a31b0b71037b7363c9031b0b63632b210313c9033b7bb32b93737b960291b60448201526064015b60405180910390fd5b005b600080fd5b34801561032557600080fd5b506103396103343660046142ea565b610adc565b60405190151581526020015b60405180910390f35b34801561035a57600080fd5b50611c205b604051908152602001610345565b34801561037957600080fd5b5061035f610388366004614420565b610aed565b34801561039957600080fd5b506103126103a83660046144c6565b610b27565b3480156103b957600080fd5b5061035f6103c83660046144ef565b610bb4565b3480156103d957600080fd5b506103126103e8366004614511565b610be5565b3480156103f957600080fd5b50610402610c6f565b6040516103459190614570565b34801561041b57600080fd5b5061035f61042a366004614511565b600090815260cf602052604090205490565b34801561044857600080fd5b506103126104573660046144c6565b610d01565b34801561046857600080fd5b5061035f610477366004614709565b610da1565b34801561048857600080fd5b5061035f60d05481565b34801561049e57600080fd5b506103126104ad366004614798565b610fa5565b61035f6104c0366004614709565b61115d565b3480156104d157600080fd5b5061035f6104e0366004614511565b611251565b3480156104f157600080fd5b5060ce5461035f565b34801561050657600080fd5b5060d4546103399060ff1681565b34801561052057600080fd5b5061035f7fb3b3f3b703cd84ce352197dcff232b1b5d3cfb2025ce47cf04742d0651f1af8881565b34801561055457600080fd5b5061035f610563366004614511565b611288565b34801561057457600080fd5b50600061035f565b34801561058857600080fd5b5061035f610388366004614820565b3480156105a357600080fd5b506105b76105b2366004614511565b6112a9565b6040516103459190614884565b3480156105d057600080fd5b506103396105df3660046148ac565b6000828152610139602090815260408083206001600160a01b038516845260030190915290205460ff1692915050565b34801561061b57600080fd5b5061031261062a3660046148dc565b6112b4565b34801561063b57600080fd5b5061031261064a366004614927565b611758565b34801561065b57600080fd5b5061068a61066a366004614511565b600090815261013960205260409020805460018201546002909201549092565b60408051938452602084019290925290820152606001610345565b3480156106b157600080fd5b5061040261184e565b3480156106c657600080fd5b5061035f6106d536600461498a565b611869565b3480156106e657600080fd5b506103126106f5366004614511565b611892565b34801561070657600080fd5b5061035f6107153660046149b6565b61195f565b34801561072657600080fd5b5061035f610735366004614511565b6119b4565b34801561074657600080fd5b5061035f610755366004614a39565b611a4f565b34801561076657600080fd5b50610402611aa1565b34801561077b57600080fd5b5061035f61078a366004614a92565b611b30565b34801561079b57600080fd5b50610312611b6a565b3480156107b057600080fd5b506103126107bf366004614511565b611bf4565b3480156107d057600080fd5b50606461035f565b3480156107e457600080fd5b506103126107f3366004614511565b611c77565b34801561080457600080fd5b5061035f610813366004614b0f565b611d44565b34801561082457600080fd5b5060cb54610838906001600160401b031681565b6040516001600160401b039091168152602001610345565b34801561085c57600080fd5b5061035f611d5b565b34801561087157600080fd5b50610312610880366004614b67565b611d88565b34801561089157600080fd5b5060d35461035f565b3480156108a657600080fd5b5061035f6108b5366004614511565b611e0f565b3480156108c657600080fd5b5061035f6108d5366004614511565b611eab565b3480156108e657600080fd5b50610402611ebb565b3480156108fb57600080fd5b50600161035f565b34801561090f57600080fd5b5061035f61091e366004614511565b611ec9565b610312610931366004614b84565b611ef8565b34801561094257600080fd5b5061035f610951366004614709565b612024565b34801561096257600080fd5b5061096b61205e565b6040516103459190614bc7565b34801561098457600080fd5b5061035f6101d75481565b34801561099b57600080fd5b506040805180820190915260208082527f737570706f72743d627261766f2671756f72756d3d666f722c6162737461696e90820152610402565b3480156109e157600080fd5b5061035f7f150214d74d59b7d1e90c73fc22ef3d991dd0a76b046543d4d80ab92d2a50328f81565b348015610a1557600080fd5b5061035f6101d85481565b348015610a2c57600080fd5b5061035f6101d95481565b348015610a4357600080fd5b5061035f610a52366004614511565b61206e565b348015610a6357600080fd5b5061035f610a72366004614bdb565b6123a9565b348015610a8357600080fd5b5061035f6123b5565b348015610a9857600080fd5b5061035f610aa7366004614511565b612424565b348015610ab857600080fd5b506101065461096b906001600160a01b031681565b6000610ad761205e565b905090565b6000610ae78261242f565b92915050565b60405162461bcd60e51b815260206004820152600c60248201526b6e6f7420706f737369626c6560a01b6044820152600090606401610309565b610b2f610acd565b6001600160a01b0316336001600160a01b031614610b5f5760405162461bcd60e51b815260040161030990614c07565b30610b68610acd565b6001600160a01b031614610ba55760008036604051610b88929190614c39565b604051809103902090505b80610b9e60d1612454565b03610b9357505b6001600160401b03166101d955565b60cf6020528160005260406000208181548110610bd057600080fd5b90600052602060002001600091509150505481565b610bed610acd565b6001600160a01b0316336001600160a01b031614610c1d5760405162461bcd60e51b815260040161030990614c07565b30610c26610acd565b6001600160a01b031614610c635760008036604051610c46929190614c39565b604051809103902090505b80610c5c60d1612454565b03610c5157505b610c6c816124ba565b50565b606060cc8054610c7e90614c49565b80601f0160208091040260200160405190810160405280929190818152602001828054610caa90614c49565b8015610cf75780601f10610ccc57610100808354040283529160200191610cf7565b820191906000526020600020905b815481529060010190602001808311610cda57829003601f168201915b5050505050905090565b610d09610acd565b6001600160a01b0316336001600160a01b031614610d395760405162461bcd60e51b815260040161030990614c07565b30610d42610acd565b6001600160a01b031614610d7f5760008036604051610d62929190614c39565b604051809103902090505b80610d7860d1612454565b03610d6d57505b60cb80546001600160401b0319166001600160401b0392909216919091179055565b600080610db086868686612024565b90506004610dbd826112a9565b6007811115610dce57610dce61486e565b14610deb5760405162461bcd60e51b815260040161030990614c83565b6101a0546040805163793d064960e11b815290516000926001600160a01b03169163f27a0c929160048083019260209291908290030181865afa158015610e36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e5a9190614cb4565b6101a05460405163b1c5f42760e01b81529192506001600160a01b03169063b1c5f42790610e95908a908a908a906000908b90600401614d96565b602060405180830381865afa158015610eb2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed69190614cb4565b60008381526101a16020526040808220929092556101a05491516308f2a0bb60e41b81526001600160a01b0390921691638f2a0bb091610f23918b918b918b91908b908990600401614de4565b600060405180830381600087803b158015610f3d57600080fd5b505af1158015610f51573d6000803e3d6000fd5b505050507f9a2e42fd6722813d69113e7d0079d3d940171428df7373df9c7f7617cfda2892828242610f839190614e52565b6040805192835260208301919091520160405180910390a15095945050505050565b600054610100900460ff1615808015610fc55750600054600160ff909116105b80610fdf5750303b158015610fdf575060005460ff166001145b6110425760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610309565b6000805460ff191660011790558015611065576000805461ff0019166101001790555b6101d480546001600160a01b0387166001600160a01b03199091161790556101d6805460ff1916905560cb80546001600160401b03191661c4e017905560146101d78190556101d855620313806101d95560408051808201909152600c81526b466c6174466565537461636b60a01b60208201526110e2906125d4565b6110eb8561262b565b6110f361265b565b6110fd6005612684565b611106846126b4565b61111083836126e4565b8015611156576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b60008061116c86868686612024565b90506000611179826112a9565b9050600481600781111561118f5761118f61486e565b14806111ac575060058160078111156111aa576111aa61486e565b145b6111c85760405162461bcd60e51b815260040161030990614c83565b600082815260cd602052604090819020600201805461ff001916610100179055517f712ae1383f79ac853f8d882153778e0260ef8f03b504e2866e0593e04d2b291f906112189084815260200190565b60405180910390a161122d8288888888612a92565b61123a8288888888612b33565b6112478288888888612b62565b5095945050505050565b600081815260cd602090815260408083208151928301909152546001600160401b0316908190525b6001600160401b031692915050565b60ce818154811061129857600080fd5b600091825260209091200154905081565b6000610ae782612b91565b60d45460ff166112d65760405162461bcd60e51b815260040161030990614e65565b6101d4546040516375ebee2960e11b81526001600160a01b039091169063ebd7dc5290611307903390600401614bc7565b602060405180830381865afa158015611324573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113489190614e94565b61138a5760405162461bcd60e51b815260206004820152601360248201527237b7363c9031b7bab731b4b61036b2b6b132b960691b6044820152606401610309565b61139643611c20614e52565b8310156113e25760405162461bcd60e51b815260206004820152601a6024820152794d757374206265206120646179206265666f726520736c6f742160301b6044820152606401610309565b6000805b60ce5482101561142e578460ce838154811061140457611404614eb6565b90600052602060002001540361141c5750600161142e565b8161142681614ecc565b9250506113e6565b806114795760405162461bcd60e51b815260206004820152601b60248201527a566f74696e6720736c6f7420646f6573206e6f742065786973742160281b6044820152606401610309565b815b60ce5461148a90600190614ee5565b8110156114ea5760ce61149e826001614e52565b815481106114ae576114ae614eb6565b906000526020600020015460ce82815481106114cc576114cc614eb6565b600091825260209091200155806114e281614ecc565b91505061147b565b5060ce8054806114fc576114fc614ef8565b60019003818190600052602060002001600090559055600060cf600087815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561157157602002820191906000526020600020905b81548152602001906001019080831161155d575b505050600089815260cf6020526040812093945061159293925090506142bc565b600061159c612cde565b905060005b825181101561171357600060cd60008584815181106115c2576115c2614eb6565b60209081029190910181015182528181019290925260409081016000908120825193840190925281546001600160401b03169283905290925061160485612d94565b90506000611613611c20612d94565b61161d9083614f0e565b90506116298483612e00565b6116366001850182612e00565b600086815260cf60205260409020875188908790811061165857611658614eb6565b6020908102919091018101518254600181018455600093845291909220015586517f53982bcc38da32ef033ffe2a31abe0b4704a5da42de9e54f28f69c1253307b37908890879081106116ad576116ad614eb6565b60209081029190910181015160408051928301905286546001600160401b031691829052908590604080519384526001600160401b03928316602085015291169082015260600160405180910390a150505050808061170b90614ecc565b9150506115a1565b507fee810d41c3fb919057fecdc242e74ea856ae93f10c8be7192ffe22244bd93c2b87878760405161174793929190614f35565b60405180910390a150505050505050565b611760610acd565b6001600160a01b0316336001600160a01b0316146117905760405162461bcd60e51b815260040161030990614c07565b30611799610acd565b6001600160a01b0316146117d657600080366040516117b9929190614c39565b604051809103902090505b806117cf60d1612454565b036117c457505b6101d56117e38382614fb6565b506101da6117f18282614fb6565b506101d56040516118029190615075565b60405180910390206101da60405161181a9190615075565b604051908190038120907f20ef4846bccbf147482caf1cceca1dbc8b3c065fc5b6915a07485464545ebaa090600090a35050565b6040805180820190915260018152603160f81b602082015290565b60008033905061188a84828560405180602001604052806000815250612e1d565b949350505050565b61189a610acd565b6001600160a01b0316336001600160a01b0316146118ca5760405162461bcd60e51b815260040161030990614c07565b306118d3610acd565b6001600160a01b03161461191057600080366040516118f3929190614c39565b604051809103902090505b8061190960d1612454565b036118fe57505b60648111156119595760405162461bcd60e51b815260206004820152601560248201527406d757374206265206c657373207468616e2031303605c1b6044820152606401610309565b6101d855565b6000803390506119a987828888888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a9250612e37915050565b979650505050505050565b61016d546000908082036119cd57505061016c54919050565b600061016d6119dd600184614ee5565b815481106119ed576119ed614eb6565b60009182526020918290206040805180820190915291015463ffffffff8116808352600160201b9091046001600160e01b03169282019290925291508410611a4357602001516001600160e01b03169392505050565b61188a61016d85612fce565b600080339050611a9786828787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612e1d92505050565b9695505050505050565b6101da8054611aaf90614c49565b80601f0160208091040260200160405190810160405280929190818152602001828054611adb90614c49565b8015611b285780601f10611afd57610100808354040283529160200191611b28565b820191906000526020600020905b815481529060010190602001808311611b0b57829003601f168201915b505050505081565b60d45460009060ff16611b555760405162461bcd60e51b815260040161030990614e65565b611b618585858561308e565b95945050505050565b611b72610acd565b6001600160a01b0316336001600160a01b031614611ba25760405162461bcd60e51b815260040161030990614c07565b30611bab610acd565b6001600160a01b031614611be85760008036604051611bcb929190614c39565b604051809103902090505b80611be160d1612454565b03611bd657505b60d4805460ff19169055565b611bfc610acd565b6001600160a01b0316336001600160a01b031614611c2c5760405162461bcd60e51b815260040161030990614c07565b30611c35610acd565b6001600160a01b031614611c725760008036604051611c55929190614c39565b604051809103902090505b80611c6b60d1612454565b03611c6057505b60d055565b611c7f610acd565b6001600160a01b0316336001600160a01b031614611caf5760405162461bcd60e51b815260040161030990614c07565b30611cb8610acd565b6001600160a01b031614611cf55760008036604051611cd8929190614c39565b604051809103902090505b80611cee60d1612454565b03611ce357505b6014811115611d3e5760405162461bcd60e51b815260206004820152601560248201527406d75737474206265206c657373207468616e20323605c1b6044820152606401610309565b6101d755565b6000611d518484846132ed565b90505b9392505050565b61016d5460009015611d8057611d7261016d613364565b6001600160e01b0316905090565b5061016c5490565b611d90610acd565b6001600160a01b0316336001600160a01b031614611dc05760405162461bcd60e51b815260040161030990614c07565b30611dc9610acd565b6001600160a01b031614611e065760008036604051611de9929190614c39565b604051809103902090505b80611dff60d1612454565b03611df457505b610c6c81613394565b6101a05460008281526101a1602052604080822054905163d45c443560e01b81526004810191909152909182916001600160a01b039091169063d45c443590602401602060405180830381865afa158015611e6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e929190614cb4565b905080600114611ea25780611d54565b60009392505050565b60d3818154811061129857600080fd5b6101d58054611aaf90614c49565b600081815260cd602090815260408083208151928301909152600101546001600160401b031690819052611279565b611f00610acd565b6001600160a01b0316336001600160a01b031614611f305760405162461bcd60e51b815260040161030990614c07565b30611f39610acd565b6001600160a01b031614611f765760008036604051611f59929190614c39565b604051809103902090505b80611f6f60d1612454565b03611f6457505b600080856001600160a01b0316858585604051611f94929190614c39565b60006040518083038185875af1925050503d8060008114611fd1576040519150601f19603f3d011682016040523d82523d6000602084013e611fd6565b606091505b509150915061201b82826040518060400160405280601e81526020017f52656c617920726576657274656420776974686f7574206d65737361676500008152506133ff565b50505050505050565b60008484848460405160200161203d94939291906150eb565b60408051601f19818403018152919052805160209091012095945050505050565b6101a0546001600160a01b031690565b60d45460009060ff166120935760405162461bcd60e51b815260040161030990614e65565b6101d4546040516375ebee2960e11b81526001600160a01b039091169063ebd7dc52906120c4903390600401614bc7565b602060405180830381865afa1580156120e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121059190614e94565b806121285750612113610acd565b6001600160a01b0316336001600160a01b0316145b6121745760405162461bcd60e51b815260206004820152601f60248201527f6f6e6c7920636f756e63696c206d656d626572206f7220676f7665726e6f72006044820152606401610309565b6101d9546121829043614e52565b8210156121ca5760405162461bcd60e51b8152602060048201526016602482015275416e6e6f756e63656d656e7420746f6f206c6174652160501b6044820152606401610309565b60ce546000906121dc90600190614ee5565b9050805b8360ce82815481106121f4576121f4614eb6565b9060005260206000200154036122475760405162461bcd60e51b8152602060048201526018602482015277566f746520736c6f7420616c72656164792065786973747360401b6044820152606401610309565b801561225f578061225781615136565b9150506121e0565b506000815b8460ce828154811061227857612278614eb6565b9060005260206000200154101561229b57612294816001614e52565b91506122b3565b80156122b357806122ab81615136565b915050612264565b5060ce80546001818101835560008390526000805160206153f283398151915290910186905590546122e59190614ee5565b81101561235857815b8181106123565760ce818154811061230857612308614eb6565b906000526020600020015460ce8260016123229190614e52565b8154811061233257612332614eb6565b6000918252602090912001558015612356578061234e81615136565b9150506122ee565b505b8360ce828154811061236c5761236c614eb6565b90600052602060002001819055506000805160206154128339815191528460405161239991815260200190565b60405180910390a1509192915050565b6000611d548383613418565b6101a0546040805163793d064960e11b815290516000926001600160a01b03169163f27a0c929160048083019260209291908290030181865afa158015612400573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad79190614cb4565b6000610ae782613434565b60006001600160e01b03198216636e665ced60e01b1480610ae75750610ae7826134c3565b600061245f826134f9565b1561247d57604051631ed9509560e11b815260040160405180910390fd5b508054600f0b6000818152600180840160205260408220805492905583546001600160801b03191692016001600160801b03169190911790915590565b60648111156125085760405162461bcd60e51b815260206004820152601a602482015279273ab6b2b930ba37b91037bb32b9103232b737b6b4b730ba37b960311b6044820152606401610309565b6000612512611d5b565b90508015801590612524575061016d54155b1561258957604080518082019091526000815261016d90602081016125488461350e565b6001600160e01b039081169091528254600181018455600093845260209384902083519490930151909116600160201b0263ffffffff909316929092179101555b61259561016d83613577565b505060408051828152602081018490527f0553476bf02ef2726e8ce5ced78d63e26e602e4a2257b1f559418e24b4633997910160405180910390a15050565b600054610100900460ff166125fb5760405162461bcd60e51b81526004016103099061514d565b61260c8161260761184e565b6135ad565b612615816135ee565b5061c4e060d05560d4805460ff19166001179055565b600054610100900460ff166126525760405162461bcd60e51b81526004016103099061514d565b610c6c81613625565b600054610100900460ff166126825760405162461bcd60e51b81526004016103099061514d565b565b600054610100900460ff166126ab5760405162461bcd60e51b81526004016103099061514d565b610c6c8161366f565b600054610100900460ff166126db5760405162461bcd60e51b81526004016103099061514d565b610c6c81613696565b6101d65460ff16156127275760405162461bcd60e51b815260206004820152600c60248201526b616c726561647920646f6e6560a01b6044820152606401610309565b600060d054436127379190614e52565b612742906001614e52565b60ce80546001810182556000919091526000805160206153f2833981519152018190556040518181529091506000805160206154128339815191529060200160405180910390a16000838360405160240161279e929190615198565b60408051601f19818403018152918152602080830180516001600160e01b031663527e098f60e01b179052815160608101909252602680835292935060009290615472908301396040805160018082528183019092529192506000919060208083019080368337019050509050308160008151811061281f5761281f614eb6565b6001600160a01b03929092166020928302919091019091015260408051600180825281830190925260009181602001602082028036833701905050905060008160008151811061287157612871614eb6565b6020908102919091010152604080516001808252818301909252600091816020015b606081526020019060019003908161289357905050905084816000815181106128be576128be614eb6565b602002602001018190525060006128de8484848880519060200120612024565b905060006128ec82846136bd565b90506000805160206154328339815191528233878789516001600160401b0381111561291a5761291a61436b565b60405190808252806020026020018201604052801561294d57816020015b60608152602001906001900390816129385790505b50888760000160000160009054906101000a90046001600160401b03168860010160000160009054906101000a90046001600160401b03168e60405161299b999897969594939291906151bd565b60405180910390a160028082015460ff16908111156129bc576129bc61486e565b336001600160a01b03168360008051602061545283398151915288888a516001600160401b038111156129f1576129f161436b565b604051908082528060200260200182016040528015612a2457816020015b6060815260200190600190039081612a0f5790505b50898860000160000160009054906101000a90046001600160401b03168960010160000160009054906101000a90046001600160401b03168f604051612a709796959493929190615260565b60405180910390a450506101d6805460ff191660011790555050505050505050565b30612a9b610acd565b6001600160a01b0316146111565760005b8451811015612b2b57306001600160a01b0316858281518110612ad157612ad1614eb6565b60200260200101516001600160a01b031603612b1b57612b1b838281518110612afc57612afc614eb6565b60200260200101518051906020012060d1613a4a90919063ffffffff16565b612b2481614ecc565b9050612aac565b505050505050565b60d45460ff16612b555760405162461bcd60e51b815260040161030990614e65565b6111568585858585613a86565b30612b6b610acd565b6001600160a01b03161461115657612b8360d16134f9565b61115657600060d155611156565b600080612b9d83613afb565b90506004816007811115612bb357612bb361486e565b14612bbe5792915050565b60008381526101a1602052604090205480612bda575092915050565b6101a054604051632ab0f52960e01b8152600481018390526001600160a01b0390911690632ab0f52990602401602060405180830381865afa158015612c24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c489190614e94565b15612c57575060079392505050565b6101a054604051632c258a9f60e11b8152600481018390526001600160a01b039091169063584b153e90602401602060405180830381865afa158015612ca1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cc59190614e94565b15612cd4575060059392505050565b5060029392505050565b6000805b60ce54811015612d545760d05460ce8281548110612d0257612d02614eb6565b9060005260206000200154612d179190614ee5565b431015612d425760ce8181548110612d3157612d31614eb6565b906000526020600020015491505090565b80612d4c81614ecc565b915050612ce2565b5060405162461bcd60e51b8152602060048201526014602482015273139bc81d9bdd1a5b99c81cdb1bdd08199bdd5b9960621b6044820152606401610309565b60006001600160401b03821115612dfc5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203660448201526534206269747360d01b6064820152608401610309565b5090565b81546001600160401b0319166001600160401b0391909116179055565b6000611b6185858585604051806020016040528060008152505b600085815260cd602052604081206001612e50886112a9565b6007811115612e6157612e6161486e565b14612eaa5760405162461bcd60e51b8152602060048201526019602482015278566f7465206e6f742063757272656e746c792061637469766560381b6044820152606401610309565b604080516020810190915281546001600160401b031690819052600090612ed3908890866132ed565b905060008111612f185760405162461bcd60e51b815260206004820152601060248201526f6e6f20766f74696e672072696768747360801b6044820152606401610309565b612f258888888488613c19565b8351600003612f7a57866001600160a01b03167fb8e138887d0aa13bab447e82de9d5c1777041ecd21ca36ba824ff1e6c07ddda489888489604051612f6d94939291906152e6565b60405180910390a26119a9565b866001600160a01b03167fe2babfbac5889a709b63bb7f598b324e08bc5a4fb9ec647fb3cbc9ec07eb87128988848989604051612fbb95949392919061530e565b60405180910390a2979650505050505050565b600043821061301f5760405162461bcd60e51b815260206004820181905260248201527f436865636b706f696e74733a20626c6f636b206e6f7420796574206d696e65646044820152606401610309565b600061302a83613d5a565b8454909150600061303d86848385613dbf565b905080156130785761306286613054600184614ee5565b600091825260209091200190565b54600160201b90046001600160e01b031661307b565b60005b6001600160e01b03169695505050505050565b60d45460009060ff166130b35760405162461bcd60e51b815260040161030990614e65565b60006130c186868686613e1d565b905060006130cf82866136bd565b9050600080516020615432833981519152823389898b516001600160401b038111156130fd576130fd61436b565b60405190808252806020026020018201604052801561313057816020015b606081526020019060019003908161311b5790505b508654600188015460405161315c9796959493928e926001600160401b03918216929116908e906151bd565b60405180910390a160028082015460ff169081111561317d5761317d61486e565b336001600160a01b0316836000805160206154528339815191528a8a8c516001600160401b038111156131b2576131b261436b565b6040519080825280602002602001820160405280156131e557816020015b60608152602001906001900390816131d05790505b508754600189015460405161320f959493928f926001600160401b03918216929116908f90615260565b60405180910390a4600160028083015460ff16908111156132325761323261486e565b0361124757336001600160a01b0316827faf70b28462b17da839f4faad55a92330c675fb47d34733424983f6a314a1bd4389898b516001600160401b0381111561327e5761327e61436b565b6040519080825280602002602001820160405280156132b157816020015b606081526020019060019003908161329c5790505b50865460018801546040516132db959493928e926001600160401b03918216929116908e90615260565b60405180910390a35095945050505050565b61010654604051630748d63560e31b81526001600160a01b038581166004830152602482018590526000921690633a46b1a890604401602060405180830381865afa158015613340573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d519190614cb4565b80546000908015611ea25761337e83613054600184614ee5565b54600160201b90046001600160e01b0316611d54565b6101a054604080516001600160a01b03928316815291831660208301527f08f74ea46ef7894f65eabfb5e6e695de773a000b47c529ab559178069b226401910160405180910390a16101a080546001600160a01b0319166001600160a01b0392909216919091179055565b6060831561340e575081611d54565b611d548383613f19565b6000611d548383604051806020016040528060008152506132ed565b60006064613441836119b4565b61010654604051632394e7a360e21b8152600481018690526001600160a01b0390911690638e539e8c90602401602060405180830381865afa15801561348b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134af9190614cb4565b6134b99190615354565b610ae7919061536b565b60006001600160e01b0319821663bf26d89760e01b1480610ae757506001600160e01b031982166379dd796f60e01b1492915050565b54600f81810b600160801b909204900b131590565b60006001600160e01b03821115612dfc5760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20326044820152663234206269747360c81b6064820152608401610309565b6000806135958461358743613d5a565b6135908661350e565b613f43565b6001600160e01b0391821693501690505b9250929050565b600054610100900460ff166135d45760405162461bcd60e51b81526004016103099061514d565b815160209283012081519190920120603391909155603455565b600054610100900460ff166136155760405162461bcd60e51b81526004016103099061514d565b60cc6136218282614fb6565b5050565b600054610100900460ff1661364c5760405162461bcd60e51b81526004016103099061514d565b61010680546001600160a01b0319166001600160a01b0392909216919091179055565b600054610100900460ff16610c635760405162461bcd60e51b81526004016103099061514d565b600054610100900460ff16611e065760405162461bcd60e51b81526004016103099061514d565b600082815260cd60209081526040808320815192830190915280546001600160401b031691829052901561372d5760405162461bcd60e51b815260206004820152601760248201527650726f706f73616c20616c72656164792065786973747360481b6044820152606401610309565b600080845160030361380b5760008560008151811061374e5761374e614eb6565b602002602001015161375f9061538d565b905060008660018151811061377657613776614eb6565b60200260200101516137879061538d565b905060008760028151811061379e5761379e614eb6565b60200260200101516137af9061538d565b90506001600160e01b031983166305f0caad60e31b1480156137e157506001600160e01b0319821663f1d3b27d60e01b145b80156137fd57506001600160e01b03198116632062534d60e21b145b1561380757600193505b5050505b6001811515146139085760005b855181101561390657600086828151811061383557613835614eb6565b60200260200101516138469061538d565b9050631ed5948960e01b6001600160e01b031982160161386a576001935050613906565b6001600160e01b031981166305f0caad60e31b148061389957506001600160e01b0319811663f1d3b27d60e01b145b806138b457506001600160e01b03198116632062534d60e21b145b156138f35760405162461bcd60e51b815260206004820152600f60248201526e57726f6e672066756e6374696f6e7360881b6044820152606401610309565b50806138fe81614ecc565b915050613818565b505b81156139ab57600061391981612d94565b61392243612d94565b61392c9190614f0e565b60cb54909150600090613948906001600160401b031683614f0e565b90506139548583612e00565b6139616001860182612e00565b505060028301805460ff1916600190811790915560d3805491820181556000527f915c3eb987b20e1af620c1403197bf687fb7f18513b3a73fde6e78c7072c41a601869055613a40565b60006139b5612cde565b905060006139c282612d94565b905060006139d1611c20612d94565b6139db9083614f0e565b90506139e78683612e00565b6139f46001870182612e00565b8315613a0f576002868101805460ff19169091179055613a1c565b60028601805460ff191690555b5050600090815260cf60209081526040822080546001810182559083529120018690555b5090949350505050565b8154600160801b90819004600f0b6000818152600180860160205260409091209390935583546001600160801b03908116939091011602179055565b6101a05460405163e38335e560e01b81526001600160a01b039091169063e38335e5903490613ac2908890889088906000908990600401614d96565b6000604051808303818588803b158015613adb57600080fd5b505af1158015613aef573d6000803e3d6000fd5b50505050505050505050565b600081815260cd602052604081206002810154610100900460ff1615613b245750600792915050565b600281015462010000900460ff1615613b405750600292915050565b6000613b4b84611251565b905080600003613b9d5760405162461bcd60e51b815260206004820152601d60248201527f476f7665726e6f723a20756e6b6e6f776e2070726f706f73616c2069640000006044820152606401610309565b438110613bae575060009392505050565b6000613bb985611ec9565b9050438110613bcd57506001949350505050565b613bd6856140e0565b8015613bf657506000858152610139602052604090208054600190910154115b15613c0657506004949350505050565b506003949350505050565b505050919050565b6000858152610139602090815260408083206001600160a01b0388168452600381019092529091205460ff1615613c865760405162461bcd60e51b8152602060048201526011602482015270159bdd1948185b1c9958591e4818d85cdd607a1b6044820152606401610309565b6001600160a01b03851660009081526003820160205260409020805460ff1916600117905560ff8416613cd25782816000016000828254613cc79190614e52565b90915550612b2b9050565b60001960ff851601613cf25782816001016000828254613cc79190614e52565b60011960ff851601613d125782816002016000828254613cc79190614e52565b60405162461bcd60e51b815260206004820152601f60248201527f496e76616c69642076616c756520666f7220656e756d20566f746554797065006044820152606401610309565b600063ffffffff821115612dfc5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b6064820152608401610309565b60005b81831015613e15576000613dd68484614269565b60008781526020902090915063ffffffff86169082015463ffffffff161115613e0157809250613e0f565b613e0c816001614e52565b93505b50613dc2565b509392505050565b60006001613e3033610a72600143614ee5565b1015613e7e5760405162461bcd60e51b815260206004820152601e60248201527f50726f706f73657220766f7465732062656c6f77207468726573686f6c6400006044820152606401610309565b6000613e938686868680519060200120612024565b90508451865114613eb65760405162461bcd60e51b8152600401610309906153c0565b8351865114613ed75760405162461bcd60e51b8152600401610309906153c0565b6000865111611b615760405162461bcd60e51b815260206004820152600e60248201526d115b5c1d1e481c1c9bdc1bdcd85b60921b6044820152606401610309565b815115613f295781518083602001fd5b8060405162461bcd60e51b81526004016103099190614570565b825460009081908015614083576000613f6187613054600185614ee5565b60408051808201909152905463ffffffff808216808452600160201b9092046001600160e01b031660208401529192509087161015613fdc5760405162461bcd60e51b8152602060048201526017602482015276436865636b706f696e743a20696e76616c6964206b657960481b6044820152606401610309565b805163ffffffff8088169116036140245784613ffd88613054600186614ee5565b80546001600160e01b0392909216600160201b0263ffffffff909216919091179055614073565b6040805180820190915263ffffffff80881682526001600160e01b0380881660208085019182528b54600181018d5560008d81529190912094519151909216600160201b029216919091179101555b6020015192508391506140d89050565b50506040805180820190915263ffffffff80851682526001600160e01b0380851660208085019182528854600181018a5560008a815291822095519251909316600160201b0291909316179201919091559050815b935093915050565b600081815260cd602052604081206002015460ff16818160028111156141085761410861486e565b0361411657611d5483614284565b6000838152610139602052604081209061412f85611251565b9050600060018460028111156141475761414761486e565b0361415657506101d7546141c1565b600284600281111561416a5761416a61486e565b0361417957506101d8546141c1565b60405162461bcd60e51b815260206004820152601f60248201527f4e6f7420696d706c656d656e7465642070726f706f73616c2071756f72756d006044820152606401610309565b6000606461010654604051632394e7a360e21b81526004810186905284916001600160a01b031690638e539e8c90602401602060405180830381865afa15801561420f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142339190614cb4565b61423d9190615354565b614247919061536b565b90508360020154846001015461425d9190614e52565b10159695505050505050565b6000614278600284841861536b565b611d5490848416614e52565b600081815261013960205260408120600281015460018201546142a79190614e52565b6142b3610aa785611251565b11159392505050565b5080546000825590600052602060002090810190610c6c91905b80821115612dfc57600081556001016142d6565b6000602082840312156142fc57600080fd5b81356001600160e01b031981168114611d5457600080fd5b803560ff8116811461432557600080fd5b919050565b60008083601f84011261433c57600080fd5b5081356001600160401b0381111561435357600080fd5b6020830191508360208285010111156135a657600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156143a9576143a961436b565b604052919050565b600082601f8301126143c257600080fd5b81356001600160401b038111156143db576143db61436b565b6143ee601f8201601f1916602001614381565b81815284602083860101111561440357600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060008060008060e0898b03121561443c57600080fd5b8835975061444c60208a01614314565b965060408901356001600160401b038082111561446857600080fd5b6144748c838d0161432a565b909850965060608b013591508082111561448d57600080fd5b5061449a8b828c016143b1565b9450506144a960808a01614314565b925060a0890135915060c089013590509295985092959890939650565b6000602082840312156144d857600080fd5b81356001600160401b0381168114611d5457600080fd5b6000806040838503121561450257600080fd5b50508035926020909101359150565b60006020828403121561452357600080fd5b5035919050565b6000815180845260005b8181101561455057602081850181015186830182015201614534565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000611d54602083018461452a565b60006001600160401b0382111561459c5761459c61436b565b5060051b60200190565b6001600160a01b0381168114610c6c57600080fd5b600082601f8301126145cc57600080fd5b813560206145e16145dc83614583565b614381565b82815260059290921b8401810191818101908684111561460057600080fd5b8286015b84811015614624578035614617816145a6565b8352918301918301614604565b509695505050505050565b600082601f83011261464057600080fd5b813560206146506145dc83614583565b82815260059290921b8401810191818101908684111561466f57600080fd5b8286015b848110156146245780358352918301918301614673565b600082601f83011261469b57600080fd5b813560206146ab6145dc83614583565b82815260059290921b840181019181810190868411156146ca57600080fd5b8286015b848110156146245780356001600160401b038111156146ed5760008081fd5b6146fb8986838b01016143b1565b8452509183019183016146ce565b6000806000806080858703121561471f57600080fd5b84356001600160401b038082111561473657600080fd5b614742888389016145bb565b9550602087013591508082111561475857600080fd5b6147648883890161462f565b9450604087013591508082111561477a57600080fd5b506147878782880161468a565b949793965093946060013593505050565b600080600080608085870312156147ae57600080fd5b84356147b9816145a6565b935060208501356147c9816145a6565b925060408501356001600160401b03808211156147e557600080fd5b6147f1888389016143b1565b9350606087013591508082111561480757600080fd5b50614814878288016143b1565b91505092959194509250565b600080600080600060a0868803121561483857600080fd5b8535945061484860208701614314565b935061485660408701614314565b94979396509394606081013594506080013592915050565b634e487b7160e01b600052602160045260246000fd5b60208101600883106148a657634e487b7160e01b600052602160045260246000fd5b91905290565b600080604083850312156148bf57600080fd5b8235915060208301356148d1816145a6565b809150509250929050565b6000806000604084860312156148f157600080fd5b8335925060208401356001600160401b0381111561490e57600080fd5b61491a8682870161432a565b9497909650939450505050565b6000806040838503121561493a57600080fd5b82356001600160401b038082111561495157600080fd5b61495d868387016143b1565b9350602085013591508082111561497357600080fd5b50614980858286016143b1565b9150509250929050565b6000806040838503121561499d57600080fd5b823591506149ad60208401614314565b90509250929050565b6000806000806000608086880312156149ce57600080fd5b853594506149de60208701614314565b935060408601356001600160401b03808211156149fa57600080fd5b614a0689838a0161432a565b90955093506060880135915080821115614a1f57600080fd5b50614a2c888289016143b1565b9150509295509295909350565b60008060008060608587031215614a4f57600080fd5b84359350614a5f60208601614314565b925060408501356001600160401b03811115614a7a57600080fd5b614a868782880161432a565b95989497509550505050565b60008060008060808587031215614aa857600080fd5b84356001600160401b0380821115614abf57600080fd5b614acb888389016145bb565b95506020870135915080821115614ae157600080fd5b614aed8883890161462f565b94506040870135915080821115614b0357600080fd5b6147f18883890161468a565b600080600060608486031215614b2457600080fd5b8335614b2f816145a6565b92506020840135915060408401356001600160401b03811115614b5157600080fd5b614b5d868287016143b1565b9150509250925092565b600060208284031215614b7957600080fd5b8135611d54816145a6565b60008060008060608587031215614b9a57600080fd5b8435614ba5816145a6565b93506020850135925060408501356001600160401b03811115614a7a57600080fd5b6001600160a01b0391909116815260200190565b60008060408385031215614bee57600080fd5b8235614bf9816145a6565b946020939093013593505050565b602080825260189082015277476f7665726e6f723a206f6e6c79476f7665726e616e636560401b604082015260600190565b8183823760009101908152919050565b600181811c90821680614c5d57607f821691505b602082108103614c7d57634e487b7160e01b600052602260045260246000fd5b50919050565b602080825260179082015276141c9bdc1bdcd85b081b9bdd081cdd58d8d95cdcd99d5b604a1b604082015260600190565b600060208284031215614cc657600080fd5b5051919050565b600081518084526020808501945080840160005b83811015614d065781516001600160a01b031687529582019590820190600101614ce1565b509495945050505050565b600081518084526020808501945080840160005b83811015614d0657815187529582019590820190600101614d25565b600081518084526020808501808196508360051b8101915082860160005b85811015614d89578284038952614d7784835161452a565b98850198935090840190600101614d5f565b5091979650505050505050565b60a081526000614da960a0830188614ccd565b8281036020840152614dbb8188614d11565b90508281036040840152614dcf8187614d41565b60608401959095525050608001529392505050565b60c081526000614df760c0830189614ccd565b8281036020840152614e098189614d11565b90508281036040840152614e1d8188614d41565b60608401969096525050608081019290925260a0909101529392505050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610ae757610ae7614e3c565b6020808252601590820152745468652044414f206973206e6f742061637469766560581b604082015260600190565b600060208284031215614ea657600080fd5b81518015158114611d5457600080fd5b634e487b7160e01b600052603260045260246000fd5b600060018201614ede57614ede614e3c565b5060010190565b81810381811115610ae757610ae7614e3c565b634e487b7160e01b600052603160045260246000fd5b6001600160401b03818116838216019080821115614f2e57614f2e614e3c565b5092915050565b83815260406020820152816040820152818360608301376000818301606090810191909152601f909201601f1916010192915050565b601f821115614fb157600081815260208120601f850160051c81016020861015614f925750805b601f850160051c820191505b81811015612b2b57828155600101614f9e565b505050565b81516001600160401b03811115614fcf57614fcf61436b565b614fe381614fdd8454614c49565b84614f6b565b602080601f83116001811461501857600084156150005750858301515b600019600386901b1c1916600185901b178555612b2b565b600085815260208120601f198616915b8281101561504757888601518255948401946001909101908401615028565b50858210156150655787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600080835461508381614c49565b6001828116801561509b57600181146150b0576150df565b60ff19841687528215158302870194506150df565b8760005260208060002060005b858110156150d65781548a8201529084019082016150bd565b50505082870194505b50929695505050505050565b6080815260006150fe6080830187614ccd565b82810360208401526151108187614d11565b905082810360408401526151248186614d41565b91505082606083015295945050505050565b60008161514557615145614e3c565b506000190190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6040815260006151ab604083018561452a565b8281036020840152611b61818561452a565b8981526001600160a01b0389166020820152610120604082018190526000906151e88382018b614ccd565b905082810360608401526151fc818a614d11565b905082810360808401526152108189614d41565b905082810360a08401526152248188614d41565b6001600160401b0387811660c0860152861660e08501528381036101008501529050615250818561452a565b9c9b505050505050505050505050565b60e08152600061527360e083018a614ccd565b8281036020840152615285818a614d11565b905082810360408401526152998189614d41565b905082810360608401526152ad8188614d41565b6001600160401b038781166080860152861660a085015283810360c085015290506152d8818561452a565b9a9950505050505050505050565b84815260ff84166020820152826040820152608060608201526000611a97608083018461452a565b85815260ff8516602082015283604082015260a06060820152600061533660a083018561452a565b8281036080840152615348818561452a565b98975050505050505050565b8082028115828204841417610ae757610ae7614e3c565b60008261538857634e487b7160e01b600052601260045260246000fd5b500490565b805160208201516001600160e01b03198082169291906004831015613c115760049290920360031b82901b161692915050565b602080825260179082015276092dcecc2d8d2c840e0e4dee0dee6c2d840d8cadccee8d604b1b60408201526060019056fed36cd1c74ef8d7326d8021b776c18fb5a5724b7f7bc93c2f42e43e10ef27d12af92ed14e81753ef9799e397ab10278c4107b6807c59683338ced6b3598297c6b7d84a6263ae0d98d3329bd7b46bb4e8d6f98cd35a7adb45c274c8b7fd5ebd5e02546e02ec051925f1c459bd5da30927611040a32607c07d26172816e97d07bd1466f756e64696e672050726f706f73616c2e2053657420696e697469616c2062796c6177732ea2646970667358221220c23f519a7acd61255f61e677d4216ae5c595c95627cd44fad50699f0ac76251464736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106102ab5760003560e01c806301ffc9a71461031957806302a251a31461034e578063034201811461036d57806304e108dc1461038d57806305106e53146103ad57806306f3f9e6146103cd57806306fdde03146103ed5780630ff3dc011461040f57806312a26e5d1461043c578063160cbed71461045c5780631b2d17281461047c5780632016a0d2146104925780632656227d146104b25780632d63f693146104c55780632e559b99146104e55780632ee3e71d146104fa5780632fe3e26114610514578063387dd9e9146105485780633932abb1146105685780633bccf4fd1461057c5780633e4f49e61461059757806343859632146105c4578063496911bb1461060f578063527e098f1461062f578063544ffc9c1461064f57806354fd4d50146106a557806356781388146106ba5780635eacd3c6146106da5780635f398a14146106fa57806360c4247f1461071a5780637b3c71d31461073a5780637b9bf7941461075a5780637d5e81e21461076f57806381894d341461078f57806396537303146107a457806397c3d334146107c4578063990581d4146107d85780639a802a6d146107f8578063a3e857da14610818578063a7713a7014610850578063a890c91014610865578063aa10701a14610885578063ab58fb8e1461089a578063acabafb6146108ba578063aeb275c8146108da578063b58131b0146108ef578063c01f9e3714610903578063c28bc2fa14610923578063c59057e414610936578063d33219b414610956578063d87b33ec14610978578063dd4e2ba51461098f578063deaaa7cc146109d5578063df74874914610a09578063e041d6dc14610a20578063e12a6b7714610a37578063eb9019d414610a57578063f27a0c9214610a77578063f8ce560a14610a8c578063fc0c546a14610aac57600080fd5b3661031457306102b9610acd565b6001600160a01b0316146103125760405162461bcd60e51b815260206004820152601b60248201527a31b0b71037b7363c9031b0b63632b210313c9033b7bb32b93737b960291b60448201526064015b60405180910390fd5b005b600080fd5b34801561032557600080fd5b506103396103343660046142ea565b610adc565b60405190151581526020015b60405180910390f35b34801561035a57600080fd5b50611c205b604051908152602001610345565b34801561037957600080fd5b5061035f610388366004614420565b610aed565b34801561039957600080fd5b506103126103a83660046144c6565b610b27565b3480156103b957600080fd5b5061035f6103c83660046144ef565b610bb4565b3480156103d957600080fd5b506103126103e8366004614511565b610be5565b3480156103f957600080fd5b50610402610c6f565b6040516103459190614570565b34801561041b57600080fd5b5061035f61042a366004614511565b600090815260cf602052604090205490565b34801561044857600080fd5b506103126104573660046144c6565b610d01565b34801561046857600080fd5b5061035f610477366004614709565b610da1565b34801561048857600080fd5b5061035f60d05481565b34801561049e57600080fd5b506103126104ad366004614798565b610fa5565b61035f6104c0366004614709565b61115d565b3480156104d157600080fd5b5061035f6104e0366004614511565b611251565b3480156104f157600080fd5b5060ce5461035f565b34801561050657600080fd5b5060d4546103399060ff1681565b34801561052057600080fd5b5061035f7fb3b3f3b703cd84ce352197dcff232b1b5d3cfb2025ce47cf04742d0651f1af8881565b34801561055457600080fd5b5061035f610563366004614511565b611288565b34801561057457600080fd5b50600061035f565b34801561058857600080fd5b5061035f610388366004614820565b3480156105a357600080fd5b506105b76105b2366004614511565b6112a9565b6040516103459190614884565b3480156105d057600080fd5b506103396105df3660046148ac565b6000828152610139602090815260408083206001600160a01b038516845260030190915290205460ff1692915050565b34801561061b57600080fd5b5061031261062a3660046148dc565b6112b4565b34801561063b57600080fd5b5061031261064a366004614927565b611758565b34801561065b57600080fd5b5061068a61066a366004614511565b600090815261013960205260409020805460018201546002909201549092565b60408051938452602084019290925290820152606001610345565b3480156106b157600080fd5b5061040261184e565b3480156106c657600080fd5b5061035f6106d536600461498a565b611869565b3480156106e657600080fd5b506103126106f5366004614511565b611892565b34801561070657600080fd5b5061035f6107153660046149b6565b61195f565b34801561072657600080fd5b5061035f610735366004614511565b6119b4565b34801561074657600080fd5b5061035f610755366004614a39565b611a4f565b34801561076657600080fd5b50610402611aa1565b34801561077b57600080fd5b5061035f61078a366004614a92565b611b30565b34801561079b57600080fd5b50610312611b6a565b3480156107b057600080fd5b506103126107bf366004614511565b611bf4565b3480156107d057600080fd5b50606461035f565b3480156107e457600080fd5b506103126107f3366004614511565b611c77565b34801561080457600080fd5b5061035f610813366004614b0f565b611d44565b34801561082457600080fd5b5060cb54610838906001600160401b031681565b6040516001600160401b039091168152602001610345565b34801561085c57600080fd5b5061035f611d5b565b34801561087157600080fd5b50610312610880366004614b67565b611d88565b34801561089157600080fd5b5060d35461035f565b3480156108a657600080fd5b5061035f6108b5366004614511565b611e0f565b3480156108c657600080fd5b5061035f6108d5366004614511565b611eab565b3480156108e657600080fd5b50610402611ebb565b3480156108fb57600080fd5b50600161035f565b34801561090f57600080fd5b5061035f61091e366004614511565b611ec9565b610312610931366004614b84565b611ef8565b34801561094257600080fd5b5061035f610951366004614709565b612024565b34801561096257600080fd5b5061096b61205e565b6040516103459190614bc7565b34801561098457600080fd5b5061035f6101d75481565b34801561099b57600080fd5b506040805180820190915260208082527f737570706f72743d627261766f2671756f72756d3d666f722c6162737461696e90820152610402565b3480156109e157600080fd5b5061035f7f150214d74d59b7d1e90c73fc22ef3d991dd0a76b046543d4d80ab92d2a50328f81565b348015610a1557600080fd5b5061035f6101d85481565b348015610a2c57600080fd5b5061035f6101d95481565b348015610a4357600080fd5b5061035f610a52366004614511565b61206e565b348015610a6357600080fd5b5061035f610a72366004614bdb565b6123a9565b348015610a8357600080fd5b5061035f6123b5565b348015610a9857600080fd5b5061035f610aa7366004614511565b612424565b348015610ab857600080fd5b506101065461096b906001600160a01b031681565b6000610ad761205e565b905090565b6000610ae78261242f565b92915050565b60405162461bcd60e51b815260206004820152600c60248201526b6e6f7420706f737369626c6560a01b6044820152600090606401610309565b610b2f610acd565b6001600160a01b0316336001600160a01b031614610b5f5760405162461bcd60e51b815260040161030990614c07565b30610b68610acd565b6001600160a01b031614610ba55760008036604051610b88929190614c39565b604051809103902090505b80610b9e60d1612454565b03610b9357505b6001600160401b03166101d955565b60cf6020528160005260406000208181548110610bd057600080fd5b90600052602060002001600091509150505481565b610bed610acd565b6001600160a01b0316336001600160a01b031614610c1d5760405162461bcd60e51b815260040161030990614c07565b30610c26610acd565b6001600160a01b031614610c635760008036604051610c46929190614c39565b604051809103902090505b80610c5c60d1612454565b03610c5157505b610c6c816124ba565b50565b606060cc8054610c7e90614c49565b80601f0160208091040260200160405190810160405280929190818152602001828054610caa90614c49565b8015610cf75780601f10610ccc57610100808354040283529160200191610cf7565b820191906000526020600020905b815481529060010190602001808311610cda57829003601f168201915b5050505050905090565b610d09610acd565b6001600160a01b0316336001600160a01b031614610d395760405162461bcd60e51b815260040161030990614c07565b30610d42610acd565b6001600160a01b031614610d7f5760008036604051610d62929190614c39565b604051809103902090505b80610d7860d1612454565b03610d6d57505b60cb80546001600160401b0319166001600160401b0392909216919091179055565b600080610db086868686612024565b90506004610dbd826112a9565b6007811115610dce57610dce61486e565b14610deb5760405162461bcd60e51b815260040161030990614c83565b6101a0546040805163793d064960e11b815290516000926001600160a01b03169163f27a0c929160048083019260209291908290030181865afa158015610e36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e5a9190614cb4565b6101a05460405163b1c5f42760e01b81529192506001600160a01b03169063b1c5f42790610e95908a908a908a906000908b90600401614d96565b602060405180830381865afa158015610eb2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed69190614cb4565b60008381526101a16020526040808220929092556101a05491516308f2a0bb60e41b81526001600160a01b0390921691638f2a0bb091610f23918b918b918b91908b908990600401614de4565b600060405180830381600087803b158015610f3d57600080fd5b505af1158015610f51573d6000803e3d6000fd5b505050507f9a2e42fd6722813d69113e7d0079d3d940171428df7373df9c7f7617cfda2892828242610f839190614e52565b6040805192835260208301919091520160405180910390a15095945050505050565b600054610100900460ff1615808015610fc55750600054600160ff909116105b80610fdf5750303b158015610fdf575060005460ff166001145b6110425760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610309565b6000805460ff191660011790558015611065576000805461ff0019166101001790555b6101d480546001600160a01b0387166001600160a01b03199091161790556101d6805460ff1916905560cb80546001600160401b03191661c4e017905560146101d78190556101d855620313806101d95560408051808201909152600c81526b466c6174466565537461636b60a01b60208201526110e2906125d4565b6110eb8561262b565b6110f361265b565b6110fd6005612684565b611106846126b4565b61111083836126e4565b8015611156576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b60008061116c86868686612024565b90506000611179826112a9565b9050600481600781111561118f5761118f61486e565b14806111ac575060058160078111156111aa576111aa61486e565b145b6111c85760405162461bcd60e51b815260040161030990614c83565b600082815260cd602052604090819020600201805461ff001916610100179055517f712ae1383f79ac853f8d882153778e0260ef8f03b504e2866e0593e04d2b291f906112189084815260200190565b60405180910390a161122d8288888888612a92565b61123a8288888888612b33565b6112478288888888612b62565b5095945050505050565b600081815260cd602090815260408083208151928301909152546001600160401b0316908190525b6001600160401b031692915050565b60ce818154811061129857600080fd5b600091825260209091200154905081565b6000610ae782612b91565b60d45460ff166112d65760405162461bcd60e51b815260040161030990614e65565b6101d4546040516375ebee2960e11b81526001600160a01b039091169063ebd7dc5290611307903390600401614bc7565b602060405180830381865afa158015611324573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113489190614e94565b61138a5760405162461bcd60e51b815260206004820152601360248201527237b7363c9031b7bab731b4b61036b2b6b132b960691b6044820152606401610309565b61139643611c20614e52565b8310156113e25760405162461bcd60e51b815260206004820152601a6024820152794d757374206265206120646179206265666f726520736c6f742160301b6044820152606401610309565b6000805b60ce5482101561142e578460ce838154811061140457611404614eb6565b90600052602060002001540361141c5750600161142e565b8161142681614ecc565b9250506113e6565b806114795760405162461bcd60e51b815260206004820152601b60248201527a566f74696e6720736c6f7420646f6573206e6f742065786973742160281b6044820152606401610309565b815b60ce5461148a90600190614ee5565b8110156114ea5760ce61149e826001614e52565b815481106114ae576114ae614eb6565b906000526020600020015460ce82815481106114cc576114cc614eb6565b600091825260209091200155806114e281614ecc565b91505061147b565b5060ce8054806114fc576114fc614ef8565b60019003818190600052602060002001600090559055600060cf600087815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561157157602002820191906000526020600020905b81548152602001906001019080831161155d575b505050600089815260cf6020526040812093945061159293925090506142bc565b600061159c612cde565b905060005b825181101561171357600060cd60008584815181106115c2576115c2614eb6565b60209081029190910181015182528181019290925260409081016000908120825193840190925281546001600160401b03169283905290925061160485612d94565b90506000611613611c20612d94565b61161d9083614f0e565b90506116298483612e00565b6116366001850182612e00565b600086815260cf60205260409020875188908790811061165857611658614eb6565b6020908102919091018101518254600181018455600093845291909220015586517f53982bcc38da32ef033ffe2a31abe0b4704a5da42de9e54f28f69c1253307b37908890879081106116ad576116ad614eb6565b60209081029190910181015160408051928301905286546001600160401b031691829052908590604080519384526001600160401b03928316602085015291169082015260600160405180910390a150505050808061170b90614ecc565b9150506115a1565b507fee810d41c3fb919057fecdc242e74ea856ae93f10c8be7192ffe22244bd93c2b87878760405161174793929190614f35565b60405180910390a150505050505050565b611760610acd565b6001600160a01b0316336001600160a01b0316146117905760405162461bcd60e51b815260040161030990614c07565b30611799610acd565b6001600160a01b0316146117d657600080366040516117b9929190614c39565b604051809103902090505b806117cf60d1612454565b036117c457505b6101d56117e38382614fb6565b506101da6117f18282614fb6565b506101d56040516118029190615075565b60405180910390206101da60405161181a9190615075565b604051908190038120907f20ef4846bccbf147482caf1cceca1dbc8b3c065fc5b6915a07485464545ebaa090600090a35050565b6040805180820190915260018152603160f81b602082015290565b60008033905061188a84828560405180602001604052806000815250612e1d565b949350505050565b61189a610acd565b6001600160a01b0316336001600160a01b0316146118ca5760405162461bcd60e51b815260040161030990614c07565b306118d3610acd565b6001600160a01b03161461191057600080366040516118f3929190614c39565b604051809103902090505b8061190960d1612454565b036118fe57505b60648111156119595760405162461bcd60e51b815260206004820152601560248201527406d757374206265206c657373207468616e2031303605c1b6044820152606401610309565b6101d855565b6000803390506119a987828888888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a9250612e37915050565b979650505050505050565b61016d546000908082036119cd57505061016c54919050565b600061016d6119dd600184614ee5565b815481106119ed576119ed614eb6565b60009182526020918290206040805180820190915291015463ffffffff8116808352600160201b9091046001600160e01b03169282019290925291508410611a4357602001516001600160e01b03169392505050565b61188a61016d85612fce565b600080339050611a9786828787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612e1d92505050565b9695505050505050565b6101da8054611aaf90614c49565b80601f0160208091040260200160405190810160405280929190818152602001828054611adb90614c49565b8015611b285780601f10611afd57610100808354040283529160200191611b28565b820191906000526020600020905b815481529060010190602001808311611b0b57829003601f168201915b505050505081565b60d45460009060ff16611b555760405162461bcd60e51b815260040161030990614e65565b611b618585858561308e565b95945050505050565b611b72610acd565b6001600160a01b0316336001600160a01b031614611ba25760405162461bcd60e51b815260040161030990614c07565b30611bab610acd565b6001600160a01b031614611be85760008036604051611bcb929190614c39565b604051809103902090505b80611be160d1612454565b03611bd657505b60d4805460ff19169055565b611bfc610acd565b6001600160a01b0316336001600160a01b031614611c2c5760405162461bcd60e51b815260040161030990614c07565b30611c35610acd565b6001600160a01b031614611c725760008036604051611c55929190614c39565b604051809103902090505b80611c6b60d1612454565b03611c6057505b60d055565b611c7f610acd565b6001600160a01b0316336001600160a01b031614611caf5760405162461bcd60e51b815260040161030990614c07565b30611cb8610acd565b6001600160a01b031614611cf55760008036604051611cd8929190614c39565b604051809103902090505b80611cee60d1612454565b03611ce357505b6014811115611d3e5760405162461bcd60e51b815260206004820152601560248201527406d75737474206265206c657373207468616e20323605c1b6044820152606401610309565b6101d755565b6000611d518484846132ed565b90505b9392505050565b61016d5460009015611d8057611d7261016d613364565b6001600160e01b0316905090565b5061016c5490565b611d90610acd565b6001600160a01b0316336001600160a01b031614611dc05760405162461bcd60e51b815260040161030990614c07565b30611dc9610acd565b6001600160a01b031614611e065760008036604051611de9929190614c39565b604051809103902090505b80611dff60d1612454565b03611df457505b610c6c81613394565b6101a05460008281526101a1602052604080822054905163d45c443560e01b81526004810191909152909182916001600160a01b039091169063d45c443590602401602060405180830381865afa158015611e6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e929190614cb4565b905080600114611ea25780611d54565b60009392505050565b60d3818154811061129857600080fd5b6101d58054611aaf90614c49565b600081815260cd602090815260408083208151928301909152600101546001600160401b031690819052611279565b611f00610acd565b6001600160a01b0316336001600160a01b031614611f305760405162461bcd60e51b815260040161030990614c07565b30611f39610acd565b6001600160a01b031614611f765760008036604051611f59929190614c39565b604051809103902090505b80611f6f60d1612454565b03611f6457505b600080856001600160a01b0316858585604051611f94929190614c39565b60006040518083038185875af1925050503d8060008114611fd1576040519150601f19603f3d011682016040523d82523d6000602084013e611fd6565b606091505b509150915061201b82826040518060400160405280601e81526020017f52656c617920726576657274656420776974686f7574206d65737361676500008152506133ff565b50505050505050565b60008484848460405160200161203d94939291906150eb565b60408051601f19818403018152919052805160209091012095945050505050565b6101a0546001600160a01b031690565b60d45460009060ff166120935760405162461bcd60e51b815260040161030990614e65565b6101d4546040516375ebee2960e11b81526001600160a01b039091169063ebd7dc52906120c4903390600401614bc7565b602060405180830381865afa1580156120e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121059190614e94565b806121285750612113610acd565b6001600160a01b0316336001600160a01b0316145b6121745760405162461bcd60e51b815260206004820152601f60248201527f6f6e6c7920636f756e63696c206d656d626572206f7220676f7665726e6f72006044820152606401610309565b6101d9546121829043614e52565b8210156121ca5760405162461bcd60e51b8152602060048201526016602482015275416e6e6f756e63656d656e7420746f6f206c6174652160501b6044820152606401610309565b60ce546000906121dc90600190614ee5565b9050805b8360ce82815481106121f4576121f4614eb6565b9060005260206000200154036122475760405162461bcd60e51b8152602060048201526018602482015277566f746520736c6f7420616c72656164792065786973747360401b6044820152606401610309565b801561225f578061225781615136565b9150506121e0565b506000815b8460ce828154811061227857612278614eb6565b9060005260206000200154101561229b57612294816001614e52565b91506122b3565b80156122b357806122ab81615136565b915050612264565b5060ce80546001818101835560008390526000805160206153f283398151915290910186905590546122e59190614ee5565b81101561235857815b8181106123565760ce818154811061230857612308614eb6565b906000526020600020015460ce8260016123229190614e52565b8154811061233257612332614eb6565b6000918252602090912001558015612356578061234e81615136565b9150506122ee565b505b8360ce828154811061236c5761236c614eb6565b90600052602060002001819055506000805160206154128339815191528460405161239991815260200190565b60405180910390a1509192915050565b6000611d548383613418565b6101a0546040805163793d064960e11b815290516000926001600160a01b03169163f27a0c929160048083019260209291908290030181865afa158015612400573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad79190614cb4565b6000610ae782613434565b60006001600160e01b03198216636e665ced60e01b1480610ae75750610ae7826134c3565b600061245f826134f9565b1561247d57604051631ed9509560e11b815260040160405180910390fd5b508054600f0b6000818152600180840160205260408220805492905583546001600160801b03191692016001600160801b03169190911790915590565b60648111156125085760405162461bcd60e51b815260206004820152601a602482015279273ab6b2b930ba37b91037bb32b9103232b737b6b4b730ba37b960311b6044820152606401610309565b6000612512611d5b565b90508015801590612524575061016d54155b1561258957604080518082019091526000815261016d90602081016125488461350e565b6001600160e01b039081169091528254600181018455600093845260209384902083519490930151909116600160201b0263ffffffff909316929092179101555b61259561016d83613577565b505060408051828152602081018490527f0553476bf02ef2726e8ce5ced78d63e26e602e4a2257b1f559418e24b4633997910160405180910390a15050565b600054610100900460ff166125fb5760405162461bcd60e51b81526004016103099061514d565b61260c8161260761184e565b6135ad565b612615816135ee565b5061c4e060d05560d4805460ff19166001179055565b600054610100900460ff166126525760405162461bcd60e51b81526004016103099061514d565b610c6c81613625565b600054610100900460ff166126825760405162461bcd60e51b81526004016103099061514d565b565b600054610100900460ff166126ab5760405162461bcd60e51b81526004016103099061514d565b610c6c8161366f565b600054610100900460ff166126db5760405162461bcd60e51b81526004016103099061514d565b610c6c81613696565b6101d65460ff16156127275760405162461bcd60e51b815260206004820152600c60248201526b616c726561647920646f6e6560a01b6044820152606401610309565b600060d054436127379190614e52565b612742906001614e52565b60ce80546001810182556000919091526000805160206153f2833981519152018190556040518181529091506000805160206154128339815191529060200160405180910390a16000838360405160240161279e929190615198565b60408051601f19818403018152918152602080830180516001600160e01b031663527e098f60e01b179052815160608101909252602680835292935060009290615472908301396040805160018082528183019092529192506000919060208083019080368337019050509050308160008151811061281f5761281f614eb6565b6001600160a01b03929092166020928302919091019091015260408051600180825281830190925260009181602001602082028036833701905050905060008160008151811061287157612871614eb6565b6020908102919091010152604080516001808252818301909252600091816020015b606081526020019060019003908161289357905050905084816000815181106128be576128be614eb6565b602002602001018190525060006128de8484848880519060200120612024565b905060006128ec82846136bd565b90506000805160206154328339815191528233878789516001600160401b0381111561291a5761291a61436b565b60405190808252806020026020018201604052801561294d57816020015b60608152602001906001900390816129385790505b50888760000160000160009054906101000a90046001600160401b03168860010160000160009054906101000a90046001600160401b03168e60405161299b999897969594939291906151bd565b60405180910390a160028082015460ff16908111156129bc576129bc61486e565b336001600160a01b03168360008051602061545283398151915288888a516001600160401b038111156129f1576129f161436b565b604051908082528060200260200182016040528015612a2457816020015b6060815260200190600190039081612a0f5790505b50898860000160000160009054906101000a90046001600160401b03168960010160000160009054906101000a90046001600160401b03168f604051612a709796959493929190615260565b60405180910390a450506101d6805460ff191660011790555050505050505050565b30612a9b610acd565b6001600160a01b0316146111565760005b8451811015612b2b57306001600160a01b0316858281518110612ad157612ad1614eb6565b60200260200101516001600160a01b031603612b1b57612b1b838281518110612afc57612afc614eb6565b60200260200101518051906020012060d1613a4a90919063ffffffff16565b612b2481614ecc565b9050612aac565b505050505050565b60d45460ff16612b555760405162461bcd60e51b815260040161030990614e65565b6111568585858585613a86565b30612b6b610acd565b6001600160a01b03161461115657612b8360d16134f9565b61115657600060d155611156565b600080612b9d83613afb565b90506004816007811115612bb357612bb361486e565b14612bbe5792915050565b60008381526101a1602052604090205480612bda575092915050565b6101a054604051632ab0f52960e01b8152600481018390526001600160a01b0390911690632ab0f52990602401602060405180830381865afa158015612c24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c489190614e94565b15612c57575060079392505050565b6101a054604051632c258a9f60e11b8152600481018390526001600160a01b039091169063584b153e90602401602060405180830381865afa158015612ca1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cc59190614e94565b15612cd4575060059392505050565b5060029392505050565b6000805b60ce54811015612d545760d05460ce8281548110612d0257612d02614eb6565b9060005260206000200154612d179190614ee5565b431015612d425760ce8181548110612d3157612d31614eb6565b906000526020600020015491505090565b80612d4c81614ecc565b915050612ce2565b5060405162461bcd60e51b8152602060048201526014602482015273139bc81d9bdd1a5b99c81cdb1bdd08199bdd5b9960621b6044820152606401610309565b60006001600160401b03821115612dfc5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203660448201526534206269747360d01b6064820152608401610309565b5090565b81546001600160401b0319166001600160401b0391909116179055565b6000611b6185858585604051806020016040528060008152505b600085815260cd602052604081206001612e50886112a9565b6007811115612e6157612e6161486e565b14612eaa5760405162461bcd60e51b8152602060048201526019602482015278566f7465206e6f742063757272656e746c792061637469766560381b6044820152606401610309565b604080516020810190915281546001600160401b031690819052600090612ed3908890866132ed565b905060008111612f185760405162461bcd60e51b815260206004820152601060248201526f6e6f20766f74696e672072696768747360801b6044820152606401610309565b612f258888888488613c19565b8351600003612f7a57866001600160a01b03167fb8e138887d0aa13bab447e82de9d5c1777041ecd21ca36ba824ff1e6c07ddda489888489604051612f6d94939291906152e6565b60405180910390a26119a9565b866001600160a01b03167fe2babfbac5889a709b63bb7f598b324e08bc5a4fb9ec647fb3cbc9ec07eb87128988848989604051612fbb95949392919061530e565b60405180910390a2979650505050505050565b600043821061301f5760405162461bcd60e51b815260206004820181905260248201527f436865636b706f696e74733a20626c6f636b206e6f7420796574206d696e65646044820152606401610309565b600061302a83613d5a565b8454909150600061303d86848385613dbf565b905080156130785761306286613054600184614ee5565b600091825260209091200190565b54600160201b90046001600160e01b031661307b565b60005b6001600160e01b03169695505050505050565b60d45460009060ff166130b35760405162461bcd60e51b815260040161030990614e65565b60006130c186868686613e1d565b905060006130cf82866136bd565b9050600080516020615432833981519152823389898b516001600160401b038111156130fd576130fd61436b565b60405190808252806020026020018201604052801561313057816020015b606081526020019060019003908161311b5790505b508654600188015460405161315c9796959493928e926001600160401b03918216929116908e906151bd565b60405180910390a160028082015460ff169081111561317d5761317d61486e565b336001600160a01b0316836000805160206154528339815191528a8a8c516001600160401b038111156131b2576131b261436b565b6040519080825280602002602001820160405280156131e557816020015b60608152602001906001900390816131d05790505b508754600189015460405161320f959493928f926001600160401b03918216929116908f90615260565b60405180910390a4600160028083015460ff16908111156132325761323261486e565b0361124757336001600160a01b0316827faf70b28462b17da839f4faad55a92330c675fb47d34733424983f6a314a1bd4389898b516001600160401b0381111561327e5761327e61436b565b6040519080825280602002602001820160405280156132b157816020015b606081526020019060019003908161329c5790505b50865460018801546040516132db959493928e926001600160401b03918216929116908e90615260565b60405180910390a35095945050505050565b61010654604051630748d63560e31b81526001600160a01b038581166004830152602482018590526000921690633a46b1a890604401602060405180830381865afa158015613340573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d519190614cb4565b80546000908015611ea25761337e83613054600184614ee5565b54600160201b90046001600160e01b0316611d54565b6101a054604080516001600160a01b03928316815291831660208301527f08f74ea46ef7894f65eabfb5e6e695de773a000b47c529ab559178069b226401910160405180910390a16101a080546001600160a01b0319166001600160a01b0392909216919091179055565b6060831561340e575081611d54565b611d548383613f19565b6000611d548383604051806020016040528060008152506132ed565b60006064613441836119b4565b61010654604051632394e7a360e21b8152600481018690526001600160a01b0390911690638e539e8c90602401602060405180830381865afa15801561348b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134af9190614cb4565b6134b99190615354565b610ae7919061536b565b60006001600160e01b0319821663bf26d89760e01b1480610ae757506001600160e01b031982166379dd796f60e01b1492915050565b54600f81810b600160801b909204900b131590565b60006001600160e01b03821115612dfc5760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20326044820152663234206269747360c81b6064820152608401610309565b6000806135958461358743613d5a565b6135908661350e565b613f43565b6001600160e01b0391821693501690505b9250929050565b600054610100900460ff166135d45760405162461bcd60e51b81526004016103099061514d565b815160209283012081519190920120603391909155603455565b600054610100900460ff166136155760405162461bcd60e51b81526004016103099061514d565b60cc6136218282614fb6565b5050565b600054610100900460ff1661364c5760405162461bcd60e51b81526004016103099061514d565b61010680546001600160a01b0319166001600160a01b0392909216919091179055565b600054610100900460ff16610c635760405162461bcd60e51b81526004016103099061514d565b600054610100900460ff16611e065760405162461bcd60e51b81526004016103099061514d565b600082815260cd60209081526040808320815192830190915280546001600160401b031691829052901561372d5760405162461bcd60e51b815260206004820152601760248201527650726f706f73616c20616c72656164792065786973747360481b6044820152606401610309565b600080845160030361380b5760008560008151811061374e5761374e614eb6565b602002602001015161375f9061538d565b905060008660018151811061377657613776614eb6565b60200260200101516137879061538d565b905060008760028151811061379e5761379e614eb6565b60200260200101516137af9061538d565b90506001600160e01b031983166305f0caad60e31b1480156137e157506001600160e01b0319821663f1d3b27d60e01b145b80156137fd57506001600160e01b03198116632062534d60e21b145b1561380757600193505b5050505b6001811515146139085760005b855181101561390657600086828151811061383557613835614eb6565b60200260200101516138469061538d565b9050631ed5948960e01b6001600160e01b031982160161386a576001935050613906565b6001600160e01b031981166305f0caad60e31b148061389957506001600160e01b0319811663f1d3b27d60e01b145b806138b457506001600160e01b03198116632062534d60e21b145b156138f35760405162461bcd60e51b815260206004820152600f60248201526e57726f6e672066756e6374696f6e7360881b6044820152606401610309565b50806138fe81614ecc565b915050613818565b505b81156139ab57600061391981612d94565b61392243612d94565b61392c9190614f0e565b60cb54909150600090613948906001600160401b031683614f0e565b90506139548583612e00565b6139616001860182612e00565b505060028301805460ff1916600190811790915560d3805491820181556000527f915c3eb987b20e1af620c1403197bf687fb7f18513b3a73fde6e78c7072c41a601869055613a40565b60006139b5612cde565b905060006139c282612d94565b905060006139d1611c20612d94565b6139db9083614f0e565b90506139e78683612e00565b6139f46001870182612e00565b8315613a0f576002868101805460ff19169091179055613a1c565b60028601805460ff191690555b5050600090815260cf60209081526040822080546001810182559083529120018690555b5090949350505050565b8154600160801b90819004600f0b6000818152600180860160205260409091209390935583546001600160801b03908116939091011602179055565b6101a05460405163e38335e560e01b81526001600160a01b039091169063e38335e5903490613ac2908890889088906000908990600401614d96565b6000604051808303818588803b158015613adb57600080fd5b505af1158015613aef573d6000803e3d6000fd5b50505050505050505050565b600081815260cd602052604081206002810154610100900460ff1615613b245750600792915050565b600281015462010000900460ff1615613b405750600292915050565b6000613b4b84611251565b905080600003613b9d5760405162461bcd60e51b815260206004820152601d60248201527f476f7665726e6f723a20756e6b6e6f776e2070726f706f73616c2069640000006044820152606401610309565b438110613bae575060009392505050565b6000613bb985611ec9565b9050438110613bcd57506001949350505050565b613bd6856140e0565b8015613bf657506000858152610139602052604090208054600190910154115b15613c0657506004949350505050565b506003949350505050565b505050919050565b6000858152610139602090815260408083206001600160a01b0388168452600381019092529091205460ff1615613c865760405162461bcd60e51b8152602060048201526011602482015270159bdd1948185b1c9958591e4818d85cdd607a1b6044820152606401610309565b6001600160a01b03851660009081526003820160205260409020805460ff1916600117905560ff8416613cd25782816000016000828254613cc79190614e52565b90915550612b2b9050565b60001960ff851601613cf25782816001016000828254613cc79190614e52565b60011960ff851601613d125782816002016000828254613cc79190614e52565b60405162461bcd60e51b815260206004820152601f60248201527f496e76616c69642076616c756520666f7220656e756d20566f746554797065006044820152606401610309565b600063ffffffff821115612dfc5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b6064820152608401610309565b60005b81831015613e15576000613dd68484614269565b60008781526020902090915063ffffffff86169082015463ffffffff161115613e0157809250613e0f565b613e0c816001614e52565b93505b50613dc2565b509392505050565b60006001613e3033610a72600143614ee5565b1015613e7e5760405162461bcd60e51b815260206004820152601e60248201527f50726f706f73657220766f7465732062656c6f77207468726573686f6c6400006044820152606401610309565b6000613e938686868680519060200120612024565b90508451865114613eb65760405162461bcd60e51b8152600401610309906153c0565b8351865114613ed75760405162461bcd60e51b8152600401610309906153c0565b6000865111611b615760405162461bcd60e51b815260206004820152600e60248201526d115b5c1d1e481c1c9bdc1bdcd85b60921b6044820152606401610309565b815115613f295781518083602001fd5b8060405162461bcd60e51b81526004016103099190614570565b825460009081908015614083576000613f6187613054600185614ee5565b60408051808201909152905463ffffffff808216808452600160201b9092046001600160e01b031660208401529192509087161015613fdc5760405162461bcd60e51b8152602060048201526017602482015276436865636b706f696e743a20696e76616c6964206b657960481b6044820152606401610309565b805163ffffffff8088169116036140245784613ffd88613054600186614ee5565b80546001600160e01b0392909216600160201b0263ffffffff909216919091179055614073565b6040805180820190915263ffffffff80881682526001600160e01b0380881660208085019182528b54600181018d5560008d81529190912094519151909216600160201b029216919091179101555b6020015192508391506140d89050565b50506040805180820190915263ffffffff80851682526001600160e01b0380851660208085019182528854600181018a5560008a815291822095519251909316600160201b0291909316179201919091559050815b935093915050565b600081815260cd602052604081206002015460ff16818160028111156141085761410861486e565b0361411657611d5483614284565b6000838152610139602052604081209061412f85611251565b9050600060018460028111156141475761414761486e565b0361415657506101d7546141c1565b600284600281111561416a5761416a61486e565b0361417957506101d8546141c1565b60405162461bcd60e51b815260206004820152601f60248201527f4e6f7420696d706c656d656e7465642070726f706f73616c2071756f72756d006044820152606401610309565b6000606461010654604051632394e7a360e21b81526004810186905284916001600160a01b031690638e539e8c90602401602060405180830381865afa15801561420f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142339190614cb4565b61423d9190615354565b614247919061536b565b90508360020154846001015461425d9190614e52565b10159695505050505050565b6000614278600284841861536b565b611d5490848416614e52565b600081815261013960205260408120600281015460018201546142a79190614e52565b6142b3610aa785611251565b11159392505050565b5080546000825590600052602060002090810190610c6c91905b80821115612dfc57600081556001016142d6565b6000602082840312156142fc57600080fd5b81356001600160e01b031981168114611d5457600080fd5b803560ff8116811461432557600080fd5b919050565b60008083601f84011261433c57600080fd5b5081356001600160401b0381111561435357600080fd5b6020830191508360208285010111156135a657600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156143a9576143a961436b565b604052919050565b600082601f8301126143c257600080fd5b81356001600160401b038111156143db576143db61436b565b6143ee601f8201601f1916602001614381565b81815284602083860101111561440357600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060008060008060e0898b03121561443c57600080fd5b8835975061444c60208a01614314565b965060408901356001600160401b038082111561446857600080fd5b6144748c838d0161432a565b909850965060608b013591508082111561448d57600080fd5b5061449a8b828c016143b1565b9450506144a960808a01614314565b925060a0890135915060c089013590509295985092959890939650565b6000602082840312156144d857600080fd5b81356001600160401b0381168114611d5457600080fd5b6000806040838503121561450257600080fd5b50508035926020909101359150565b60006020828403121561452357600080fd5b5035919050565b6000815180845260005b8181101561455057602081850181015186830182015201614534565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000611d54602083018461452a565b60006001600160401b0382111561459c5761459c61436b565b5060051b60200190565b6001600160a01b0381168114610c6c57600080fd5b600082601f8301126145cc57600080fd5b813560206145e16145dc83614583565b614381565b82815260059290921b8401810191818101908684111561460057600080fd5b8286015b84811015614624578035614617816145a6565b8352918301918301614604565b509695505050505050565b600082601f83011261464057600080fd5b813560206146506145dc83614583565b82815260059290921b8401810191818101908684111561466f57600080fd5b8286015b848110156146245780358352918301918301614673565b600082601f83011261469b57600080fd5b813560206146ab6145dc83614583565b82815260059290921b840181019181810190868411156146ca57600080fd5b8286015b848110156146245780356001600160401b038111156146ed5760008081fd5b6146fb8986838b01016143b1565b8452509183019183016146ce565b6000806000806080858703121561471f57600080fd5b84356001600160401b038082111561473657600080fd5b614742888389016145bb565b9550602087013591508082111561475857600080fd5b6147648883890161462f565b9450604087013591508082111561477a57600080fd5b506147878782880161468a565b949793965093946060013593505050565b600080600080608085870312156147ae57600080fd5b84356147b9816145a6565b935060208501356147c9816145a6565b925060408501356001600160401b03808211156147e557600080fd5b6147f1888389016143b1565b9350606087013591508082111561480757600080fd5b50614814878288016143b1565b91505092959194509250565b600080600080600060a0868803121561483857600080fd5b8535945061484860208701614314565b935061485660408701614314565b94979396509394606081013594506080013592915050565b634e487b7160e01b600052602160045260246000fd5b60208101600883106148a657634e487b7160e01b600052602160045260246000fd5b91905290565b600080604083850312156148bf57600080fd5b8235915060208301356148d1816145a6565b809150509250929050565b6000806000604084860312156148f157600080fd5b8335925060208401356001600160401b0381111561490e57600080fd5b61491a8682870161432a565b9497909650939450505050565b6000806040838503121561493a57600080fd5b82356001600160401b038082111561495157600080fd5b61495d868387016143b1565b9350602085013591508082111561497357600080fd5b50614980858286016143b1565b9150509250929050565b6000806040838503121561499d57600080fd5b823591506149ad60208401614314565b90509250929050565b6000806000806000608086880312156149ce57600080fd5b853594506149de60208701614314565b935060408601356001600160401b03808211156149fa57600080fd5b614a0689838a0161432a565b90955093506060880135915080821115614a1f57600080fd5b50614a2c888289016143b1565b9150509295509295909350565b60008060008060608587031215614a4f57600080fd5b84359350614a5f60208601614314565b925060408501356001600160401b03811115614a7a57600080fd5b614a868782880161432a565b95989497509550505050565b60008060008060808587031215614aa857600080fd5b84356001600160401b0380821115614abf57600080fd5b614acb888389016145bb565b95506020870135915080821115614ae157600080fd5b614aed8883890161462f565b94506040870135915080821115614b0357600080fd5b6147f18883890161468a565b600080600060608486031215614b2457600080fd5b8335614b2f816145a6565b92506020840135915060408401356001600160401b03811115614b5157600080fd5b614b5d868287016143b1565b9150509250925092565b600060208284031215614b7957600080fd5b8135611d54816145a6565b60008060008060608587031215614b9a57600080fd5b8435614ba5816145a6565b93506020850135925060408501356001600160401b03811115614a7a57600080fd5b6001600160a01b0391909116815260200190565b60008060408385031215614bee57600080fd5b8235614bf9816145a6565b946020939093013593505050565b602080825260189082015277476f7665726e6f723a206f6e6c79476f7665726e616e636560401b604082015260600190565b8183823760009101908152919050565b600181811c90821680614c5d57607f821691505b602082108103614c7d57634e487b7160e01b600052602260045260246000fd5b50919050565b602080825260179082015276141c9bdc1bdcd85b081b9bdd081cdd58d8d95cdcd99d5b604a1b604082015260600190565b600060208284031215614cc657600080fd5b5051919050565b600081518084526020808501945080840160005b83811015614d065781516001600160a01b031687529582019590820190600101614ce1565b509495945050505050565b600081518084526020808501945080840160005b83811015614d0657815187529582019590820190600101614d25565b600081518084526020808501808196508360051b8101915082860160005b85811015614d89578284038952614d7784835161452a565b98850198935090840190600101614d5f565b5091979650505050505050565b60a081526000614da960a0830188614ccd565b8281036020840152614dbb8188614d11565b90508281036040840152614dcf8187614d41565b60608401959095525050608001529392505050565b60c081526000614df760c0830189614ccd565b8281036020840152614e098189614d11565b90508281036040840152614e1d8188614d41565b60608401969096525050608081019290925260a0909101529392505050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610ae757610ae7614e3c565b6020808252601590820152745468652044414f206973206e6f742061637469766560581b604082015260600190565b600060208284031215614ea657600080fd5b81518015158114611d5457600080fd5b634e487b7160e01b600052603260045260246000fd5b600060018201614ede57614ede614e3c565b5060010190565b81810381811115610ae757610ae7614e3c565b634e487b7160e01b600052603160045260246000fd5b6001600160401b03818116838216019080821115614f2e57614f2e614e3c565b5092915050565b83815260406020820152816040820152818360608301376000818301606090810191909152601f909201601f1916010192915050565b601f821115614fb157600081815260208120601f850160051c81016020861015614f925750805b601f850160051c820191505b81811015612b2b57828155600101614f9e565b505050565b81516001600160401b03811115614fcf57614fcf61436b565b614fe381614fdd8454614c49565b84614f6b565b602080601f83116001811461501857600084156150005750858301515b600019600386901b1c1916600185901b178555612b2b565b600085815260208120601f198616915b8281101561504757888601518255948401946001909101908401615028565b50858210156150655787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600080835461508381614c49565b6001828116801561509b57600181146150b0576150df565b60ff19841687528215158302870194506150df565b8760005260208060002060005b858110156150d65781548a8201529084019082016150bd565b50505082870194505b50929695505050505050565b6080815260006150fe6080830187614ccd565b82810360208401526151108187614d11565b905082810360408401526151248186614d41565b91505082606083015295945050505050565b60008161514557615145614e3c565b506000190190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6040815260006151ab604083018561452a565b8281036020840152611b61818561452a565b8981526001600160a01b0389166020820152610120604082018190526000906151e88382018b614ccd565b905082810360608401526151fc818a614d11565b905082810360808401526152108189614d41565b905082810360a08401526152248188614d41565b6001600160401b0387811660c0860152861660e08501528381036101008501529050615250818561452a565b9c9b505050505050505050505050565b60e08152600061527360e083018a614ccd565b8281036020840152615285818a614d11565b905082810360408401526152998189614d41565b905082810360608401526152ad8188614d41565b6001600160401b038781166080860152861660a085015283810360c085015290506152d8818561452a565b9a9950505050505050505050565b84815260ff84166020820152826040820152608060608201526000611a97608083018461452a565b85815260ff8516602082015283604082015260a06060820152600061533660a083018561452a565b8281036080840152615348818561452a565b98975050505050505050565b8082028115828204841417610ae757610ae7614e3c565b60008261538857634e487b7160e01b600052601260045260246000fd5b500490565b805160208201516001600160e01b03198082169291906004831015613c115760049290920360031b82901b161692915050565b602080825260179082015276092dcecc2d8d2c840e0e4dee0dee6c2d840d8cadccee8d604b1b60408201526060019056fed36cd1c74ef8d7326d8021b776c18fb5a5724b7f7bc93c2f42e43e10ef27d12af92ed14e81753ef9799e397ab10278c4107b6807c59683338ced6b3598297c6b7d84a6263ae0d98d3329bd7b46bb4e8d6f98cd35a7adb45c274c8b7fd5ebd5e02546e02ec051925f1c459bd5da30927611040a32607c07d26172816e97d07bd1466f756e64696e672050726f706f73616c2e2053657420696e697469616c2062796c6177732ea2646970667358221220c23f519a7acd61255f61e677d4216ae5c595c95627cd44fad50699f0ac76251464736f6c63430008110033",
  "devdoc": {
    "errors": {
      "Empty()": [
        {
          "details": "An operation (e.g. {front}) couldn't be completed due to the queue being empty."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "COUNTING_MODE()": {
        "details": "A description of the possible `support` values for {castVote} and the way these votes are counted, meant to be consumed by UIs to show correct vote options and interpret the results. The string is a URL-encoded sequence of key-value pairs that each describe one aspect, for example `support=bravo&quorum=for,abstain`. There are 2 standard keys: `support` and `quorum`. - `support=bravo` refers to the vote options 0 = Against, 1 = For, 2 = Abstain, as in `GovernorBravo`. - `quorum=bravo` means that only For votes are counted towards quorum. - `quorum=for,abstain` means that both For and Abstain votes are counted towards quorum. If a counting module makes use of encoded `params`, it should  include this under a `params` key with a unique name that describes the behavior. For example: - `params=fractional` might refer to a scheme where votes are divided fractionally between for/against/abstain. - `params=erc721` might refer to a scheme where specific NFTs are delegated to vote. NOTE: The string can be decoded by the standard https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams[`URLSearchParams`] JavaScript class."
      },
      "castVote(uint256,uint8)": {
        "details": "Cast a vote Emits a {VoteCast} event."
      },
      "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)": {
        "details": "Cast a vote using the user's cryptographic signature. Emits a {VoteCast} event."
      },
      "castVoteWithReason(uint256,uint8,string)": {
        "details": "Cast a vote with a reason Emits a {VoteCast} event."
      },
      "castVoteWithReasonAndParams(uint256,uint8,string,bytes)": {
        "details": "Cast a vote with a reason and additional encoded parameters Emits a {VoteCast} or {VoteCastWithParams} event depending on the length of params."
      },
      "castVoteWithReasonAndParamsBySig(uint256,uint8,string,bytes,uint8,bytes32,bytes32)": {
        "details": "Cast a vote with a reason and additional encoded parameters using the user's cryptographic signature. Emits a {VoteCast} or {VoteCastWithParams} event depending on the length of params."
      },
      "execute(address[],uint256[],bytes[],bytes32)": {
        "details": "Execute a successful proposal. This requires the quorum to be reached, the vote to be successful, and the deadline to be reached. Emits a {ProposalExecuted} event. Note: some module can modify the requirements for execution, for example by adding an additional timelock."
      },
      "getVotesWithParams(address,uint256,bytes)": {
        "details": "Voting power of an `account` at a specific `blockNumber` given additional encoded parameters."
      },
      "hasVoted(uint256,address)": {
        "details": "Returns whether `account` has cast a vote on `proposalId`."
      },
      "hashProposal(address[],uint256[],bytes[],bytes32)": {
        "details": "Hashing function used to (re)build the proposal id from the proposal details.."
      },
      "name()": {
        "details": "Name of the governor instance (used in building the ERC712 domain separator)."
      },
      "proposalDeadline(uint256)": {
        "details": "Block number at which votes close. Votes close at the end of this block, so it is possible to cast a vote during this block."
      },
      "proposalSnapshot(uint256)": {
        "details": "Block number used to retrieve user's votes and quorum. As per Compound's Comp and OpenZeppelin's ERC20Votes, the snapshot is performed at the end of this block. Hence, voting for this proposal starts at the beginning of the following block."
      },
      "version()": {
        "details": "Version of the governor instance (used in building the ERC712 domain separator). Default: \"1\""
      },
      "votingDelay()": {
        "details": "Delay, in number of block, between the proposal is created and the vote starts. This can be increassed to leave time for users to buy voting power, or delegate it, before the voting of a proposal starts."
      },
      "votingPeriod()": {
        "details": "Delay, in number of blocks, between the vote start and vote ends. NOTE: The {votingDelay} can delay the start of the vote. This must be considered when setting the voting duration compared to the voting delay."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "COUNTING_MODE()": {
        "notice": "module:voting"
      },
      "getVotesWithParams(address,uint256,bytes)": {
        "notice": "module:reputation"
      },
      "hasVoted(uint256,address)": {
        "notice": "module:voting"
      },
      "hashProposal(address[],uint256[],bytes[],bytes32)": {
        "notice": "module:core"
      },
      "name()": {
        "notice": "module:core"
      },
      "proposalDeadline(uint256)": {
        "notice": "module:core"
      },
      "proposalSnapshot(uint256)": {
        "notice": "module:core"
      },
      "proposalThreshold()": {
        "notice": "The number of votes required in order for a voter to become a proposer Must have voting power to create a proposal"
      },
      "version()": {
        "notice": "module:core"
      },
      "votingDelay()": {
        "notice": "module:user-config"
      },
      "votingPeriod()": {
        "notice": "module:user-config"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1950,
        "contract": "contracts/DAO.sol:DAO",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 1953,
        "contract": "contracts/DAO.sol:DAO",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4582,
        "contract": "contracts/DAO.sol:DAO",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 5342,
        "contract": "contracts/DAO.sol:DAO",
        "label": "_HASHED_NAME",
        "offset": 0,
        "slot": "51",
        "type": "t_bytes32"
      },
      {
        "astId": 5344,
        "contract": "contracts/DAO.sol:DAO",
        "label": "_HASHED_VERSION",
        "offset": 0,
        "slot": "52",
        "type": "t_bytes32"
      },
      {
        "astId": 5482,
        "contract": "contracts/DAO.sol:DAO",
        "label": "__gap",
        "offset": 0,
        "slot": "53",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 856,
        "contract": "contracts/DAO.sol:DAO",
        "label": "__gap",
        "offset": 0,
        "slot": "103",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1864,
        "contract": "contracts/DAO.sol:DAO",
        "label": "__gap",
        "offset": 0,
        "slot": "153",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 12007,
        "contract": "contracts/DAO.sol:DAO",
        "label": "extraOrdinaryAssemblyVotingPeriod",
        "offset": 0,
        "slot": "203",
        "type": "t_uint64"
      },
      {
        "astId": 12078,
        "contract": "contracts/DAO.sol:DAO",
        "label": "_name",
        "offset": 0,
        "slot": "204",
        "type": "t_string_storage"
      },
      {
        "astId": 12083,
        "contract": "contracts/DAO.sol:DAO",
        "label": "_proposals",
        "offset": 0,
        "slot": "205",
        "type": "t_mapping(t_uint256,t_struct(ProposalCore)12076_storage)"
      },
      {
        "astId": 12086,
        "contract": "contracts/DAO.sol:DAO",
        "label": "slots",
        "offset": 0,
        "slot": "206",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 12091,
        "contract": "contracts/DAO.sol:DAO",
        "label": "votingSlots",
        "offset": 0,
        "slot": "207",
        "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 12093,
        "contract": "contracts/DAO.sol:DAO",
        "label": "slotCloseTime",
        "offset": 0,
        "slot": "208",
        "type": "t_uint256"
      },
      {
        "astId": 12096,
        "contract": "contracts/DAO.sol:DAO",
        "label": "_governanceCall",
        "offset": 0,
        "slot": "209",
        "type": "t_struct(Bytes32Deque)7964_storage"
      },
      {
        "astId": 12099,
        "contract": "contracts/DAO.sol:DAO",
        "label": "extraOrdinaryAssemblyProposals",
        "offset": 0,
        "slot": "211",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 12101,
        "contract": "contracts/DAO.sol:DAO",
        "label": "daoActive",
        "offset": 0,
        "slot": "212",
        "type": "t_bool"
      },
      {
        "astId": 13583,
        "contract": "contracts/DAO.sol:DAO",
        "label": "__gap",
        "offset": 0,
        "slot": "213",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 13812,
        "contract": "contracts/DAO.sol:DAO",
        "label": "token",
        "offset": 0,
        "slot": "262",
        "type": "t_contract(IVotesUpgradeable)1943"
      },
      {
        "astId": 13861,
        "contract": "contracts/DAO.sol:DAO",
        "label": "__gap",
        "offset": 0,
        "slot": "263",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 11349,
        "contract": "contracts/DAO.sol:DAO",
        "label": "_proposalVotes",
        "offset": 0,
        "slot": "313",
        "type": "t_mapping(t_uint256,t_struct(ProposalVote)11344_storage)"
      },
      {
        "astId": 11546,
        "contract": "contracts/DAO.sol:DAO",
        "label": "__gap",
        "offset": 0,
        "slot": "314",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 13600,
        "contract": "contracts/DAO.sol:DAO",
        "label": "_quorumNumerator",
        "offset": 0,
        "slot": "364",
        "type": "t_uint256"
      },
      {
        "astId": 13603,
        "contract": "contracts/DAO.sol:DAO",
        "label": "_quorumNumeratorHistory",
        "offset": 0,
        "slot": "365",
        "type": "t_struct(History)3180_storage"
      },
      {
        "astId": 13799,
        "contract": "contracts/DAO.sol:DAO",
        "label": "__gap",
        "offset": 0,
        "slot": "366",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 11562,
        "contract": "contracts/DAO.sol:DAO",
        "label": "_timelock",
        "offset": 0,
        "slot": "416",
        "type": "t_contract(TimelockControllerUpgradeable)1804"
      },
      {
        "astId": 11566,
        "contract": "contracts/DAO.sol:DAO",
        "label": "_timelockIds",
        "offset": 0,
        "slot": "417",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 11933,
        "contract": "contracts/DAO.sol:DAO",
        "label": "__gap",
        "offset": 0,
        "slot": "418",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 8311,
        "contract": "contracts/DAO.sol:DAO",
        "label": "_membershipContract",
        "offset": 0,
        "slot": "468",
        "type": "t_contract(Membership)10496"
      },
      {
        "astId": 8334,
        "contract": "contracts/DAO.sol:DAO",
        "label": "bylawsHash",
        "offset": 0,
        "slot": "469",
        "type": "t_string_storage"
      },
      {
        "astId": 8336,
        "contract": "contracts/DAO.sol:DAO",
        "label": "_foundingSetupDone",
        "offset": 0,
        "slot": "470",
        "type": "t_bool"
      },
      {
        "astId": 8338,
        "contract": "contracts/DAO.sol:DAO",
        "label": "extraordinaryVoteQuorumNominator",
        "offset": 0,
        "slot": "471",
        "type": "t_uint256"
      },
      {
        "astId": 8340,
        "contract": "contracts/DAO.sol:DAO",
        "label": "associationDissolutionQuorumNominator",
        "offset": 0,
        "slot": "472",
        "type": "t_uint256"
      },
      {
        "astId": 8342,
        "contract": "contracts/DAO.sol:DAO",
        "label": "votingSlotAnnouncementPeriod",
        "offset": 0,
        "slot": "473",
        "type": "t_uint256"
      },
      {
        "astId": 8344,
        "contract": "contracts/DAO.sol:DAO",
        "label": "bylawsUrl",
        "offset": 0,
        "slot": "474",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Checkpoint)3185_storage)dyn_storage": {
        "base": "t_struct(Checkpoint)3185_storage",
        "encoding": "dynamic_array",
        "label": "struct CheckpointsUpgradeable.Checkpoint[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IVotesUpgradeable)1943": {
        "encoding": "inplace",
        "label": "contract IVotesUpgradeable",
        "numberOfBytes": "20"
      },
      "t_contract(Membership)10496": {
        "encoding": "inplace",
        "label": "contract Membership",
        "numberOfBytes": "20"
      },
      "t_contract(TimelockControllerUpgradeable)1804": {
        "encoding": "inplace",
        "label": "contract TimelockControllerUpgradeable",
        "numberOfBytes": "20"
      },
      "t_enum(ProposalCategory)12062": {
        "encoding": "inplace",
        "label": "enum GovernorUpgradeable.ProposalCategory",
        "numberOfBytes": "1"
      },
      "t_int128": {
        "encoding": "inplace",
        "label": "int128",
        "numberOfBytes": "16"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_int128,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_int128",
        "label": "mapping(int128 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint256,t_struct(ProposalCore)12076_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct GovernorUpgradeable.ProposalCore)",
        "numberOfBytes": "32",
        "value": "t_struct(ProposalCore)12076_storage"
      },
      "t_mapping(t_uint256,t_struct(ProposalVote)11344_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct GovernorCountingSimpleUpgradeable.ProposalVote)",
        "numberOfBytes": "32",
        "value": "t_struct(ProposalVote)11344_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(BlockNumber)4869_storage": {
        "encoding": "inplace",
        "label": "struct TimersUpgradeable.BlockNumber",
        "members": [
          {
            "astId": 4868,
            "contract": "contracts/DAO.sol:DAO",
            "label": "_deadline",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Bytes32Deque)7964_storage": {
        "encoding": "inplace",
        "label": "struct DoubleEndedQueueUpgradeable.Bytes32Deque",
        "members": [
          {
            "astId": 7957,
            "contract": "contracts/DAO.sol:DAO",
            "label": "_begin",
            "offset": 0,
            "slot": "0",
            "type": "t_int128"
          },
          {
            "astId": 7959,
            "contract": "contracts/DAO.sol:DAO",
            "label": "_end",
            "offset": 16,
            "slot": "0",
            "type": "t_int128"
          },
          {
            "astId": 7963,
            "contract": "contracts/DAO.sol:DAO",
            "label": "_data",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_int128,t_bytes32)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Checkpoint)3185_storage": {
        "encoding": "inplace",
        "label": "struct CheckpointsUpgradeable.Checkpoint",
        "members": [
          {
            "astId": 3182,
            "contract": "contracts/DAO.sol:DAO",
            "label": "_blockNumber",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 3184,
            "contract": "contracts/DAO.sol:DAO",
            "label": "_value",
            "offset": 4,
            "slot": "0",
            "type": "t_uint224"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(History)3180_storage": {
        "encoding": "inplace",
        "label": "struct CheckpointsUpgradeable.History",
        "members": [
          {
            "astId": 3179,
            "contract": "contracts/DAO.sol:DAO",
            "label": "_checkpoints",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_struct(Checkpoint)3185_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(ProposalCore)12076_storage": {
        "encoding": "inplace",
        "label": "struct GovernorUpgradeable.ProposalCore",
        "members": [
          {
            "astId": 12065,
            "contract": "contracts/DAO.sol:DAO",
            "label": "voteStart",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(BlockNumber)4869_storage"
          },
          {
            "astId": 12068,
            "contract": "contracts/DAO.sol:DAO",
            "label": "voteEnd",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(BlockNumber)4869_storage"
          },
          {
            "astId": 12071,
            "contract": "contracts/DAO.sol:DAO",
            "label": "category",
            "offset": 0,
            "slot": "2",
            "type": "t_enum(ProposalCategory)12062"
          },
          {
            "astId": 12073,
            "contract": "contracts/DAO.sol:DAO",
            "label": "executed",
            "offset": 1,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 12075,
            "contract": "contracts/DAO.sol:DAO",
            "label": "canceled",
            "offset": 2,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(ProposalVote)11344_storage": {
        "encoding": "inplace",
        "label": "struct GovernorCountingSimpleUpgradeable.ProposalVote",
        "members": [
          {
            "astId": 11335,
            "contract": "contracts/DAO.sol:DAO",
            "label": "againstVotes",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 11337,
            "contract": "contracts/DAO.sol:DAO",
            "label": "forVotes",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 11339,
            "contract": "contracts/DAO.sol:DAO",
            "label": "abstainVotes",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 11343,
            "contract": "contracts/DAO.sol:DAO",
            "label": "hasVoted",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint224": {
        "encoding": "inplace",
        "label": "uint224",
        "numberOfBytes": "28"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
