{
  "address": "0x3e448EFE0bE71A6a29C859AcA155fb461b28FD8D",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "concernedCouncilMember",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "removedOrAdded",
          "type": "bool"
        }
      ],
      "name": "ChangeInCouncilMember",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "accountAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "currentStatus",
          "type": "uint256"
        }
      ],
      "name": "ChangeInMembershipStatus",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldWallet",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newWallet",
          "type": "address"
        }
      ],
      "name": "ChangeInWalletAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "fromDelegate",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "toDelegate",
          "type": "address"
        }
      ],
      "name": "DelegateChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBalance",
          "type": "uint256"
        }
      ],
      "name": "DelegateVotesChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_adr",
          "type": "address"
        }
      ],
      "name": "addCouncilMember",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_adr",
          "type": "address"
        }
      ],
      "name": "approveMembership",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "councilMembers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        }
      ],
      "name": "delegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "delegateBySig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "delegates",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCouncilMembersLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_adr",
          "type": "address"
        }
      ],
      "name": "getFirstApproval",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMembersLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_adr",
          "type": "address"
        }
      ],
      "name": "getMembershipStatus",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getPastTotalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getPastVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_firstCouncilMember",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_secondCouncilMember",
          "type": "address"
        },
        {
          "internalType": "contract Wallet",
          "name": "_walletContract",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_adr",
          "type": "address"
        }
      ],
      "name": "isCouncilMember",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockMembership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "members",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "membershipActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "membershipFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumCouncilMembers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nextMembershipFeePayment",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "payMembershipFee",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_adr",
          "type": "address"
        }
      ],
      "name": "removeCouncilMember",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_adr",
          "type": "address"
        }
      ],
      "name": "removeMember",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "removeMembersThatDidntPay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestMembership",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMembershipFee",
          "type": "uint256"
        }
      ],
      "name": "setMembershipFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMinimumCouncilMembers",
          "type": "uint256"
        }
      ],
      "name": "setMinimumCouncilMembers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Wallet",
          "name": "newWallet",
          "type": "address"
        }
      ],
      "name": "setNewWalletAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4b403ca4bedc76a2fdff9f8f0e9bfd961862c0f4043922aeb056d340551aeec5",
  "receipt": {
    "to": null,
    "from": "0xaC37Eb0d57f261AB95D3c65B8E8D93a60c128F50",
    "contractAddress": "0x3e448EFE0bE71A6a29C859AcA155fb461b28FD8D",
    "transactionIndex": 41,
    "gasUsed": "2107462",
    "logsBloom": "0x
    "blockHash": "0xcc31589efb3763bd36c7e9c8c57ab39f18964e37185023d0e559a07adf8ebdb3",
    "transactionHash": "0x4b403ca4bedc76a2fdff9f8f0e9bfd961862c0f4043922aeb056d340551aeec5",
    "logs": [],
    "blockNumber": 8923755,
    "cumulativeGasUsed": "6403466",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "5e7ead6f489ba1541e29a5c0da5dc006",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"concernedCouncilMember\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"removedOrAdded\",\"type\":\"bool\"}],\"name\":\"ChangeInCouncilMember\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"accountAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"currentStatus\",\"type\":\"uint256\"}],\"name\":\"ChangeInMembershipStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"ChangeInWalletAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adr\",\"type\":\"address\"}],\"name\":\"addCouncilMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adr\",\"type\":\"address\"}],\"name\":\"approveMembership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"councilMembers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCouncilMembersLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adr\",\"type\":\"address\"}],\"name\":\"getFirstApproval\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMembersLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adr\",\"type\":\"address\"}],\"name\":\"getMembershipStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPastTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPastVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_firstCouncilMember\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_secondCouncilMember\",\"type\":\"address\"},{\"internalType\":\"contract Wallet\",\"name\":\"_walletContract\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adr\",\"type\":\"address\"}],\"name\":\"isCouncilMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockMembership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"members\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"membershipActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"membershipFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumCouncilMembers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nextMembershipFeePayment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payMembershipFee\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adr\",\"type\":\"address\"}],\"name\":\"removeCouncilMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adr\",\"type\":\"address\"}],\"name\":\"removeMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeMembersThatDidntPay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestMembership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMembershipFee\",\"type\":\"uint256\"}],\"name\":\"setMembershipFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinimumCouncilMembers\",\"type\":\"uint256\"}],\"name\":\"setMinimumCouncilMembers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Wallet\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"setNewWalletAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"delegate(address)\":{\"details\":\"Delegates votes from the sender to `delegatee`.\"},\"delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Delegates votes from signer to `delegatee`.\"},\"delegates(address)\":{\"details\":\"Returns the delegate that `account` has chosen.\"},\"getPastTotalSupply(uint256)\":{\"details\":\"Returns the total supply of votes available at the end of a past block (`blockNumber`). NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes. Votes that have not been delegated are still part of total supply, even though they would not participate in a vote.\"},\"getPastVotes(address,uint256)\":{\"details\":\"Returns the amount of votes that `account` had at the end of a past block (`blockNumber`).\"},\"getVotes(address)\":{\"details\":\"Returns the current amount of votes that `account` has.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Membership.sol\":\"Membership\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/governance/utils/IVotesUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (governance/utils/IVotes.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Common interface for {ERC20Votes}, {ERC721Votes}, and other {Votes}-enabled contracts.\\n *\\n * _Available since v4.5._\\n */\\ninterface IVotesUpgradeable {\\n    /**\\n     * @dev Emitted when an account changes their delegate.\\n     */\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n    /**\\n     * @dev Emitted when a token transfer or delegate change results in changes to a delegate's number of votes.\\n     */\\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\\n\\n    /**\\n     * @dev Returns the current amount of votes that `account` has.\\n     */\\n    function getVotes(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of votes that `account` had at the end of a past block (`blockNumber`).\\n     */\\n    function getPastVotes(address account, uint256 blockNumber) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the total supply of votes available at the end of a past block (`blockNumber`).\\n     *\\n     * NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes.\\n     * Votes that have not been delegated are still part of total supply, even though they would not participate in a\\n     * vote.\\n     */\\n    function getPastTotalSupply(uint256 blockNumber) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the delegate that `account` has chosen.\\n     */\\n    function delegates(address account) external view returns (address);\\n\\n    /**\\n     * @dev Delegates votes from the sender to `delegatee`.\\n     */\\n    function delegate(address delegatee) external;\\n\\n    /**\\n     * @dev Delegates votes from signer to `delegatee`.\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0xe8e2d2f70db1913260634f710cc057d669b06eccf4dca27e18b79c3bbb101da6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CheckpointsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (utils/Checkpoints.sol)\\n// This file was procedurally generated from scripts/generate/templates/Checkpoints.js.\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SafeCastUpgradeable.sol\\\";\\n\\n/**\\n * @dev This library defines the `History` struct, for checkpointing values as they change at different points in\\n * time, and later looking up past values by block number. See {Votes} as an example.\\n *\\n * To create a history of checkpoints define a variable type `Checkpoints.History` in your contract, and store a new\\n * checkpoint for the current transaction block using the {push} function.\\n *\\n * _Available since v4.5._\\n */\\nlibrary CheckpointsUpgradeable {\\n    struct History {\\n        Checkpoint[] _checkpoints;\\n    }\\n\\n    struct Checkpoint {\\n        uint32 _blockNumber;\\n        uint224 _value;\\n    }\\n\\n    /**\\n     * @dev Returns the value at a given block number. If a checkpoint is not available at that block, the closest one\\n     * before it is returned, or zero otherwise. Because the number returned corresponds to that at the end of the\\n     * block, the requested block number must be in the past, excluding the current block.\\n     */\\n    function getAtBlock(History storage self, uint256 blockNumber) internal view returns (uint256) {\\n        require(blockNumber < block.number, \\\"Checkpoints: block not yet mined\\\");\\n        uint32 key = SafeCastUpgradeable.toUint32(blockNumber);\\n\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value at a given block number. If a checkpoint is not available at that block, the closest one\\n     * before it is returned, or zero otherwise. Similar to {upperLookup} but optimized for the case when the searched\\n     * checkpoint is probably \\\"recent\\\", defined as being among the last sqrt(N) checkpoints where N is the number of\\n     * checkpoints.\\n     */\\n    function getAtProbablyRecentBlock(History storage self, uint256 blockNumber) internal view returns (uint256) {\\n        require(blockNumber < block.number, \\\"Checkpoints: block not yet mined\\\");\\n        uint32 key = SafeCastUpgradeable.toUint32(blockNumber);\\n\\n        uint256 len = self._checkpoints.length;\\n\\n        uint256 low = 0;\\n        uint256 high = len;\\n\\n        if (len > 5) {\\n            uint256 mid = len - MathUpgradeable.sqrt(len);\\n            if (key < _unsafeAccess(self._checkpoints, mid)._blockNumber) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, low, high);\\n\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Pushes a value onto a History so that it is stored as the checkpoint for the current block.\\n     *\\n     * Returns previous value and new value.\\n     */\\n    function push(History storage self, uint256 value) internal returns (uint256, uint256) {\\n        return _insert(self._checkpoints, SafeCastUpgradeable.toUint32(block.number), SafeCastUpgradeable.toUint224(value));\\n    }\\n\\n    /**\\n     * @dev Pushes a value onto a History, by updating the latest value using binary operation `op`. The new value will\\n     * be set to `op(latest, delta)`.\\n     *\\n     * Returns previous value and new value.\\n     */\\n    function push(\\n        History storage self,\\n        function(uint256, uint256) view returns (uint256) op,\\n        uint256 delta\\n    ) internal returns (uint256, uint256) {\\n        return push(self, op(latest(self), delta));\\n    }\\n\\n    /**\\n     * @dev Returns the value in the most recent checkpoint, or zero if there are no checkpoints.\\n     */\\n    function latest(History storage self) internal view returns (uint224) {\\n        uint256 pos = self._checkpoints.length;\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns whether there is a checkpoint in the structure (i.e. it is not empty), and if so the key and value\\n     * in the most recent checkpoint.\\n     */\\n    function latestCheckpoint(History storage self)\\n        internal\\n        view\\n        returns (\\n            bool exists,\\n            uint32 _blockNumber,\\n            uint224 _value\\n        )\\n    {\\n        uint256 pos = self._checkpoints.length;\\n        if (pos == 0) {\\n            return (false, 0, 0);\\n        } else {\\n            Checkpoint memory ckpt = _unsafeAccess(self._checkpoints, pos - 1);\\n            return (true, ckpt._blockNumber, ckpt._value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the number of checkpoint.\\n     */\\n    function length(History storage self) internal view returns (uint256) {\\n        return self._checkpoints.length;\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into an ordered list of checkpoints, either by inserting a new checkpoint,\\n     * or by updating the last one.\\n     */\\n    function _insert(\\n        Checkpoint[] storage self,\\n        uint32 key,\\n        uint224 value\\n    ) private returns (uint224, uint224) {\\n        uint256 pos = self.length;\\n\\n        if (pos > 0) {\\n            // Copying to memory is important here.\\n            Checkpoint memory last = _unsafeAccess(self, pos - 1);\\n\\n            // Checkpoints keys must be increasing.\\n            require(last._blockNumber <= key, \\\"Checkpoint: invalid key\\\");\\n\\n            // Update or push new checkpoint\\n            if (last._blockNumber == key) {\\n                _unsafeAccess(self, pos - 1)._value = value;\\n            } else {\\n                self.push(Checkpoint({_blockNumber: key, _value: value}));\\n            }\\n            return (last._value, value);\\n        } else {\\n            self.push(Checkpoint({_blockNumber: key, _value: value}));\\n            return (0, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the index of the oldest checkpoint whose key is greater than the search key, or `high` if there is none.\\n     * `low` and `high` define a section where to do the search, with inclusive `low` and exclusive `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _upperBinaryLookup(\\n        Checkpoint[] storage self,\\n        uint32 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = MathUpgradeable.average(low, high);\\n            if (_unsafeAccess(self, mid)._blockNumber > key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Return the index of the oldest checkpoint whose key is greater or equal than the search key, or `high` if there is none.\\n     * `low` and `high` define a section where to do the search, with inclusive `low` and exclusive `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _lowerBinaryLookup(\\n        Checkpoint[] storage self,\\n        uint32 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = MathUpgradeable.average(low, high);\\n            if (_unsafeAccess(self, mid)._blockNumber < key) {\\n                low = mid + 1;\\n            } else {\\n                high = mid;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\\n     */\\n    function _unsafeAccess(Checkpoint[] storage self, uint256 pos) private pure returns (Checkpoint storage result) {\\n        assembly {\\n            mstore(0, self.slot)\\n            result.slot := add(keccak256(0, 0x20), pos)\\n        }\\n    }\\n\\n    struct Trace224 {\\n        Checkpoint224[] _checkpoints;\\n    }\\n\\n    struct Checkpoint224 {\\n        uint32 _key;\\n        uint224 _value;\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into a Trace224 so that it is stored as the checkpoint.\\n     *\\n     * Returns previous value and new value.\\n     */\\n    function push(\\n        Trace224 storage self,\\n        uint32 key,\\n        uint224 value\\n    ) internal returns (uint224, uint224) {\\n        return _insert(self._checkpoints, key, value);\\n    }\\n\\n    /**\\n     * @dev Returns the value in the oldest checkpoint with key greater or equal than the search key, or zero if there is none.\\n     */\\n    function lowerLookup(Trace224 storage self, uint32 key) internal view returns (uint224) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _lowerBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == len ? 0 : _unsafeAccess(self._checkpoints, pos)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the most recent checkpoint with key lower or equal than the search key.\\n     */\\n    function upperLookup(Trace224 storage self, uint32 key) internal view returns (uint224) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the most recent checkpoint, or zero if there are no checkpoints.\\n     */\\n    function latest(Trace224 storage self) internal view returns (uint224) {\\n        uint256 pos = self._checkpoints.length;\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns whether there is a checkpoint in the structure (i.e. it is not empty), and if so the key and value\\n     * in the most recent checkpoint.\\n     */\\n    function latestCheckpoint(Trace224 storage self)\\n        internal\\n        view\\n        returns (\\n            bool exists,\\n            uint32 _key,\\n            uint224 _value\\n        )\\n    {\\n        uint256 pos = self._checkpoints.length;\\n        if (pos == 0) {\\n            return (false, 0, 0);\\n        } else {\\n            Checkpoint224 memory ckpt = _unsafeAccess(self._checkpoints, pos - 1);\\n            return (true, ckpt._key, ckpt._value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the number of checkpoint.\\n     */\\n    function length(Trace224 storage self) internal view returns (uint256) {\\n        return self._checkpoints.length;\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into an ordered list of checkpoints, either by inserting a new checkpoint,\\n     * or by updating the last one.\\n     */\\n    function _insert(\\n        Checkpoint224[] storage self,\\n        uint32 key,\\n        uint224 value\\n    ) private returns (uint224, uint224) {\\n        uint256 pos = self.length;\\n\\n        if (pos > 0) {\\n            // Copying to memory is important here.\\n            Checkpoint224 memory last = _unsafeAccess(self, pos - 1);\\n\\n            // Checkpoints keys must be increasing.\\n            require(last._key <= key, \\\"Checkpoint: invalid key\\\");\\n\\n            // Update or push new checkpoint\\n            if (last._key == key) {\\n                _unsafeAccess(self, pos - 1)._value = value;\\n            } else {\\n                self.push(Checkpoint224({_key: key, _value: value}));\\n            }\\n            return (last._value, value);\\n        } else {\\n            self.push(Checkpoint224({_key: key, _value: value}));\\n            return (0, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the index of the oldest checkpoint whose key is greater than the search key, or `high` if there is none.\\n     * `low` and `high` define a section where to do the search, with inclusive `low` and exclusive `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _upperBinaryLookup(\\n        Checkpoint224[] storage self,\\n        uint32 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = MathUpgradeable.average(low, high);\\n            if (_unsafeAccess(self, mid)._key > key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Return the index of the oldest checkpoint whose key is greater or equal than the search key, or `high` if there is none.\\n     * `low` and `high` define a section where to do the search, with inclusive `low` and exclusive `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _lowerBinaryLookup(\\n        Checkpoint224[] storage self,\\n        uint32 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = MathUpgradeable.average(low, high);\\n            if (_unsafeAccess(self, mid)._key < key) {\\n                low = mid + 1;\\n            } else {\\n                high = mid;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\\n     */\\n    function _unsafeAccess(Checkpoint224[] storage self, uint256 pos)\\n        private\\n        pure\\n        returns (Checkpoint224 storage result)\\n    {\\n        assembly {\\n            mstore(0, self.slot)\\n            result.slot := add(keccak256(0, 0x20), pos)\\n        }\\n    }\\n\\n    struct Trace160 {\\n        Checkpoint160[] _checkpoints;\\n    }\\n\\n    struct Checkpoint160 {\\n        uint96 _key;\\n        uint160 _value;\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into a Trace160 so that it is stored as the checkpoint.\\n     *\\n     * Returns previous value and new value.\\n     */\\n    function push(\\n        Trace160 storage self,\\n        uint96 key,\\n        uint160 value\\n    ) internal returns (uint160, uint160) {\\n        return _insert(self._checkpoints, key, value);\\n    }\\n\\n    /**\\n     * @dev Returns the value in the oldest checkpoint with key greater or equal than the search key, or zero if there is none.\\n     */\\n    function lowerLookup(Trace160 storage self, uint96 key) internal view returns (uint160) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _lowerBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == len ? 0 : _unsafeAccess(self._checkpoints, pos)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the most recent checkpoint with key lower or equal than the search key.\\n     */\\n    function upperLookup(Trace160 storage self, uint96 key) internal view returns (uint160) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the most recent checkpoint, or zero if there are no checkpoints.\\n     */\\n    function latest(Trace160 storage self) internal view returns (uint160) {\\n        uint256 pos = self._checkpoints.length;\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns whether there is a checkpoint in the structure (i.e. it is not empty), and if so the key and value\\n     * in the most recent checkpoint.\\n     */\\n    function latestCheckpoint(Trace160 storage self)\\n        internal\\n        view\\n        returns (\\n            bool exists,\\n            uint96 _key,\\n            uint160 _value\\n        )\\n    {\\n        uint256 pos = self._checkpoints.length;\\n        if (pos == 0) {\\n            return (false, 0, 0);\\n        } else {\\n            Checkpoint160 memory ckpt = _unsafeAccess(self._checkpoints, pos - 1);\\n            return (true, ckpt._key, ckpt._value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the number of checkpoint.\\n     */\\n    function length(Trace160 storage self) internal view returns (uint256) {\\n        return self._checkpoints.length;\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into an ordered list of checkpoints, either by inserting a new checkpoint,\\n     * or by updating the last one.\\n     */\\n    function _insert(\\n        Checkpoint160[] storage self,\\n        uint96 key,\\n        uint160 value\\n    ) private returns (uint160, uint160) {\\n        uint256 pos = self.length;\\n\\n        if (pos > 0) {\\n            // Copying to memory is important here.\\n            Checkpoint160 memory last = _unsafeAccess(self, pos - 1);\\n\\n            // Checkpoints keys must be increasing.\\n            require(last._key <= key, \\\"Checkpoint: invalid key\\\");\\n\\n            // Update or push new checkpoint\\n            if (last._key == key) {\\n                _unsafeAccess(self, pos - 1)._value = value;\\n            } else {\\n                self.push(Checkpoint160({_key: key, _value: value}));\\n            }\\n            return (last._value, value);\\n        } else {\\n            self.push(Checkpoint160({_key: key, _value: value}));\\n            return (0, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the index of the oldest checkpoint whose key is greater than the search key, or `high` if there is none.\\n     * `low` and `high` define a section where to do the search, with inclusive `low` and exclusive `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _upperBinaryLookup(\\n        Checkpoint160[] storage self,\\n        uint96 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = MathUpgradeable.average(low, high);\\n            if (_unsafeAccess(self, mid)._key > key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Return the index of the oldest checkpoint whose key is greater or equal than the search key, or `high` if there is none.\\n     * `low` and `high` define a section where to do the search, with inclusive `low` and exclusive `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _lowerBinaryLookup(\\n        Checkpoint160[] storage self,\\n        uint96 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = MathUpgradeable.average(low, high);\\n            if (_unsafeAccess(self, mid)._key < key) {\\n                low = mid + 1;\\n            } else {\\n                high = mid;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\\n     */\\n    function _unsafeAccess(Checkpoint160[] storage self, uint256 pos)\\n        private\\n        pure\\n        returns (Checkpoint160 storage result)\\n    {\\n        assembly {\\n            mstore(0, self.slot)\\n            result.slot := add(keccak256(0, 0x20), pos)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x92fe8e1836627ba1baa62a2d4bd76c52ccfe53fec6650b609af33918be967a82\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCastUpgradeable {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xcef50f95b43b038aa40aed25b62fc45906c681a5c1d504a4fdcf3bc6330a8d4b\",\"license\":\"MIT\"},\"contracts/Membership.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"./Wallet.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/CheckpointsUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/governance/utils/IVotesUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\n// we rely on time to track membership payments\\n// however, we don't care about second-level precision, as we deal with a much longer time period\\n// there is a good exaplanation about this on StackExchange https://ethereum.stackexchange.com/a/117874\\n/* solhint-disable not-rely-on-time */\\ncontract Membership is Initializable, IVotesUpgradeable, OwnableUpgradeable {\\n    using CheckpointsUpgradeable for CheckpointsUpgradeable.History;\\n\\n    enum MembershipStatus {\\n        nonMember,\\n        requesting,\\n        approvedByOne,\\n        isMember\\n    }\\n\\n    Wallet private _wallet;\\n\\n    mapping(address => uint256) public nextMembershipFeePayment;\\n\\n    // used for IVotes\\n    mapping(address => CheckpointsUpgradeable.History) private _voteCheckpoints;\\n    CheckpointsUpgradeable.History private _totalCheckpoints;\\n\\n    uint256 public minimumCouncilMembers;\\n    uint256 public membershipFee;\\n\\n    address[] public councilMembers;\\n    address[] public members;\\n\\n    mapping(address => MembershipStatus) internal membershipList;\\n    mapping(address => address) internal firstApproval;\\n\\n    bool public membershipActive;\\n\\n    event ChangeInMembershipStatus(\\n        address indexed accountAddress,\\n        uint256 indexed currentStatus\\n    );\\n\\n    event ChangeInCouncilMember(\\n        address indexed concernedCouncilMember,\\n        bool removedOrAdded\\n    );\\n\\n    event ChangeInWalletAddress(\\n        address indexed oldWallet,\\n        address indexed newWallet\\n    );\\n\\n    modifier nonMemberOnly() {\\n        require(\\n            membershipList[msg.sender] == MembershipStatus.nonMember,\\n            \\\"only non-members\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier memberOnly() {\\n        require(\\n            membershipList[msg.sender] == MembershipStatus.isMember,\\n            \\\"only members\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier councilMemberOnly() {\\n        require(isCouncilMember(msg.sender) == true, \\\"only council member\\\");\\n        _;\\n    }\\n\\n    function initialize(\\n        address _firstCouncilMember,\\n        address _secondCouncilMember,\\n        Wallet _walletContract\\n    ) public initializer {\\n        __Ownable_init();\\n\\n        minimumCouncilMembers = 2;\\n        membershipFee = 30000 wei;\\n        _wallet = _walletContract;\\n        membershipActive = true;\\n        emit ChangeInWalletAddress(address(0x0), address(_wallet));\\n\\n        councilMembers.push(_firstCouncilMember);\\n        councilMembers.push(_secondCouncilMember);\\n\\n        membershipList[_firstCouncilMember] = MembershipStatus.isMember;\\n        membershipList[_secondCouncilMember] = MembershipStatus.isMember;\\n\\n        members.push(_firstCouncilMember);\\n        members.push(_secondCouncilMember);\\n\\n        nextMembershipFeePayment[_firstCouncilMember] = block.timestamp;\\n        nextMembershipFeePayment[_secondCouncilMember] = block.timestamp;\\n\\n        _totalCheckpoints.push(_add, 2);\\n        _voteCheckpoints[_firstCouncilMember].push(_add, 1);\\n        _voteCheckpoints[_secondCouncilMember].push(_add, 1);\\n\\n        emit ChangeInMembershipStatus(\\n            _firstCouncilMember,\\n            uint256(MembershipStatus.isMember)\\n        );\\n\\n        emit ChangeInCouncilMember(_firstCouncilMember, true);\\n\\n        emit ChangeInMembershipStatus(\\n            _secondCouncilMember,\\n            uint256(MembershipStatus.isMember)\\n        );\\n\\n        emit ChangeInCouncilMember(_secondCouncilMember, true);\\n    }\\n\\n    function requestMembership() public nonMemberOnly returns (bool) {\\n        require(membershipActive, \\\"Membership is not active\\\");\\n        membershipList[msg.sender] = MembershipStatus.requesting;\\n        members.push(msg.sender);\\n        emit ChangeInMembershipStatus(\\n            msg.sender,\\n            uint256(MembershipStatus.requesting)\\n        );\\n        return true;\\n    }\\n\\n    function getMembershipStatus(address _adr) public view returns (uint256) {\\n        return uint256(membershipList[_adr]);\\n    }\\n\\n    function addCouncilMember(address _adr) public onlyOwner returns (bool) {\\n        require(membershipActive, \\\"Membership is not active\\\");\\n        require(\\n            membershipList[_adr] == MembershipStatus.isMember,\\n            \\\"Must be a member\\\"\\n        );\\n        require(isCouncilMember(_adr) == false, \\\"Is already council member!\\\");\\n\\n        councilMembers.push(_adr);\\n        emit ChangeInCouncilMember(_adr, true);\\n\\n        return true;\\n    }\\n\\n    function removeCouncilMember(address _adr) public returns (bool) {\\n        require(membershipActive, \\\"Membership is not active\\\");\\n        require(isCouncilMember(_adr) == true, \\\"Is no council member!\\\");\\n        require(\\n            this.getCouncilMembersLength() > minimumCouncilMembers,\\n            \\\"Min council members not met!\\\"\\n        );\\n\\n        if (msg.sender != _adr) {\\n            _checkOwner();\\n        }\\n\\n        uint256 i;\\n\\n        for (i = 0; i < this.getCouncilMembersLength() - 1; i++) {\\n            if (councilMembers[i] == _adr) {\\n                break;\\n            }\\n        }\\n\\n        if (i != this.getCouncilMembersLength() - 1) {\\n            councilMembers[i] = councilMembers[\\n                this.getCouncilMembersLength() - 1\\n            ];\\n        }\\n        councilMembers.pop();\\n\\n        emit ChangeInCouncilMember(_adr, false);\\n\\n        return true;\\n    }\\n\\n    function approveMembership(\\n        address _adr\\n    ) public councilMemberOnly returns (bool) {\\n        require(membershipActive, \\\"Membership is not active\\\");\\n        require(\\n            membershipList[_adr] == MembershipStatus.requesting ||\\n                (membershipList[_adr] == MembershipStatus.approvedByOne &&\\n                    firstApproval[_adr] != msg.sender),\\n            \\\"Invalid member status!\\\"\\n        );\\n        if (membershipList[_adr] == MembershipStatus.requesting) {\\n            membershipList[_adr] = MembershipStatus.approvedByOne;\\n            firstApproval[_adr] = msg.sender;\\n            emit ChangeInMembershipStatus(\\n                _adr,\\n                uint256(MembershipStatus.approvedByOne)\\n            );\\n        } else {\\n            membershipList[_adr] = MembershipStatus.isMember;\\n\\n            emit ChangeInMembershipStatus(\\n                _adr,\\n                uint256(MembershipStatus.isMember)\\n            );\\n        }\\n        return true;\\n    }\\n\\n    function payMembershipFee() public payable memberOnly {\\n        require(membershipActive, \\\"Membership is not active\\\");\\n        uint256 nextDueDate = nextMembershipFeePayment[msg.sender];\\n        require(nextDueDate <= block.timestamp, \\\"Membership fee not due yet.\\\");\\n        // we don't say \\\"no\\\" if somebody pays more than they should :)\\n        require(msg.value >= membershipFee, \\\"Membership fee not covered!\\\");\\n\\n        nextMembershipFeePayment[msg.sender] = block.timestamp + 365 days;\\n        _wallet.payContribution{value: msg.value}(msg.sender);\\n\\n        if (nextDueDate == 0) {\\n            _totalCheckpoints.push(_add, 1);\\n            _voteCheckpoints[msg.sender].push(_add, 1);\\n        }\\n    }\\n\\n    function setMembershipFee(uint256 newMembershipFee) external onlyOwner {\\n        membershipFee = newMembershipFee;\\n    }\\n\\n    function setMinimumCouncilMembers(\\n        uint256 newMinimumCouncilMembers\\n    ) external onlyOwner {\\n        require(\\n            newMinimumCouncilMembers <= councilMembers.length,\\n            \\\"To few council members!\\\"\\n        );\\n        minimumCouncilMembers = newMinimumCouncilMembers;\\n    }\\n\\n    function setNewWalletAddress(Wallet newWallet) external onlyOwner {\\n        address oldWallet = address(_wallet);\\n        _wallet = newWallet;\\n        emit ChangeInWalletAddress(oldWallet, address(newWallet));\\n    }\\n\\n    function removeMember(address _adr) public {\\n        require(membershipActive, \\\"Membership is not active\\\");\\n        require(\\n            membershipList[_adr] != MembershipStatus.nonMember,\\n            \\\"Address is not a member!\\\"\\n        );\\n\\n        if (msg.sender != _adr) {\\n            _checkOwner();\\n        }\\n\\n        if (isCouncilMember(_adr)) {\\n            removeCouncilMember(_adr);\\n        }\\n\\n        _removeMember(_adr);\\n    }\\n\\n    function _removeMember(address _adr) private {\\n        if (\\n            membershipList[_adr] == MembershipStatus.isMember &&\\n            nextMembershipFeePayment[_adr] > 0\\n        ) {\\n            _totalCheckpoints.push(_subtract, 1);\\n            _voteCheckpoints[_adr].push(_subtract, 1);\\n        }\\n\\n        delete firstApproval[_adr];\\n        membershipList[_adr] = MembershipStatus.nonMember;\\n\\n        for (uint256 i = 0; i < members.length; i++) {\\n            if (members[i] == _adr) {\\n                members[i] = members[members.length - 1];\\n                members.pop();\\n                break;\\n            }\\n        }\\n\\n        emit ChangeInMembershipStatus(\\n            _adr,\\n            uint256(MembershipStatus.nonMember)\\n        );\\n    }\\n\\n    function removeMembersThatDidntPay() public {\\n        require(membershipActive, \\\"Membership is not active\\\");\\n        address[] memory toBeRemoved = new address[](members.length);\\n        uint256 toBeRemovedIndex = 0;\\n        for (uint256 i = 0; i < members.length; i++) {\\n            address member = members[i];\\n            uint256 nextPayment = nextMembershipFeePayment[member];\\n            if (nextPayment > 0 && block.timestamp > nextPayment) {\\n                if (!isCouncilMember(member)) {\\n                    toBeRemoved[toBeRemovedIndex] = member;\\n                    toBeRemovedIndex++;\\n                }\\n            }\\n        }\\n        for (uint256 i = 0; i < toBeRemoved.length; i++) {\\n            _removeMember(toBeRemoved[i]);\\n        }\\n    }\\n\\n    function getVotes(\\n        address account\\n    ) public view virtual override returns (uint256) {\\n        return _voteCheckpoints[account].latest();\\n    }\\n\\n    function getPastVotes(\\n        address account,\\n        uint256 blockNumber\\n    ) public view virtual override returns (uint256) {\\n        return _voteCheckpoints[account].getAtProbablyRecentBlock(blockNumber);\\n    }\\n\\n    function getPastTotalSupply(\\n        uint256 blockNumber\\n    ) public view virtual override returns (uint256) {\\n        require(blockNumber < block.number, \\\"Votes: block not yet mined\\\");\\n        return _totalCheckpoints.getAtProbablyRecentBlock(blockNumber);\\n    }\\n\\n    /* solhint-disable no-empty-blocks */\\n    function delegate(address delegatee) public virtual override {\\n        // doesnt need to anything\\n    }\\n\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        // is fine to be empty\\n    }\\n\\n    function getFirstApproval(address _adr) external view returns (address) {\\n        return firstApproval[_adr];\\n    }\\n\\n    /* solhint-enable no-empty-blocks */\\n\\n    function delegates(address account) external pure returns (address) {\\n        return account;\\n    }\\n\\n    function _add(uint256 a, uint256 b) private pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    function _subtract(uint256 a, uint256 b) private pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    function isCouncilMember(address _adr) public view returns (bool) {\\n        bool check = false;\\n\\n        for (uint256 i = 0; i < this.getCouncilMembersLength(); i++) {\\n            if (councilMembers[i] == _adr) {\\n                check = true;\\n                break;\\n            }\\n        }\\n\\n        return check;\\n    }\\n\\n    function getCouncilMembersLength() external view returns (uint256) {\\n        return councilMembers.length;\\n    }\\n\\n    function getMembersLength() external view returns (uint256) {\\n        return members.length;\\n    }\\n\\n    function lockMembership() public onlyOwner {\\n        membershipActive = false;\\n    }\\n}\\n/* solhint-enable not-rely-on-time */\\n\",\"keccak256\":\"0x5021a616ca5c464200b2520a553eae23dfb4fc3b1571b3d2a28da6f55781977d\",\"license\":\"UNLICENSED\"},\"contracts/Wallet.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\ncontract Wallet is Initializable, OwnableUpgradeable {\\n    uint256 public totalBalance;\\n    uint256 public totalAllowance;\\n\\n    uint256 private _knownSenderLength;\\n    address[] private _knownSender;\\n\\n    mapping(address => uint256) public individualContribution;\\n    mapping(address => uint256) public allowance;\\n    mapping(address => uint256) public withdrawingAllowance;\\n\\n    event IncreaseAllowance(address indexed account, uint256 amount);\\n    event AcceptPayment(address indexed account, uint256 amount);\\n    event WithdrawFunds(address indexed account, uint256 amount);\\n\\n    modifier knownSender() {\\n        require(isKnownSender(msg.sender) == true, \\\"only known senders\\\");\\n        _;\\n    }\\n\\n    function initialize() public initializer {\\n        __Ownable_init();\\n        addKnownSender(msg.sender);\\n        _knownSenderLength = 1;\\n    }\\n\\n    receive() external payable {\\n        totalBalance += msg.value;\\n        individualContribution[msg.sender] += msg.value;\\n\\n        emit AcceptPayment(msg.sender, msg.value);\\n    }\\n\\n    function addKnownSender(address _adr) public onlyOwner {\\n        if (isKnownSender(_adr) == false) {\\n            _knownSender.push(_adr);\\n            _knownSenderLength++;\\n        }\\n    }\\n\\n    function isKnownSender(address _adr) public view returns (bool) {\\n        bool check = false;\\n        for (uint256 i = 0; i < _knownSenderLength; i++) {\\n            if (_knownSender[i] == _adr) {\\n                check = true;\\n                break;\\n            }\\n        }\\n        return check;\\n    }\\n\\n    function removeKnownSender(address _adr) public onlyOwner {\\n        require(_adr != owner(), \\\"Owner cannot be removed!\\\");\\n\\n        uint256 i;\\n\\n        for (i = 0; i < _knownSenderLength - 1; i++) {\\n            if (_knownSender[i] == _adr) {\\n                break;\\n            }\\n        }\\n\\n        if (i != _knownSenderLength - 1) {\\n            _knownSender[i] = _knownSender[_knownSenderLength - 1];\\n        }\\n\\n        _knownSenderLength--;\\n    }\\n\\n    function increaseAllowance(\\n        address _adr,\\n        uint256 _amount\\n    ) public onlyOwner returns (bool) {\\n        require(\\n            (totalAllowance + _amount) <= totalBalance,\\n            \\\"Keep allowance below balance!\\\"\\n        );\\n        allowance[_adr] += _amount;\\n        totalAllowance += _amount;\\n        emit IncreaseAllowance(_adr, _amount);\\n        return true;\\n    }\\n\\n    function payContribution(\\n        address _adr\\n    ) public payable knownSender returns (bool) {\\n        uint256 _amount = msg.value;\\n        totalBalance += _amount;\\n        individualContribution[_adr] += _amount;\\n\\n        emit AcceptPayment(_adr, _amount);\\n\\n        return true;\\n    }\\n\\n    function withdrawMoney(address payable _adr) public returns (bool) {\\n        require(allowance[_adr] > 0, \\\"No allowance for this account!\\\");\\n\\n        uint256 operatingAmount = allowance[_adr];\\n\\n        allowance[_adr] -= operatingAmount;\\n        totalAllowance -= withdrawingAllowance[_adr];\\n        totalBalance -= withdrawingAllowance[_adr];\\n        withdrawingAllowance[_adr] = 0;\\n\\n        _adr.transfer(operatingAmount);\\n\\n        emit WithdrawFunds(_adr, totalAllowance);\\n        return true;\\n    }\\n\\n    function liquidate(address payable liquidator) public onlyOwner {\\n        uint256 amountToLiquidate = totalBalance - totalAllowance;\\n        if (amountToLiquidate > 0) {\\n            liquidator.transfer(amountToLiquidate);\\n            emit WithdrawFunds(liquidator, amountToLiquidate);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd3b8355724d245ba0521b581e97d52abd2b8617ea57e62003631d46a7fa20a84\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612525806100206000396000f3fe6080604052600436106101735760003560e01c80630b1ca49a14610178578063146677601461019a578063248e9bf8146101c9578063289f53751461020f5780633a46b1a81461022f5780633b18fd1e1461025d5780635720439d1461028a578063587cde1e146102aa5780635c19a95c146102c85780635daf08ca146102e6578063715018a614610306578063751a6a341461031b57806379a68cf11461033b5780637b10b2931461035b5780638da5cb5b146103705780638e539e8c146103855780639ab24eb0146103a5578063a7f2f4e2146103c5578063affc38bc146103e5578063bfe5810b146103ed578063c0c53b8b1461040d578063c3cda5201461042d578063c3fdd4cb14610450578063c60b2f8214610465578063c713a28914610485578063d55fda0d1461049b578063da7474aa146104b0578063ebd7dc52146104c6578063f1d3b27d146104e6578063f2fde38b146104fb578063f4c970cd1461051b578063fc53c8211461053b575b600080fd5b34801561018457600080fd5b5061019861019336600461218f565b610550565b005b3480156101a657600080fd5b50606f546101b49060ff1681565b60405190151581526020015b60405180910390f35b3480156101d557600080fd5b506102026101e436600461218f565b6001600160a01b039081166000908152606e60205260409020541690565b6040516101c091906121ac565b34801561021b57600080fd5b506101b461022a36600461218f565b61062a565b34801561023b57600080fd5b5061024f61024a3660046121c0565b61077f565b6040519081526020016101c0565b34801561026957600080fd5b5061024f61027836600461218f565b60666020526000908152604090205481565b34801561029657600080fd5b506101b46102a536600461218f565b6107aa565b3480156102b657600080fd5b506102026102c536600461218f565b90565b3480156102d457600080fd5b506101986102e336600461218f565b50565b3480156102f257600080fd5b506102026103013660046121ec565b610b64565b34801561031257600080fd5b50610198610b8e565b34801561032757600080fd5b506102026103363660046121ec565b610ba2565b34801561034757600080fd5b506101b461035636600461218f565b610bb2565b34801561036757600080fd5b506101b4610dcd565b34801561037c57600080fd5b50610202610ebc565b34801561039157600080fd5b5061024f6103a03660046121ec565b610ecb565b3480156103b157600080fd5b5061024f6103c036600461218f565b610f24565b3480156103d157600080fd5b5061024f6103e036600461218f565b610f54565b610198610f81565b3480156103f957600080fd5b5061019861040836600461218f565b611185565b34801561041957600080fd5b50610198610428366004612205565b6111cd565b34801561043957600080fd5b50610198610448366004612250565b505050505050565b34801561045c57600080fd5b50610198611507565b34801561047157600080fd5b506101986104803660046121ec565b61166c565b34801561049157600080fd5b5061024f606a5481565b3480156104a757600080fd5b50606b5461024f565b3480156104bc57600080fd5b5061024f60695481565b3480156104d257600080fd5b506101b46104e136600461218f565b611679565b3480156104f257600080fd5b50610198611740565b34801561050757600080fd5b5061019861051636600461218f565b611754565b34801561052757600080fd5b506101986105363660046121ec565b6117ca565b34801561054757600080fd5b50606c5461024f565b606f5460ff1661057b5760405162461bcd60e51b8152600401610572906122b2565b60405180910390fd5b6001600160a01b0381166000908152606d602052604081205460ff1660038111156105a8576105a86122e4565b036105f05760405162461bcd60e51b815260206004820152601860248201527741646472657373206973206e6f742061206d656d6265722160401b6044820152606401610572565b336001600160a01b0382161461060857610608611823565b61061181611679565b156106215761061f816107aa565b505b6102e381611882565b6000610634611823565b606f5460ff166106565760405162461bcd60e51b8152600401610572906122b2565b60036001600160a01b0383166000908152606d602052604090205460ff166003811115610685576106856122e4565b146106c55760405162461bcd60e51b815260206004820152601060248201526f26bab9ba10313290309036b2b6b132b960811b6044820152606401610572565b6106ce82611679565b156107185760405162461bcd60e51b815260206004820152601a602482015279497320616c726561647920636f756e63696c206d656d6265722160301b6044820152606401610572565b606b8054600180820183556000929092526000805160206124908339815191520180546001600160a01b0319166001600160a01b038516908117909155604051918252906000805160206124708339815191529060200160405180910390a2506001919050565b6001600160a01b03821660009081526067602052604081206107a19083611a7a565b90505b92915050565b606f5460009060ff166107cf5760405162461bcd60e51b8152600401610572906122b2565b6107d882611679565b15156001146108215760405162461bcd60e51b81526020600482015260156024820152744973206e6f20636f756e63696c206d656d6265722160581b6044820152606401610572565b606954306001600160a01b031663d55fda0d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610862573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088691906122fa565b116108d25760405162461bcd60e51b815260206004820152601c60248201527b4d696e20636f756e63696c206d656d62657273206e6f74206d65742160201b6044820152606401610572565b336001600160a01b038316146108ea576108ea611823565b60005b6001306001600160a01b031663d55fda0d6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561092d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095191906122fa565b61095b9190612329565b8110156109ab57826001600160a01b0316606b828154811061097f5761097f61233c565b6000918252602090912001546001600160a01b0316146109ab57806109a381612352565b9150506108ed565b6001306001600160a01b031663d55fda0d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109eb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0f91906122fa565b610a199190612329565b8114610afa57606b6001306001600160a01b031663d55fda0d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8591906122fa565b610a8f9190612329565b81548110610a9f57610a9f61233c565b600091825260209091200154606b80546001600160a01b039092169183908110610acb57610acb61233c565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b606b805480610b0b57610b0b61236b565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556040519182526001600160a01b03851691600080516020612470833981519152910160405180910390a250600192915050565b606c8181548110610b7457600080fd5b6000918252602090912001546001600160a01b0316905081565b610b96611823565b610ba06000611b95565b565b606b8181548110610b7457600080fd5b6000610bbd33611679565b1515600114610c045760405162461bcd60e51b815260206004820152601360248201527237b7363c9031b7bab731b4b61036b2b6b132b960691b6044820152606401610572565b606f5460ff16610c265760405162461bcd60e51b8152600401610572906122b2565b60016001600160a01b0383166000908152606d602052604090205460ff166003811115610c5557610c556122e4565b1480610cb2575060026001600160a01b0383166000908152606d602052604090205460ff166003811115610c8b57610c8b6122e4565b148015610cb257506001600160a01b038281166000908152606e6020526040902054163314155b610cf75760405162461bcd60e51b8152602060048201526016602482015275496e76616c6964206d656d626572207374617475732160501b6044820152606401610572565b60016001600160a01b0383166000908152606d602052604090205460ff166003811115610d2657610d266122e4565b03610d87576001600160a01b0382166000818152606d602090815260408083208054600260ff199091168117909155606e90925280832080546001600160a01b03191633179055519092916000805160206124d083398151915291a3610dc5565b6001600160a01b0382166000818152606d6020526040808220805460ff1916600390811790915590519092916000805160206124d083398151915291a35b506001919050565b600080336000908152606d602052604090205460ff166003811115610df457610df46122e4565b14610e345760405162461bcd60e51b815260206004820152601060248201526f6f6e6c79206e6f6e2d6d656d6265727360801b6044820152606401610572565b606f5460ff16610e565760405162461bcd60e51b8152600401610572906122b2565b336000818152606d6020526040808220805460ff19166001908117909155606c805480830182559084526000805160206124b08339815191520180546001600160a01b0319168517905590519092916000805160206124d083398151915291a350600190565b6033546001600160a01b031690565b6000438210610f195760405162461bcd60e51b815260206004820152601a602482015279159bdd195cce88189b1bd8dac81b9bdd081e595d081b5a5b995960321b6044820152606401610572565b6107a4606883611a7a565b6001600160a01b0381166000908152606760205260408120610f4590611be7565b6001600160e01b031692915050565b6001600160a01b0381166000908152606d602052604081205460ff1660038111156107a4576107a46122e4565b6003336000908152606d602052604090205460ff166003811115610fa757610fa76122e4565b14610fe35760405162461bcd60e51b815260206004820152600c60248201526b6f6e6c79206d656d6265727360a01b6044820152606401610572565b606f5460ff166110055760405162461bcd60e51b8152600401610572906122b2565b33600090815260666020526040902054428111156110635760405162461bcd60e51b815260206004820152601b60248201527a26b2b6b132b939b434b8103332b2903737ba10323ab2903cb2ba1760291b6044820152606401610572565b606a543410156110b35760405162461bcd60e51b815260206004820152601b60248201527a4d656d6265727368697020666565206e6f7420636f76657265642160281b6044820152606401610572565b6110c1426301e13380612381565b3360008181526066602052604090819020929092556065549151631c4356c560e21b81526001600160a01b039092169163710d5b1491349161110691906004016121ac565b60206040518083038185885af1158015611124573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906111499190612394565b50806000036102e3576111616068611c216001611c2d565b505033600090815260676020526040902061118090611c216001611c2d565b505050565b61118d611823565b606580546001600160a01b038381166001600160a01b03198316811790935560405191169190829060008051602061245083398151915290600090a35050565b600054610100900460ff16158080156111ed5750600054600160ff909116105b806112075750303b158015611207575060005460ff166001145b61126a5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610572565b6000805460ff19166001179055801561128d576000805461ff0019166101001790555b611295611c65565b6002606955617530606a55606580546001600160a01b0319166001600160a01b038416908117909155606f805460ff19166001179055604051600090600080516020612450833981519152908290a3606b80546001808201835560008051602061249083398151915291820180546001600160a01b038981166001600160a01b031992831681179093558554808501909655949093018054948816948416851790556000818152606d60209081526040808320805460ff19908116600390811790925588855282852080549091169091179055606c805480870182556000805160206124b0833981519152908101805489168717905581549687019091559490940180549095168617909455908152606690925280822042908190559282529020556113c66068611c216002611c2d565b50506001600160a01b03841660009081526067602052604090206113ee90611c216001611c2d565b50506001600160a01b038316600090815260676020526040902061141690611c216001611c2d565b50600390506040516001600160a01b038616906000805160206124d083398151915290600090a3604051600181526001600160a01b038516906000805160206124708339815191529060200160405180910390a260036040516001600160a01b038516906000805160206124d083398151915290600090a3604051600181526001600160a01b038416906000805160206124708339815191529060200160405180910390a28015611501576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b606f5460ff166115295760405162461bcd60e51b8152600401610572906122b2565b606c546000906001600160401b03811115611546576115466123b6565b60405190808252806020026020018201604052801561156f578160200160208202803683370190505b5090506000805b606c5481101561162b576000606c82815481106115955761159561233c565b60009182526020808320909101546001600160a01b0316808352606690915260409091205490915080158015906115cb57508042115b15611616576115d982611679565b61161657818585815181106115f0576115f061233c565b6001600160a01b03909216602092830291909101909101528361161281612352565b9450505b5050808061162390612352565b915050611576565b5060005b82518110156111805761165a83828151811061164d5761164d61233c565b6020026020010151611882565b8061166481612352565b91505061162f565b611674611823565b606a55565b600080805b306001600160a01b031663d55fda0d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e091906122fa565b81101561173957836001600160a01b0316606b82815481106117045761170461233c565b6000918252602090912001546001600160a01b0316036117275760019150611739565b8061173181612352565b91505061167e565b5092915050565b611748611823565b606f805460ff19169055565b61175c611823565b6001600160a01b0381166117c15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610572565b6102e381611b95565b6117d2611823565b606b5481111561181e5760405162461bcd60e51b8152602060048201526017602482015276546f2066657720636f756e63696c206d656d626572732160481b6044820152606401610572565b606955565b3361182c610ebc565b6001600160a01b031614610ba05760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610572565b60036001600160a01b0382166000908152606d602052604090205460ff1660038111156118b1576118b16122e4565b1480156118d557506001600160a01b03811660009081526066602052604090205415155b15611914576118e96068611c946001611c2d565b50506001600160a01b038116600090815260676020526040902061191190611c946001611c2d565b50505b6001600160a01b0381166000908152606e6020908152604080832080546001600160a01b0319169055606d9091528120805460ff191690555b606c54811015611a5257816001600160a01b0316606c82815481106119745761197461233c565b6000918252602090912001546001600160a01b031603611a4057606c805461199e90600190612329565b815481106119ae576119ae61233c565b600091825260209091200154606c80546001600160a01b0390921691839081106119da576119da61233c565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550606c805480611a1957611a1961236b565b600082815260209020810160001990810180546001600160a01b0319169055019055611a52565b80611a4a81612352565b91505061194d565b5060006040516001600160a01b038316906000805160206124d083398151915290600090a350565b6000438210611acb5760405162461bcd60e51b815260206004820181905260248201527f436865636b706f696e74733a20626c6f636b206e6f7420796574206d696e65646044820152606401610572565b6000611ad683611ca0565b84549091506000816005811115611b34576000611af284611d09565b611afc9085612329565b60008981526020902090915081015463ffffffff9081169086161015611b2457809150611b32565b611b2f816001612381565b92505b505b6000611b4288868585611df1565b90508015611b7d57611b6788611b59600184612329565b600091825260209091200190565b54600160201b90046001600160e01b0316611b80565b60005b6001600160e01b031698975050505050505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b80546000908015611c1757611c0183611b59600184612329565b54600160201b90046001600160e01b0316611c1a565b60005b9392505050565b60006107a18284612381565b600080611c5885611c53611c4088611be7565b6001600160e01b0316868863ffffffff16565b611e4f565b915091505b935093915050565b600054610100900460ff16611c8c5760405162461bcd60e51b8152600401610572906123cc565b610ba0611e83565b60006107a18284612329565b600063ffffffff821115611d055760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b6064820152608401610572565b5090565b600081600003611d1b57506000919050565b60006001611d2884611eb3565b901c6001901b90506001818481611d4157611d41612417565b048201901c90506001818481611d5957611d59612417565b048201901c90506001818481611d7157611d71612417565b048201901c90506001818481611d8957611d89612417565b048201901c90506001818481611da157611da1612417565b048201901c90506001818481611db957611db9612417565b048201901c90506001818481611dd157611dd1612417565b048201901c9050611c1a81828581611deb57611deb612417565b04611f47565b60005b81831015611e47576000611e088484611f5d565b60008781526020902090915063ffffffff86169082015463ffffffff161115611e3357809250611e41565b611e3e816001612381565b93505b50611df4565b509392505050565b600080611e6d84611e5f43611ca0565b611e6886611f78565b611fe1565b6001600160e01b03918216969116945092505050565b600054610100900460ff16611eaa5760405162461bcd60e51b8152600401610572906123cc565b610ba033611b95565b600080608083901c15611ec857608092831c92015b604083901c15611eda57604092831c92015b602083901c15611eec57602092831c92015b601083901c15611efe57601092831c92015b600883901c15611f1057600892831c92015b600483901c15611f2257600492831c92015b600283901c15611f3457600292831c92015b600183901c156107a45760010192915050565b6000818310611f5657816107a1565b5090919050565b6000611f6c600284841861242d565b6107a190848416612381565b60006001600160e01b03821115611d055760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20326044820152663234206269747360c81b6064820152608401610572565b825460009081908015612121576000611fff87611b59600185612329565b60408051808201909152905463ffffffff808216808452600160201b9092046001600160e01b03166020840152919250908716101561207a5760405162461bcd60e51b8152602060048201526017602482015276436865636b706f696e743a20696e76616c6964206b657960481b6044820152606401610572565b805163ffffffff8088169116036120c2578461209b88611b59600186612329565b80546001600160e01b0392909216600160201b0263ffffffff909216919091179055612111565b6040805180820190915263ffffffff80881682526001600160e01b0380881660208085019182528b54600181018d5560008d81529190912094519151909216600160201b029216919091179101555b602001519250839150611c5d9050565b50506040805180820190915263ffffffff80851682526001600160e01b0380851660208085019182528854600181018a5560008a815291822095519251909316600160201b029190931617920191909155905081611c5d565b6001600160a01b03811681146102e357600080fd5b6000602082840312156121a157600080fd5b8135611c1a8161217a565b6001600160a01b0391909116815260200190565b600080604083850312156121d357600080fd5b82356121de8161217a565b946020939093013593505050565b6000602082840312156121fe57600080fd5b5035919050565b60008060006060848603121561221a57600080fd5b83356122258161217a565b925060208401356122358161217a565b915060408401356122458161217a565b809150509250925092565b60008060008060008060c0878903121561226957600080fd5b86356122748161217a565b95506020870135945060408701359350606087013560ff8116811461229857600080fd5b9598949750929560808101359460a0909101359350915050565b6020808252601890820152774d656d62657273686970206973206e6f742061637469766560401b604082015260600190565b634e487b7160e01b600052602160045260246000fd5b60006020828403121561230c57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b818103818111156107a4576107a4612313565b634e487b7160e01b600052603260045260246000fd5b60006001820161236457612364612313565b5060010190565b634e487b7160e01b600052603160045260246000fd5b808201808211156107a4576107a4612313565b6000602082840312156123a657600080fd5b81518015158114611c1a57600080fd5b634e487b7160e01b600052604160045260246000fd5b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b634e487b7160e01b600052601260045260246000fd5b60008261244a57634e487b7160e01b600052601260045260246000fd5b50049056fe74afb8740b7c4e5a37e7035f73db16ccb6e60202bb67415581dbb39065fc23e6cc43b4a573a122d827def8c5be668587097a84743df7f01195427cafe65381c2bd43cb8ece8cd1863bcd6082d65c5b0d25665b1ce17980f0da43c0ed545f98b42b4a51ab505fc96a0952efda2ba61bcd3078d4c02c39a186ec16f21883fbe0164f1b9dde7946cb2308d2ff71fe7e03b9ffadf198ee9292fbae7c9e9e19c573f3a2646970667358221220da3413e98c42cebe363d2b052a8d1eb55c669f25390ff72dec90a4215c83d36464736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106101735760003560e01c80630b1ca49a14610178578063146677601461019a578063248e9bf8146101c9578063289f53751461020f5780633a46b1a81461022f5780633b18fd1e1461025d5780635720439d1461028a578063587cde1e146102aa5780635c19a95c146102c85780635daf08ca146102e6578063715018a614610306578063751a6a341461031b57806379a68cf11461033b5780637b10b2931461035b5780638da5cb5b146103705780638e539e8c146103855780639ab24eb0146103a5578063a7f2f4e2146103c5578063affc38bc146103e5578063bfe5810b146103ed578063c0c53b8b1461040d578063c3cda5201461042d578063c3fdd4cb14610450578063c60b2f8214610465578063c713a28914610485578063d55fda0d1461049b578063da7474aa146104b0578063ebd7dc52146104c6578063f1d3b27d146104e6578063f2fde38b146104fb578063f4c970cd1461051b578063fc53c8211461053b575b600080fd5b34801561018457600080fd5b5061019861019336600461218f565b610550565b005b3480156101a657600080fd5b50606f546101b49060ff1681565b60405190151581526020015b60405180910390f35b3480156101d557600080fd5b506102026101e436600461218f565b6001600160a01b039081166000908152606e60205260409020541690565b6040516101c091906121ac565b34801561021b57600080fd5b506101b461022a36600461218f565b61062a565b34801561023b57600080fd5b5061024f61024a3660046121c0565b61077f565b6040519081526020016101c0565b34801561026957600080fd5b5061024f61027836600461218f565b60666020526000908152604090205481565b34801561029657600080fd5b506101b46102a536600461218f565b6107aa565b3480156102b657600080fd5b506102026102c536600461218f565b90565b3480156102d457600080fd5b506101986102e336600461218f565b50565b3480156102f257600080fd5b506102026103013660046121ec565b610b64565b34801561031257600080fd5b50610198610b8e565b34801561032757600080fd5b506102026103363660046121ec565b610ba2565b34801561034757600080fd5b506101b461035636600461218f565b610bb2565b34801561036757600080fd5b506101b4610dcd565b34801561037c57600080fd5b50610202610ebc565b34801561039157600080fd5b5061024f6103a03660046121ec565b610ecb565b3480156103b157600080fd5b5061024f6103c036600461218f565b610f24565b3480156103d157600080fd5b5061024f6103e036600461218f565b610f54565b610198610f81565b3480156103f957600080fd5b5061019861040836600461218f565b611185565b34801561041957600080fd5b50610198610428366004612205565b6111cd565b34801561043957600080fd5b50610198610448366004612250565b505050505050565b34801561045c57600080fd5b50610198611507565b34801561047157600080fd5b506101986104803660046121ec565b61166c565b34801561049157600080fd5b5061024f606a5481565b3480156104a757600080fd5b50606b5461024f565b3480156104bc57600080fd5b5061024f60695481565b3480156104d257600080fd5b506101b46104e136600461218f565b611679565b3480156104f257600080fd5b50610198611740565b34801561050757600080fd5b5061019861051636600461218f565b611754565b34801561052757600080fd5b506101986105363660046121ec565b6117ca565b34801561054757600080fd5b50606c5461024f565b606f5460ff1661057b5760405162461bcd60e51b8152600401610572906122b2565b60405180910390fd5b6001600160a01b0381166000908152606d602052604081205460ff1660038111156105a8576105a86122e4565b036105f05760405162461bcd60e51b815260206004820152601860248201527741646472657373206973206e6f742061206d656d6265722160401b6044820152606401610572565b336001600160a01b0382161461060857610608611823565b61061181611679565b156106215761061f816107aa565b505b6102e381611882565b6000610634611823565b606f5460ff166106565760405162461bcd60e51b8152600401610572906122b2565b60036001600160a01b0383166000908152606d602052604090205460ff166003811115610685576106856122e4565b146106c55760405162461bcd60e51b815260206004820152601060248201526f26bab9ba10313290309036b2b6b132b960811b6044820152606401610572565b6106ce82611679565b156107185760405162461bcd60e51b815260206004820152601a602482015279497320616c726561647920636f756e63696c206d656d6265722160301b6044820152606401610572565b606b8054600180820183556000929092526000805160206124908339815191520180546001600160a01b0319166001600160a01b038516908117909155604051918252906000805160206124708339815191529060200160405180910390a2506001919050565b6001600160a01b03821660009081526067602052604081206107a19083611a7a565b90505b92915050565b606f5460009060ff166107cf5760405162461bcd60e51b8152600401610572906122b2565b6107d882611679565b15156001146108215760405162461bcd60e51b81526020600482015260156024820152744973206e6f20636f756e63696c206d656d6265722160581b6044820152606401610572565b606954306001600160a01b031663d55fda0d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610862573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088691906122fa565b116108d25760405162461bcd60e51b815260206004820152601c60248201527b4d696e20636f756e63696c206d656d62657273206e6f74206d65742160201b6044820152606401610572565b336001600160a01b038316146108ea576108ea611823565b60005b6001306001600160a01b031663d55fda0d6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561092d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095191906122fa565b61095b9190612329565b8110156109ab57826001600160a01b0316606b828154811061097f5761097f61233c565b6000918252602090912001546001600160a01b0316146109ab57806109a381612352565b9150506108ed565b6001306001600160a01b031663d55fda0d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109eb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0f91906122fa565b610a199190612329565b8114610afa57606b6001306001600160a01b031663d55fda0d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8591906122fa565b610a8f9190612329565b81548110610a9f57610a9f61233c565b600091825260209091200154606b80546001600160a01b039092169183908110610acb57610acb61233c565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b606b805480610b0b57610b0b61236b565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556040519182526001600160a01b03851691600080516020612470833981519152910160405180910390a250600192915050565b606c8181548110610b7457600080fd5b6000918252602090912001546001600160a01b0316905081565b610b96611823565b610ba06000611b95565b565b606b8181548110610b7457600080fd5b6000610bbd33611679565b1515600114610c045760405162461bcd60e51b815260206004820152601360248201527237b7363c9031b7bab731b4b61036b2b6b132b960691b6044820152606401610572565b606f5460ff16610c265760405162461bcd60e51b8152600401610572906122b2565b60016001600160a01b0383166000908152606d602052604090205460ff166003811115610c5557610c556122e4565b1480610cb2575060026001600160a01b0383166000908152606d602052604090205460ff166003811115610c8b57610c8b6122e4565b148015610cb257506001600160a01b038281166000908152606e6020526040902054163314155b610cf75760405162461bcd60e51b8152602060048201526016602482015275496e76616c6964206d656d626572207374617475732160501b6044820152606401610572565b60016001600160a01b0383166000908152606d602052604090205460ff166003811115610d2657610d266122e4565b03610d87576001600160a01b0382166000818152606d602090815260408083208054600260ff199091168117909155606e90925280832080546001600160a01b03191633179055519092916000805160206124d083398151915291a3610dc5565b6001600160a01b0382166000818152606d6020526040808220805460ff1916600390811790915590519092916000805160206124d083398151915291a35b506001919050565b600080336000908152606d602052604090205460ff166003811115610df457610df46122e4565b14610e345760405162461bcd60e51b815260206004820152601060248201526f6f6e6c79206e6f6e2d6d656d6265727360801b6044820152606401610572565b606f5460ff16610e565760405162461bcd60e51b8152600401610572906122b2565b336000818152606d6020526040808220805460ff19166001908117909155606c805480830182559084526000805160206124b08339815191520180546001600160a01b0319168517905590519092916000805160206124d083398151915291a350600190565b6033546001600160a01b031690565b6000438210610f195760405162461bcd60e51b815260206004820152601a602482015279159bdd195cce88189b1bd8dac81b9bdd081e595d081b5a5b995960321b6044820152606401610572565b6107a4606883611a7a565b6001600160a01b0381166000908152606760205260408120610f4590611be7565b6001600160e01b031692915050565b6001600160a01b0381166000908152606d602052604081205460ff1660038111156107a4576107a46122e4565b6003336000908152606d602052604090205460ff166003811115610fa757610fa76122e4565b14610fe35760405162461bcd60e51b815260206004820152600c60248201526b6f6e6c79206d656d6265727360a01b6044820152606401610572565b606f5460ff166110055760405162461bcd60e51b8152600401610572906122b2565b33600090815260666020526040902054428111156110635760405162461bcd60e51b815260206004820152601b60248201527a26b2b6b132b939b434b8103332b2903737ba10323ab2903cb2ba1760291b6044820152606401610572565b606a543410156110b35760405162461bcd60e51b815260206004820152601b60248201527a4d656d6265727368697020666565206e6f7420636f76657265642160281b6044820152606401610572565b6110c1426301e13380612381565b3360008181526066602052604090819020929092556065549151631c4356c560e21b81526001600160a01b039092169163710d5b1491349161110691906004016121ac565b60206040518083038185885af1158015611124573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906111499190612394565b50806000036102e3576111616068611c216001611c2d565b505033600090815260676020526040902061118090611c216001611c2d565b505050565b61118d611823565b606580546001600160a01b038381166001600160a01b03198316811790935560405191169190829060008051602061245083398151915290600090a35050565b600054610100900460ff16158080156111ed5750600054600160ff909116105b806112075750303b158015611207575060005460ff166001145b61126a5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610572565b6000805460ff19166001179055801561128d576000805461ff0019166101001790555b611295611c65565b6002606955617530606a55606580546001600160a01b0319166001600160a01b038416908117909155606f805460ff19166001179055604051600090600080516020612450833981519152908290a3606b80546001808201835560008051602061249083398151915291820180546001600160a01b038981166001600160a01b031992831681179093558554808501909655949093018054948816948416851790556000818152606d60209081526040808320805460ff19908116600390811790925588855282852080549091169091179055606c805480870182556000805160206124b0833981519152908101805489168717905581549687019091559490940180549095168617909455908152606690925280822042908190559282529020556113c66068611c216002611c2d565b50506001600160a01b03841660009081526067602052604090206113ee90611c216001611c2d565b50506001600160a01b038316600090815260676020526040902061141690611c216001611c2d565b50600390506040516001600160a01b038616906000805160206124d083398151915290600090a3604051600181526001600160a01b038516906000805160206124708339815191529060200160405180910390a260036040516001600160a01b038516906000805160206124d083398151915290600090a3604051600181526001600160a01b038416906000805160206124708339815191529060200160405180910390a28015611501576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b606f5460ff166115295760405162461bcd60e51b8152600401610572906122b2565b606c546000906001600160401b03811115611546576115466123b6565b60405190808252806020026020018201604052801561156f578160200160208202803683370190505b5090506000805b606c5481101561162b576000606c82815481106115955761159561233c565b60009182526020808320909101546001600160a01b0316808352606690915260409091205490915080158015906115cb57508042115b15611616576115d982611679565b61161657818585815181106115f0576115f061233c565b6001600160a01b03909216602092830291909101909101528361161281612352565b9450505b5050808061162390612352565b915050611576565b5060005b82518110156111805761165a83828151811061164d5761164d61233c565b6020026020010151611882565b8061166481612352565b91505061162f565b611674611823565b606a55565b600080805b306001600160a01b031663d55fda0d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e091906122fa565b81101561173957836001600160a01b0316606b82815481106117045761170461233c565b6000918252602090912001546001600160a01b0316036117275760019150611739565b8061173181612352565b91505061167e565b5092915050565b611748611823565b606f805460ff19169055565b61175c611823565b6001600160a01b0381166117c15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610572565b6102e381611b95565b6117d2611823565b606b5481111561181e5760405162461bcd60e51b8152602060048201526017602482015276546f2066657720636f756e63696c206d656d626572732160481b6044820152606401610572565b606955565b3361182c610ebc565b6001600160a01b031614610ba05760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610572565b60036001600160a01b0382166000908152606d602052604090205460ff1660038111156118b1576118b16122e4565b1480156118d557506001600160a01b03811660009081526066602052604090205415155b15611914576118e96068611c946001611c2d565b50506001600160a01b038116600090815260676020526040902061191190611c946001611c2d565b50505b6001600160a01b0381166000908152606e6020908152604080832080546001600160a01b0319169055606d9091528120805460ff191690555b606c54811015611a5257816001600160a01b0316606c82815481106119745761197461233c565b6000918252602090912001546001600160a01b031603611a4057606c805461199e90600190612329565b815481106119ae576119ae61233c565b600091825260209091200154606c80546001600160a01b0390921691839081106119da576119da61233c565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550606c805480611a1957611a1961236b565b600082815260209020810160001990810180546001600160a01b0319169055019055611a52565b80611a4a81612352565b91505061194d565b5060006040516001600160a01b038316906000805160206124d083398151915290600090a350565b6000438210611acb5760405162461bcd60e51b815260206004820181905260248201527f436865636b706f696e74733a20626c6f636b206e6f7420796574206d696e65646044820152606401610572565b6000611ad683611ca0565b84549091506000816005811115611b34576000611af284611d09565b611afc9085612329565b60008981526020902090915081015463ffffffff9081169086161015611b2457809150611b32565b611b2f816001612381565b92505b505b6000611b4288868585611df1565b90508015611b7d57611b6788611b59600184612329565b600091825260209091200190565b54600160201b90046001600160e01b0316611b80565b60005b6001600160e01b031698975050505050505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b80546000908015611c1757611c0183611b59600184612329565b54600160201b90046001600160e01b0316611c1a565b60005b9392505050565b60006107a18284612381565b600080611c5885611c53611c4088611be7565b6001600160e01b0316868863ffffffff16565b611e4f565b915091505b935093915050565b600054610100900460ff16611c8c5760405162461bcd60e51b8152600401610572906123cc565b610ba0611e83565b60006107a18284612329565b600063ffffffff821115611d055760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b6064820152608401610572565b5090565b600081600003611d1b57506000919050565b60006001611d2884611eb3565b901c6001901b90506001818481611d4157611d41612417565b048201901c90506001818481611d5957611d59612417565b048201901c90506001818481611d7157611d71612417565b048201901c90506001818481611d8957611d89612417565b048201901c90506001818481611da157611da1612417565b048201901c90506001818481611db957611db9612417565b048201901c90506001818481611dd157611dd1612417565b048201901c9050611c1a81828581611deb57611deb612417565b04611f47565b60005b81831015611e47576000611e088484611f5d565b60008781526020902090915063ffffffff86169082015463ffffffff161115611e3357809250611e41565b611e3e816001612381565b93505b50611df4565b509392505050565b600080611e6d84611e5f43611ca0565b611e6886611f78565b611fe1565b6001600160e01b03918216969116945092505050565b600054610100900460ff16611eaa5760405162461bcd60e51b8152600401610572906123cc565b610ba033611b95565b600080608083901c15611ec857608092831c92015b604083901c15611eda57604092831c92015b602083901c15611eec57602092831c92015b601083901c15611efe57601092831c92015b600883901c15611f1057600892831c92015b600483901c15611f2257600492831c92015b600283901c15611f3457600292831c92015b600183901c156107a45760010192915050565b6000818310611f5657816107a1565b5090919050565b6000611f6c600284841861242d565b6107a190848416612381565b60006001600160e01b03821115611d055760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20326044820152663234206269747360c81b6064820152608401610572565b825460009081908015612121576000611fff87611b59600185612329565b60408051808201909152905463ffffffff808216808452600160201b9092046001600160e01b03166020840152919250908716101561207a5760405162461bcd60e51b8152602060048201526017602482015276436865636b706f696e743a20696e76616c6964206b657960481b6044820152606401610572565b805163ffffffff8088169116036120c2578461209b88611b59600186612329565b80546001600160e01b0392909216600160201b0263ffffffff909216919091179055612111565b6040805180820190915263ffffffff80881682526001600160e01b0380881660208085019182528b54600181018d5560008d81529190912094519151909216600160201b029216919091179101555b602001519250839150611c5d9050565b50506040805180820190915263ffffffff80851682526001600160e01b0380851660208085019182528854600181018a5560008a815291822095519251909316600160201b029190931617920191909155905081611c5d565b6001600160a01b03811681146102e357600080fd5b6000602082840312156121a157600080fd5b8135611c1a8161217a565b6001600160a01b0391909116815260200190565b600080604083850312156121d357600080fd5b82356121de8161217a565b946020939093013593505050565b6000602082840312156121fe57600080fd5b5035919050565b60008060006060848603121561221a57600080fd5b83356122258161217a565b925060208401356122358161217a565b915060408401356122458161217a565b809150509250925092565b60008060008060008060c0878903121561226957600080fd5b86356122748161217a565b95506020870135945060408701359350606087013560ff8116811461229857600080fd5b9598949750929560808101359460a0909101359350915050565b6020808252601890820152774d656d62657273686970206973206e6f742061637469766560401b604082015260600190565b634e487b7160e01b600052602160045260246000fd5b60006020828403121561230c57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b818103818111156107a4576107a4612313565b634e487b7160e01b600052603260045260246000fd5b60006001820161236457612364612313565b5060010190565b634e487b7160e01b600052603160045260246000fd5b808201808211156107a4576107a4612313565b6000602082840312156123a657600080fd5b81518015158114611c1a57600080fd5b634e487b7160e01b600052604160045260246000fd5b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b634e487b7160e01b600052601260045260246000fd5b60008261244a57634e487b7160e01b600052601260045260246000fd5b50049056fe74afb8740b7c4e5a37e7035f73db16ccb6e60202bb67415581dbb39065fc23e6cc43b4a573a122d827def8c5be668587097a84743df7f01195427cafe65381c2bd43cb8ece8cd1863bcd6082d65c5b0d25665b1ce17980f0da43c0ed545f98b42b4a51ab505fc96a0952efda2ba61bcd3078d4c02c39a186ec16f21883fbe0164f1b9dde7946cb2308d2ff71fe7e03b9ffadf198ee9292fbae7c9e9e19c573f3a2646970667358221220da3413e98c42cebe363d2b052a8d1eb55c669f25390ff72dec90a4215c83d36464736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "delegate(address)": {
        "details": "Delegates votes from the sender to `delegatee`."
      },
      "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "Delegates votes from signer to `delegatee`."
      },
      "delegates(address)": {
        "details": "Returns the delegate that `account` has chosen."
      },
      "getPastTotalSupply(uint256)": {
        "details": "Returns the total supply of votes available at the end of a past block (`blockNumber`). NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes. Votes that have not been delegated are still part of total supply, even though they would not participate in a vote."
      },
      "getPastVotes(address,uint256)": {
        "details": "Returns the amount of votes that `account` had at the end of a past block (`blockNumber`)."
      },
      "getVotes(address)": {
        "details": "Returns the current amount of votes that `account` has."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1950,
        "contract": "contracts/Membership.sol:Membership",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 1953,
        "contract": "contracts/Membership.sol:Membership",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4582,
        "contract": "contracts/Membership.sol:Membership",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 419,
        "contract": "contracts/Membership.sol:Membership",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 539,
        "contract": "contracts/Membership.sol:Membership",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 9401,
        "contract": "contracts/Membership.sol:Membership",
        "label": "_wallet",
        "offset": 0,
        "slot": "101",
        "type": "t_contract(Wallet)11315"
      },
      {
        "astId": 9405,
        "contract": "contracts/Membership.sol:Membership",
        "label": "nextMembershipFeePayment",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9410,
        "contract": "contracts/Membership.sol:Membership",
        "label": "_voteCheckpoints",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_address,t_struct(History)3180_storage)"
      },
      {
        "astId": 9413,
        "contract": "contracts/Membership.sol:Membership",
        "label": "_totalCheckpoints",
        "offset": 0,
        "slot": "104",
        "type": "t_struct(History)3180_storage"
      },
      {
        "astId": 9415,
        "contract": "contracts/Membership.sol:Membership",
        "label": "minimumCouncilMembers",
        "offset": 0,
        "slot": "105",
        "type": "t_uint256"
      },
      {
        "astId": 9417,
        "contract": "contracts/Membership.sol:Membership",
        "label": "membershipFee",
        "offset": 0,
        "slot": "106",
        "type": "t_uint256"
      },
      {
        "astId": 9420,
        "contract": "contracts/Membership.sol:Membership",
        "label": "councilMembers",
        "offset": 0,
        "slot": "107",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 9423,
        "contract": "contracts/Membership.sol:Membership",
        "label": "members",
        "offset": 0,
        "slot": "108",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 9428,
        "contract": "contracts/Membership.sol:Membership",
        "label": "membershipList",
        "offset": 0,
        "slot": "109",
        "type": "t_mapping(t_address,t_enum(MembershipStatus)9398)"
      },
      {
        "astId": 9432,
        "contract": "contracts/Membership.sol:Membership",
        "label": "firstApproval",
        "offset": 0,
        "slot": "110",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 9434,
        "contract": "contracts/Membership.sol:Membership",
        "label": "membershipActive",
        "offset": 0,
        "slot": "111",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Checkpoint)3185_storage)dyn_storage": {
        "base": "t_struct(Checkpoint)3185_storage",
        "encoding": "dynamic_array",
        "label": "struct CheckpointsUpgradeable.Checkpoint[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(Wallet)11315": {
        "encoding": "inplace",
        "label": "contract Wallet",
        "numberOfBytes": "20"
      },
      "t_enum(MembershipStatus)9398": {
        "encoding": "inplace",
        "label": "enum Membership.MembershipStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_enum(MembershipStatus)9398)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => enum Membership.MembershipStatus)",
        "numberOfBytes": "32",
        "value": "t_enum(MembershipStatus)9398"
      },
      "t_mapping(t_address,t_struct(History)3180_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct CheckpointsUpgradeable.History)",
        "numberOfBytes": "32",
        "value": "t_struct(History)3180_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Checkpoint)3185_storage": {
        "encoding": "inplace",
        "label": "struct CheckpointsUpgradeable.Checkpoint",
        "members": [
          {
            "astId": 3182,
            "contract": "contracts/Membership.sol:Membership",
            "label": "_blockNumber",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 3184,
            "contract": "contracts/Membership.sol:Membership",
            "label": "_value",
            "offset": 4,
            "slot": "0",
            "type": "t_uint224"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(History)3180_storage": {
        "encoding": "inplace",
        "label": "struct CheckpointsUpgradeable.History",
        "members": [
          {
            "astId": 3179,
            "contract": "contracts/Membership.sol:Membership",
            "label": "_checkpoints",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_struct(Checkpoint)3185_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint224": {
        "encoding": "inplace",
        "label": "uint224",
        "numberOfBytes": "28"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
