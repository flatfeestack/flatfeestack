name: Build images and deploy to staging

on:
  workflow_dispatch:
  push:
    branches:
      - "main"
jobs:
  build-and-push-analyzer:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Login to DigitalOcean container registry
        run: doctl registry login --expiry-seconds 10000

      - name: Build container
        uses: docker/build-push-action@v4
        with:
          context: analyzer
          load: true
          tags: "registry.digitalocean.com/flatfeestack/analyzer:${{ github.ref_name }}"
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run analyzer
        run: docker run --env-file analyzer/.example.env --rm -d -p 9083:9083 "registry.digitalocean.com/flatfeestack/analyzer:${{ github.ref_name }}"

      - name: Check if analyzer is reachable
        uses: nick-fields/retry@v2
        with:
          timeout_seconds: 15
          max_attempts: 5
          command: curl -v localhost:9083

      - name: Push
        uses: docker/build-push-action@v4
        with:
          context: analyzer
          push: true
          tags: "registry.digitalocean.com/flatfeestack/analyzer:${{ github.ref_name }}"

  build-and-push-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Login to DigitalOcean container registry
        run: doctl registry login --expiry-seconds 10000

      - name: Build container
        uses: docker/build-push-action@v4
        with:
          context: backend
          load: true
          tags: "registry.digitalocean.com/flatfeestack/backend:${{ github.ref_name }}"
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Postgres server for testing
        run: docker run --env-file db/.example.env -p 5432:5432 -d postgres:15-alpine

      - name: Run backend
        run: docker run --env-file backend/.example.env -d --network="host" -e DB_PATH=postgresql://postgres:password@127.0.0.1:5432/flatfeestack?sslmode=disable registry.digitalocean.com/flatfeestack/backend:${{ github.ref_name }}

      - name: Check if backend is reachable
        uses: nick-fields/retry@v2
        with:
          timeout_seconds: 15
          max_attempts: 5
          command: curl -v localhost:9082

      - name: Push
        uses: docker/build-push-action@v4
        with:
          context: backend
          push: true
          tags: "registry.digitalocean.com/flatfeestack/backend:${{ github.ref_name }}"

  build-and-push-forum:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Login to DigitalOcean container registry
        run: doctl registry login --expiry-seconds 10000

      - name: Build container
        uses: docker/build-push-action@v4
        with:
          context: forum
          load: true
          tags: "registry.digitalocean.com/flatfeestack/forum:${{ github.ref_name }}"
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Postgres server for testing
        run: docker run --env-file db/.example.env -p 5432:5432 -d postgres:15-alpine

      - name: Run forum
        run: docker run --env-file forum/.example.env -d --network="host" -e DB_PATH=postgresql://postgres:password@127.0.0.1:5432/flatfeestack?sslmode=disable registry.digitalocean.com/flatfeestack/forum:${{ github.ref_name }}

      - name: Check if forum is reachable
        uses: nick-fields/retry@v2
        with:
          timeout_seconds: 15
          max_attempts: 5
          command: curl -v localhost:9086

      - name: Push
        uses: docker/build-push-action@v4
        with:
          context: forum
          push: true
          tags: "registry.digitalocean.com/flatfeestack/forum:${{ github.ref_name }}"

  build-and-push-fastauth:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Login to DigitalOcean container registry
        run: doctl registry login --expiry-seconds 10000

      - name: Build container
        uses: docker/build-push-action@v4
        with:
          context: fastauth
          load: true
          tags: "registry.digitalocean.com/flatfeestack/fastauth:${{ github.ref_name }}"
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Postgres server for testing
        run: docker run --env-file db/.example.env -p 5432:5432 -d postgres:15-alpine

      - name: Run fastauth
        run: docker run --env-file fastauth/.example.env -d --network="host" -e DB_PATH=postgresql://postgres:password@127.0.0.1:5432/flatfeestack?sslmode=disable registry.digitalocean.com/flatfeestack/fastauth:${{ github.ref_name }}

      - name: Check if fastauth is reachable
        uses: nick-fields/retry@v2
        with:
          timeout_seconds: 15
          max_attempts: 5
          command: curl -v localhost:9081

      - name: Push
        uses: docker/build-push-action@v4
        with:
          context: fastauth
          push: true
          tags: "registry.digitalocean.com/flatfeestack/fastauth:${{ github.ref_name }}"

  build-and-push-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Login to DigitalOcean container registry
        run: doctl registry login --expiry-seconds 10000

      - name: Build container
        uses: docker/build-push-action@v4
        with:
          context: frontend
          load: true
          tags: "registry.digitalocean.com/flatfeestack/frontend:${{ github.ref_name }}"
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run frontend
        run: docker run --rm -d -p 9085:9085 "registry.digitalocean.com/flatfeestack/frontend:${{ github.ref_name }}"

      - name: Check if frontend is reachable
        uses: nick-fields/retry@v2
        with:
          timeout_seconds: 15
          max_attempts: 5
          command: curl -v localhost:9085

      - name: Push
        uses: docker/build-push-action@v4
        with:
          context: frontend
          push: true
          tags: "registry.digitalocean.com/flatfeestack/frontend:${{ github.ref_name }}"

  build-and-push-payout:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Login to DigitalOcean container registry
        run: doctl registry login --expiry-seconds 10000

      - name: Build container
        uses: docker/build-push-action@v4
        with:
          context: payout
          load: true
          tags: "registry.digitalocean.com/flatfeestack/payout:${{ github.ref_name }}"
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run payout
        run: docker run --env-file payout/.example.env --rm -d -p 9084:9084 -e ETH_URL=https://goerli.infura.io/v3/9aa3d95b3bc440fa88ea12eaa4456161 -e NEO_URL=http://seed1t4.neo.org:20332 "registry.digitalocean.com/flatfeestack/payout:${{ github.ref_name }}"

      - name: Check if payout is reachable
        uses: nick-fields/retry@v2
        with:
          timeout_seconds: 15
          max_attempts: 5
          command: curl -v localhost:9084

      - name: Push
        uses: docker/build-push-action@v4
        with:
          context: payout
          push: true
          tags: "registry.digitalocean.com/flatfeestack/payout:${{ github.ref_name }}"

  build-and-push-caddy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Login to DigitalOcean container registry
        run: doctl registry login --expiry-seconds 10000

      - name: Build container
        uses: docker/build-push-action@v4
        with:
          context: caddy
          load: true
          tags: "registry.digitalocean.com/flatfeestack/caddy:${{ github.ref_name }}"
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Caddy
        run: docker run --rm -d -p 8080:8080 -e HOST=http://localhost:8080 "registry.digitalocean.com/flatfeestack/caddy:${{ github.ref_name }}"

      - name: Check if Caddy is reachable
        uses: nick-fields/retry@v2
        with:
          timeout_seconds: 15
          max_attempts: 5
          command: curl -v localhost:8080

      - name: Push
        uses: docker/build-push-action@v4
        with:
          context: caddy
          push: true
          tags: "registry.digitalocean.com/flatfeestack/caddy:${{ github.ref_name }}"

  deploy-test:
    runs-on: ubuntu-latest
    needs:
    - build-and-push-analyzer
    - build-and-push-backend
    - build-and-push-caddy
    - build-and-push-fastauth
    - build-and-push-forum
    - build-and-push-frontend
    - build-and-push-payout
    env:
      TAG_IMAGE: ${{ github.ref_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.DEPLOY_MACMINI_PRIVATE_KEY }}
          known_hosts: ${{ secrets.DEPLOY_MACMINI_KNOWN_HOST }}

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Login to DigitalOcean container registry
        run: doctl registry login --expiry-seconds 10000

      - name: Deploy - TEST
        run: |
          docker context create test --docker "host=ssh://sibex@axelra.net:3000"
          docker --context test compose -p "flatfeestack" -f deploy/docker-compose.yml up -d --remove-orphans --pull always --wait
          docker --context test system prune -af
          docker --context test ps
        env:
          TEST_ADMINS: "tom.test@bocek.ch;tom.t1@bocek.ch;tom.t2@bocek.ch;guil@axlabs.com;gsm@machados.org"
          TEST_ANALYZER_PASSWORD: ${{ secrets.TEST_ANALYZER_PASSWORD }}
          TEST_ANALYZER_USERNAME: ${{ secrets.TEST_ANALYZER_USERNAME }}
          TEST_BACKEND_PASSWORD: ${{ secrets.TEST_BACKEND_PASSWORD }}
          TEST_BACKEND_USERNAME: ${{ secrets.TEST_BACKEND_USERNAME }}
          TEST_DAO_CONTRACT_ADDRESS: "0x82293E85698C606E2fF88904873fD11a30263355"
          TEST_EMAIL_TOKEN: ${{ secrets.TEST_EMAIL_TOKEN }}
          TEST_ETH_PRIVATE_KEY: ${{ secrets.TEST_ETH_PRIVATE_KEY }}
          TEST_ETH_URL: ${{ secrets.TEST_ETH_URL }}
          TEST_ETH_WS_URL: ${{ secrets.TEST_ETH_WS_URL }}
          TEST_PAYOUT_PASSWORD: ${{ secrets.TEST_PAYOUT_PASSWORD }}
          TEST_PAYOUT_USERNAME: ${{ secrets.TEST_PAYOUT_USERNAME }}
          TEST_STRIPE_PUBLIC_API: ${{ secrets.TEST_STRIPE_PUBLIC_API }}
          TEST_STRIPE_SECRET_API: ${{ secrets.TEST_STRIPE_SECRET_API }}
          TEST_STRIPE_SECRET_WEBHOOK: ${{ secrets.TEST_STRIPE_SECRET_WEBHOOK }}
          TEST_USDC_PRIVATE_KEY: ${{ secrets.TEST_USDC_PRIVATE_KEY }}
