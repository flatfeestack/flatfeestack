/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface components {
  schemas: {
    User: {
      /** Format: uuid */
      id: string;
      email: string;
      name?: string | null;
      /** Format: date-time */
      createdAt: string;
      /** Format: uuid */
      invitedId?: string;
      stripeId?: string | null;
      image?: string | null;
      paymentMethod?: string | null;
      last4?: string | null;
      /** Format: int64 */
      seats?: number | null;
      /** Format: int64 */
      freq?: number | null;
      role?: string | null;
    };
    Claims: {
      iss?: string | null;
      sub?: string | null;
      aud?: string | null;
      /** Format: int64 */
      exp?: number | null;
      /** Format: int64 */
      nbf?: number | null;
      /** Format: int64 */
      iat?: number | null;
      jti?: string | null;
    };
    GitUser: {
      email: string;
      /** Format: date-time */
      confirmedAt?: string | null;
      /** Format: date-time */
      createdAt?: string | null;
    };
    Repo: {
      /** Format: uuid */
      uuid: string;
      url?: string | null;
      gitUrl?: string | null;
      name?: string | null;
      description?: string | null;
      /** Format: uint32 */
      score: number;
      source?: string | null;
      /** Format: date-time */
      createdAt: string;
    };
    PaymentEvent: ({
        /** Format: uuid */
        id: string;
        /** Format: uuid */
        externalId?: string;
        /** Format: uuid */
        userId?: string;
        /** Format: bigint */
        balance?: number;
        currency?: string;
        status?: string;
        /** Format: int64 */
        seats: number;
        /** Format: int64 */
        freq: number;
        /** Format: date-time */
        createdAt?: string;
      })[];
    UserStatus: {
      /** Format: uuid */
      userId?: string;
      /** Format: email */
      email?: string;
      name?: string | null;
      daysLeft?: number;
    };
    EmailToken: {
      email: string;
      token: string;
    };

    Dataset: {
      label?: string;
      data?: (number)[];
      fill?: boolean;
      backgroundColor?: string;
      borderColor?: string;
      /** Format: int32 */
      pointBorderWidth?: number;
    };
    WebhookCallback: {
      requestId?: string;
      error?: string | null;
      result?: (components["schemas"]["FlatFeeWeight"])[];
    };
    FlatFeeWeight: {
      names?: (string)[];
      email?: string;
      weight?: number;
    };
    Time: {
      /** Format: date-time */
      time?: string;
      offset?: string;
    };
    /**
     * @example {
     *   "ETH": {
     *     "name": "Ethereum",
     *     "short": "ETH",
     *     "smallest": "wei",
     *     "factorPow": 18,
     *     "isCrypto": true
     *   }
     * }
     */
    Currency: {
      name: string;
      short: string;
      smallest: string;
      /** Format: int64 */
      factorPow: number;
      isCrypto: boolean;
    };
    Plan: {
      title: string;
      /** Format: float */
      price: number;
      /** Format: int64 */
      freq: number;
      desc?: string;
      disclaimer?: string;
      /** Format: int64 */
      feePrm?: number;
    };
    Invitation: {
      email: string;
      inviteEmail: string;
      /** Format: date-time */
      confirmedAt?: string | null;
      /** Format: date-time */
      createdAt: string;
    };
    ClientSecret: {
      clientSecret: string;
    };
    PaymentResponse: {
      payAddress?: string;
      /** Format: int64 */
      payAmount?: string;
      payCurrency?: string;
    };
    FakeRepoMapping: {
      startDate: string;
      endDate: string;
      name: string;
      url: string;
      weights?: (components["schemas"]["FlatFeeWeight"])[];
    };
    PayoutResponse: {
      /** Format: int64 */
      amount: string;
      currency?: string;
      /** Format: byte */
      encodedUserId: string;
      /** Format: byte */
      signature: string;
    };
    PublicUser: {
      /** Format: uuid */
      id?: string;
      name?: string | null;
      image?: string | null;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
