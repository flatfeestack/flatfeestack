openapi: 3.0.0
info:
  title: Forum API
  description: API for a forum software
  version: 1.0.0
servers:
  - url: /api
tags:
  - name: Admin
    description: Admin
paths:
  /posts:
    post:
      summary: Create a new post
      security:
        - bearerAuth: [ User ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostInput"
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '500':
          $ref: "#/components/responses/InternalServerError"
    get:
      summary: Get all posts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Post"
        '204':
          $ref: "#/components/responses/NoContent"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /posts/{postId}:
    get:
      summary: Get a specific post
      parameters:
        - $ref: "#/components/parameters/PostId"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        '404':
          $ref: "#/components/responses/NotFound"
        '500':
          $ref: "#/components/responses/InternalServerError"
    delete:
      summary: Delete a Post
      tags:
        - Admin
      security:
        - bearerAuth: [ Admin ]
      parameters:
        - $ref: "#/components/parameters/PostId"
      responses:
        '200':
          description: OK
        '204':
          $ref: "#/components/responses/NoContent"
        '401':
          $ref: "#/components/responses/Unauthorized"

  /posts/{postId}/comments:
    get:
      summary: Get all comments
      parameters:
        - $ref: "#/components/parameters/PostId"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Comment"
        '404':
          $ref: "#/components/responses/NotFound"
    post:
      summary: Add a comment to a post
      security:
        - bearerAuth: [ User ]
      parameters:
        - $ref: "#/components/parameters/PostId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommentInput"
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/Unauthorized"
    put:
      summary: Update a post
      security:
        - bearerAuth: [ User ]
      parameters:
        - $ref: "#/components/parameters/PostId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostInput"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '403':
          $ref: "#/components/responses/Forbidden"
        '404':
          $ref: "#/components/responses/NotFound"

  /posts/{postId}/comments/{commentId}:
    put:
      summary: Update a comment
      security:
        - bearerAuth: [ User ]
      parameters:
        - $ref: "#/components/parameters/PostId"
        - $ref: "#/components/parameters/CommentId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommentInput"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '403':
          $ref: "#/components/responses/Forbidden"
        '404':
          $ref: "#/components/responses/NotFound"

    delete:
      summary: Delete a comment
      tags:
        - Admin
      security:
        - bearerAuth: [ Admin ]
      parameters:
        - $ref: "#/components/parameters/PostId"
        - $ref: "#/components/parameters/CommentId"
      responses:
        '204':
          description: No Content
        '401':
          $ref: "#/components/responses/Unauthorized"
        '403':
          $ref: "#/components/responses/Forbidden"
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Post:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        content:
          type: string
        author:
          type: string
          format: uuid
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        open:
          type: boolean
      required:
        - id
        - title
        - content
        - author
        - created_at
        - open
    Comment:
      type: object
      properties:
        id:
          type: string
          format: uuid
        content:
          type: string
        author:
          format: uuid
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - content
        - author
        - created_at
    PostInput:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 100
        content:
          type: string
          minLength: 1
          maxLength: 1000
      required:
        - title
        - content
    CommentInput:
      type: object
      properties:
        content:
          type: string
          minLength: 1
          maxLength: 500
      required:
        - content
  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
            required:
              - error
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
            required:
              - error
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
            required:
              - error
    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
            required:
              - error
    NoContent:
      description: No Content
      content:
        application/json:
          schema:
            type: object
            properties:
              info:
                type: string
    InternalServerError:
      description: Internal Server Error
  parameters:
    PostId:
      name: postId
      in: path
      description: ID of the post
      required: true
      schema:
        type: string
        format: uuid

    CommentId:
      name: commentId
      in: path
      description: ID of the comment
      required: true
      schema:
        type: string
        format: uuid
