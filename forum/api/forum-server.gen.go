// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gorilla/mux"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get metrics
	// (GET /metrics)
	GetMetrics(w http.ResponseWriter, r *http.Request)
	// Get all posts
	// (GET /posts)
	GetPosts(w http.ResponseWriter, r *http.Request, params GetPostsParams)
	// Create a new post
	// (POST /posts)
	PostPosts(w http.ResponseWriter, r *http.Request)
	// Delete a Post
	// (DELETE /posts/{postId})
	DeletePostsPostId(w http.ResponseWriter, r *http.Request, postId PostId)
	// Get a specific post
	// (GET /posts/{postId})
	GetPostsPostId(w http.ResponseWriter, r *http.Request, postId PostId)
	// Update a post
	// (PUT /posts/{postId})
	PutPostsPostId(w http.ResponseWriter, r *http.Request, postId PostId)
	// Close a post for further edits and comments
	// (PUT /posts/{postId}/close)
	PutPostsPostIdClose(w http.ResponseWriter, r *http.Request, postId PostId)
	// Get all comments
	// (GET /posts/{postId}/comments)
	GetPostsPostIdComments(w http.ResponseWriter, r *http.Request, postId PostId)
	// Add a comment to a post
	// (POST /posts/{postId}/comments)
	PostPostsPostIdComments(w http.ResponseWriter, r *http.Request, postId PostId)
	// Delete a comment
	// (DELETE /posts/{postId}/comments/{commentId})
	DeletePostsPostIdCommentsCommentId(w http.ResponseWriter, r *http.Request, postId PostId, commentId CommentId)
	// Update a comment
	// (PUT /posts/{postId}/comments/{commentId})
	PutPostsPostIdCommentsCommentId(w http.ResponseWriter, r *http.Request, postId PostId, commentId CommentId)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// GetMetrics operation middleware
func (siw *ServerInterfaceWrapper) GetMetrics(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMetrics(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetPosts operation middleware
func (siw *ServerInterfaceWrapper) GetPosts(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPostsParams

	// ------------- Optional query parameter "open" -------------

	err = runtime.BindQueryParameter("form", true, false, "open", r.URL.Query(), &params.Open)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "open", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPosts(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostPosts operation middleware
func (siw *ServerInterfaceWrapper) PostPosts(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{"User"})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostPosts(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeletePostsPostId operation middleware
func (siw *ServerInterfaceWrapper) DeletePostsPostId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "postId" -------------
	var postId PostId

	err = runtime.BindStyledParameter("simple", false, "postId", mux.Vars(r)["postId"], &postId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "postId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{"Admin"})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeletePostsPostId(w, r, postId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetPostsPostId operation middleware
func (siw *ServerInterfaceWrapper) GetPostsPostId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "postId" -------------
	var postId PostId

	err = runtime.BindStyledParameter("simple", false, "postId", mux.Vars(r)["postId"], &postId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "postId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPostsPostId(w, r, postId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PutPostsPostId operation middleware
func (siw *ServerInterfaceWrapper) PutPostsPostId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "postId" -------------
	var postId PostId

	err = runtime.BindStyledParameter("simple", false, "postId", mux.Vars(r)["postId"], &postId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "postId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{"User"})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutPostsPostId(w, r, postId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PutPostsPostIdClose operation middleware
func (siw *ServerInterfaceWrapper) PutPostsPostIdClose(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "postId" -------------
	var postId PostId

	err = runtime.BindStyledParameter("simple", false, "postId", mux.Vars(r)["postId"], &postId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "postId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{"User"})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutPostsPostIdClose(w, r, postId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetPostsPostIdComments operation middleware
func (siw *ServerInterfaceWrapper) GetPostsPostIdComments(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "postId" -------------
	var postId PostId

	err = runtime.BindStyledParameter("simple", false, "postId", mux.Vars(r)["postId"], &postId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "postId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPostsPostIdComments(w, r, postId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostPostsPostIdComments operation middleware
func (siw *ServerInterfaceWrapper) PostPostsPostIdComments(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "postId" -------------
	var postId PostId

	err = runtime.BindStyledParameter("simple", false, "postId", mux.Vars(r)["postId"], &postId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "postId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{"User"})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostPostsPostIdComments(w, r, postId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeletePostsPostIdCommentsCommentId operation middleware
func (siw *ServerInterfaceWrapper) DeletePostsPostIdCommentsCommentId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "postId" -------------
	var postId PostId

	err = runtime.BindStyledParameter("simple", false, "postId", mux.Vars(r)["postId"], &postId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "postId", Err: err})
		return
	}

	// ------------- Path parameter "commentId" -------------
	var commentId CommentId

	err = runtime.BindStyledParameter("simple", false, "commentId", mux.Vars(r)["commentId"], &commentId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "commentId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{"Admin"})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeletePostsPostIdCommentsCommentId(w, r, postId, commentId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PutPostsPostIdCommentsCommentId operation middleware
func (siw *ServerInterfaceWrapper) PutPostsPostIdCommentsCommentId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "postId" -------------
	var postId PostId

	err = runtime.BindStyledParameter("simple", false, "postId", mux.Vars(r)["postId"], &postId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "postId", Err: err})
		return
	}

	// ------------- Path parameter "commentId" -------------
	var commentId CommentId

	err = runtime.BindStyledParameter("simple", false, "commentId", mux.Vars(r)["commentId"], &commentId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "commentId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{"User"})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutPostsPostIdCommentsCommentId(w, r, postId, commentId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/metrics", wrapper.GetMetrics).Methods("GET")

	r.HandleFunc(options.BaseURL+"/posts", wrapper.GetPosts).Methods("GET")

	r.HandleFunc(options.BaseURL+"/posts", wrapper.PostPosts).Methods("POST")

	r.HandleFunc(options.BaseURL+"/posts/{postId}", wrapper.DeletePostsPostId).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/posts/{postId}", wrapper.GetPostsPostId).Methods("GET")

	r.HandleFunc(options.BaseURL+"/posts/{postId}", wrapper.PutPostsPostId).Methods("PUT")

	r.HandleFunc(options.BaseURL+"/posts/{postId}/close", wrapper.PutPostsPostIdClose).Methods("PUT")

	r.HandleFunc(options.BaseURL+"/posts/{postId}/comments", wrapper.GetPostsPostIdComments).Methods("GET")

	r.HandleFunc(options.BaseURL+"/posts/{postId}/comments", wrapper.PostPostsPostIdComments).Methods("POST")

	r.HandleFunc(options.BaseURL+"/posts/{postId}/comments/{commentId}", wrapper.DeletePostsPostIdCommentsCommentId).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/posts/{postId}/comments/{commentId}", wrapper.PutPostsPostIdCommentsCommentId).Methods("PUT")

	return r
}

type BadRequestJSONResponse struct {
	Error string `json:"error"`
}

type ForbiddenJSONResponse struct {
	Error string `json:"error"`
}

type InternalServerErrorResponse struct {
}

type NoContentJSONResponse struct {
	Info *string `json:"info,omitempty"`
}

type NotFoundJSONResponse struct {
	Error string `json:"error"`
}

type UnauthorizedJSONResponse struct {
	Error string `json:"error"`
}

type GetMetricsRequestObject struct {
}

type GetMetricsResponseObject interface {
	VisitGetMetricsResponse(w http.ResponseWriter) error
}

type GetMetrics200Response struct {
}

func (response GetMetrics200Response) VisitGetMetricsResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GetPostsRequestObject struct {
	Params GetPostsParams
}

type GetPostsResponseObject interface {
	VisitGetPostsResponse(w http.ResponseWriter) error
}

type GetPosts200JSONResponse []Post

func (response GetPosts200JSONResponse) VisitGetPostsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPosts204JSONResponse struct{ NoContentJSONResponse }

func (response GetPosts204JSONResponse) VisitGetPostsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(204)

	return json.NewEncoder(w).Encode(response)
}

type GetPosts500Response = InternalServerErrorResponse

func (response GetPosts500Response) VisitGetPostsResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type PostPostsRequestObject struct {
	Body *PostPostsJSONRequestBody
}

type PostPostsResponseObject interface {
	VisitPostPostsResponse(w http.ResponseWriter) error
}

type PostPosts201JSONResponse Post

func (response PostPosts201JSONResponse) VisitPostPostsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostPosts400JSONResponse struct{ BadRequestJSONResponse }

func (response PostPosts400JSONResponse) VisitPostPostsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostPosts401JSONResponse struct{ UnauthorizedJSONResponse }

func (response PostPosts401JSONResponse) VisitPostPostsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostPosts500Response = InternalServerErrorResponse

func (response PostPosts500Response) VisitPostPostsResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type DeletePostsPostIdRequestObject struct {
	PostId PostId `json:"postId"`
}

type DeletePostsPostIdResponseObject interface {
	VisitDeletePostsPostIdResponse(w http.ResponseWriter) error
}

type DeletePostsPostId200Response struct {
}

func (response DeletePostsPostId200Response) VisitDeletePostsPostIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeletePostsPostId204JSONResponse struct{ NoContentJSONResponse }

func (response DeletePostsPostId204JSONResponse) VisitDeletePostsPostIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(204)

	return json.NewEncoder(w).Encode(response)
}

type DeletePostsPostId401JSONResponse struct{ UnauthorizedJSONResponse }

func (response DeletePostsPostId401JSONResponse) VisitDeletePostsPostIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetPostsPostIdRequestObject struct {
	PostId PostId `json:"postId"`
}

type GetPostsPostIdResponseObject interface {
	VisitGetPostsPostIdResponse(w http.ResponseWriter) error
}

type GetPostsPostId200JSONResponse Post

func (response GetPostsPostId200JSONResponse) VisitGetPostsPostIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPostsPostId404JSONResponse struct{ NotFoundJSONResponse }

func (response GetPostsPostId404JSONResponse) VisitGetPostsPostIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetPostsPostId500Response = InternalServerErrorResponse

func (response GetPostsPostId500Response) VisitGetPostsPostIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type PutPostsPostIdRequestObject struct {
	PostId PostId `json:"postId"`
	Body   *PutPostsPostIdJSONRequestBody
}

type PutPostsPostIdResponseObject interface {
	VisitPutPostsPostIdResponse(w http.ResponseWriter) error
}

type PutPostsPostId200JSONResponse Post

func (response PutPostsPostId200JSONResponse) VisitPutPostsPostIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutPostsPostId400JSONResponse struct{ BadRequestJSONResponse }

func (response PutPostsPostId400JSONResponse) VisitPutPostsPostIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PutPostsPostId401JSONResponse struct{ UnauthorizedJSONResponse }

func (response PutPostsPostId401JSONResponse) VisitPutPostsPostIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PutPostsPostId403JSONResponse struct{ ForbiddenJSONResponse }

func (response PutPostsPostId403JSONResponse) VisitPutPostsPostIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PutPostsPostId404JSONResponse struct{ NotFoundJSONResponse }

func (response PutPostsPostId404JSONResponse) VisitPutPostsPostIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PutPostsPostId500Response = InternalServerErrorResponse

func (response PutPostsPostId500Response) VisitPutPostsPostIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type PutPostsPostIdCloseRequestObject struct {
	PostId PostId `json:"postId"`
}

type PutPostsPostIdCloseResponseObject interface {
	VisitPutPostsPostIdCloseResponse(w http.ResponseWriter) error
}

type PutPostsPostIdClose200Response struct {
}

func (response PutPostsPostIdClose200Response) VisitPutPostsPostIdCloseResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PutPostsPostIdClose401JSONResponse struct{ UnauthorizedJSONResponse }

func (response PutPostsPostIdClose401JSONResponse) VisitPutPostsPostIdCloseResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PutPostsPostIdClose403JSONResponse struct{ ForbiddenJSONResponse }

func (response PutPostsPostIdClose403JSONResponse) VisitPutPostsPostIdCloseResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PutPostsPostIdClose404JSONResponse struct{ NotFoundJSONResponse }

func (response PutPostsPostIdClose404JSONResponse) VisitPutPostsPostIdCloseResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PutPostsPostIdClose500Response = InternalServerErrorResponse

func (response PutPostsPostIdClose500Response) VisitPutPostsPostIdCloseResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type GetPostsPostIdCommentsRequestObject struct {
	PostId PostId `json:"postId"`
}

type GetPostsPostIdCommentsResponseObject interface {
	VisitGetPostsPostIdCommentsResponse(w http.ResponseWriter) error
}

type GetPostsPostIdComments200JSONResponse []Comment

func (response GetPostsPostIdComments200JSONResponse) VisitGetPostsPostIdCommentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPostsPostIdComments204JSONResponse struct{ NoContentJSONResponse }

func (response GetPostsPostIdComments204JSONResponse) VisitGetPostsPostIdCommentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(204)

	return json.NewEncoder(w).Encode(response)
}

type GetPostsPostIdComments404JSONResponse struct{ NotFoundJSONResponse }

func (response GetPostsPostIdComments404JSONResponse) VisitGetPostsPostIdCommentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetPostsPostIdComments500Response = InternalServerErrorResponse

func (response GetPostsPostIdComments500Response) VisitGetPostsPostIdCommentsResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type PostPostsPostIdCommentsRequestObject struct {
	PostId PostId `json:"postId"`
	Body   *PostPostsPostIdCommentsJSONRequestBody
}

type PostPostsPostIdCommentsResponseObject interface {
	VisitPostPostsPostIdCommentsResponse(w http.ResponseWriter) error
}

type PostPostsPostIdComments201JSONResponse Comment

func (response PostPostsPostIdComments201JSONResponse) VisitPostPostsPostIdCommentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostPostsPostIdComments400JSONResponse struct{ BadRequestJSONResponse }

func (response PostPostsPostIdComments400JSONResponse) VisitPostPostsPostIdCommentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostPostsPostIdComments401JSONResponse struct{ UnauthorizedJSONResponse }

func (response PostPostsPostIdComments401JSONResponse) VisitPostPostsPostIdCommentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostPostsPostIdComments404JSONResponse struct{ NotFoundJSONResponse }

func (response PostPostsPostIdComments404JSONResponse) VisitPostPostsPostIdCommentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PostPostsPostIdComments500Response = InternalServerErrorResponse

func (response PostPostsPostIdComments500Response) VisitPostPostsPostIdCommentsResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type DeletePostsPostIdCommentsCommentIdRequestObject struct {
	PostId    PostId    `json:"postId"`
	CommentId CommentId `json:"commentId"`
}

type DeletePostsPostIdCommentsCommentIdResponseObject interface {
	VisitDeletePostsPostIdCommentsCommentIdResponse(w http.ResponseWriter) error
}

type DeletePostsPostIdCommentsCommentId200Response struct {
}

func (response DeletePostsPostIdCommentsCommentId200Response) VisitDeletePostsPostIdCommentsCommentIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeletePostsPostIdCommentsCommentId401JSONResponse struct{ UnauthorizedJSONResponse }

func (response DeletePostsPostIdCommentsCommentId401JSONResponse) VisitDeletePostsPostIdCommentsCommentIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeletePostsPostIdCommentsCommentId404JSONResponse struct{ NotFoundJSONResponse }

func (response DeletePostsPostIdCommentsCommentId404JSONResponse) VisitDeletePostsPostIdCommentsCommentIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PutPostsPostIdCommentsCommentIdRequestObject struct {
	PostId    PostId    `json:"postId"`
	CommentId CommentId `json:"commentId"`
	Body      *PutPostsPostIdCommentsCommentIdJSONRequestBody
}

type PutPostsPostIdCommentsCommentIdResponseObject interface {
	VisitPutPostsPostIdCommentsCommentIdResponse(w http.ResponseWriter) error
}

type PutPostsPostIdCommentsCommentId200JSONResponse Comment

func (response PutPostsPostIdCommentsCommentId200JSONResponse) VisitPutPostsPostIdCommentsCommentIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutPostsPostIdCommentsCommentId400JSONResponse struct{ BadRequestJSONResponse }

func (response PutPostsPostIdCommentsCommentId400JSONResponse) VisitPutPostsPostIdCommentsCommentIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PutPostsPostIdCommentsCommentId401JSONResponse struct{ UnauthorizedJSONResponse }

func (response PutPostsPostIdCommentsCommentId401JSONResponse) VisitPutPostsPostIdCommentsCommentIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PutPostsPostIdCommentsCommentId403JSONResponse struct{ ForbiddenJSONResponse }

func (response PutPostsPostIdCommentsCommentId403JSONResponse) VisitPutPostsPostIdCommentsCommentIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PutPostsPostIdCommentsCommentId404JSONResponse struct{ NotFoundJSONResponse }

func (response PutPostsPostIdCommentsCommentId404JSONResponse) VisitPutPostsPostIdCommentsCommentIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PutPostsPostIdCommentsCommentId500Response = InternalServerErrorResponse

func (response PutPostsPostIdCommentsCommentId500Response) VisitPutPostsPostIdCommentsCommentIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get metrics
	// (GET /metrics)
	GetMetrics(ctx context.Context, request GetMetricsRequestObject) (GetMetricsResponseObject, error)
	// Get all posts
	// (GET /posts)
	GetPosts(ctx context.Context, request GetPostsRequestObject) (GetPostsResponseObject, error)
	// Create a new post
	// (POST /posts)
	PostPosts(ctx context.Context, request PostPostsRequestObject) (PostPostsResponseObject, error)
	// Delete a Post
	// (DELETE /posts/{postId})
	DeletePostsPostId(ctx context.Context, request DeletePostsPostIdRequestObject) (DeletePostsPostIdResponseObject, error)
	// Get a specific post
	// (GET /posts/{postId})
	GetPostsPostId(ctx context.Context, request GetPostsPostIdRequestObject) (GetPostsPostIdResponseObject, error)
	// Update a post
	// (PUT /posts/{postId})
	PutPostsPostId(ctx context.Context, request PutPostsPostIdRequestObject) (PutPostsPostIdResponseObject, error)
	// Close a post for further edits and comments
	// (PUT /posts/{postId}/close)
	PutPostsPostIdClose(ctx context.Context, request PutPostsPostIdCloseRequestObject) (PutPostsPostIdCloseResponseObject, error)
	// Get all comments
	// (GET /posts/{postId}/comments)
	GetPostsPostIdComments(ctx context.Context, request GetPostsPostIdCommentsRequestObject) (GetPostsPostIdCommentsResponseObject, error)
	// Add a comment to a post
	// (POST /posts/{postId}/comments)
	PostPostsPostIdComments(ctx context.Context, request PostPostsPostIdCommentsRequestObject) (PostPostsPostIdCommentsResponseObject, error)
	// Delete a comment
	// (DELETE /posts/{postId}/comments/{commentId})
	DeletePostsPostIdCommentsCommentId(ctx context.Context, request DeletePostsPostIdCommentsCommentIdRequestObject) (DeletePostsPostIdCommentsCommentIdResponseObject, error)
	// Update a comment
	// (PUT /posts/{postId}/comments/{commentId})
	PutPostsPostIdCommentsCommentId(ctx context.Context, request PutPostsPostIdCommentsCommentIdRequestObject) (PutPostsPostIdCommentsCommentIdResponseObject, error)
}

type StrictHandlerFunc func(ctx context.Context, w http.ResponseWriter, r *http.Request, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetMetrics operation middleware
func (sh *strictHandler) GetMetrics(w http.ResponseWriter, r *http.Request) {
	var request GetMetricsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetMetrics(ctx, request.(GetMetricsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMetrics")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetMetricsResponseObject); ok {
		if err := validResponse.VisitGetMetricsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetPosts operation middleware
func (sh *strictHandler) GetPosts(w http.ResponseWriter, r *http.Request, params GetPostsParams) {
	var request GetPostsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetPosts(ctx, request.(GetPostsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPosts")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetPostsResponseObject); ok {
		if err := validResponse.VisitGetPostsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// PostPosts operation middleware
func (sh *strictHandler) PostPosts(w http.ResponseWriter, r *http.Request) {
	var request PostPostsRequestObject

	var body PostPostsJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostPosts(ctx, request.(PostPostsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostPosts")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostPostsResponseObject); ok {
		if err := validResponse.VisitPostPostsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// DeletePostsPostId operation middleware
func (sh *strictHandler) DeletePostsPostId(w http.ResponseWriter, r *http.Request, postId PostId) {
	var request DeletePostsPostIdRequestObject

	request.PostId = postId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeletePostsPostId(ctx, request.(DeletePostsPostIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeletePostsPostId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeletePostsPostIdResponseObject); ok {
		if err := validResponse.VisitDeletePostsPostIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetPostsPostId operation middleware
func (sh *strictHandler) GetPostsPostId(w http.ResponseWriter, r *http.Request, postId PostId) {
	var request GetPostsPostIdRequestObject

	request.PostId = postId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetPostsPostId(ctx, request.(GetPostsPostIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPostsPostId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetPostsPostIdResponseObject); ok {
		if err := validResponse.VisitGetPostsPostIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// PutPostsPostId operation middleware
func (sh *strictHandler) PutPostsPostId(w http.ResponseWriter, r *http.Request, postId PostId) {
	var request PutPostsPostIdRequestObject

	request.PostId = postId

	var body PutPostsPostIdJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PutPostsPostId(ctx, request.(PutPostsPostIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutPostsPostId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PutPostsPostIdResponseObject); ok {
		if err := validResponse.VisitPutPostsPostIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// PutPostsPostIdClose operation middleware
func (sh *strictHandler) PutPostsPostIdClose(w http.ResponseWriter, r *http.Request, postId PostId) {
	var request PutPostsPostIdCloseRequestObject

	request.PostId = postId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PutPostsPostIdClose(ctx, request.(PutPostsPostIdCloseRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutPostsPostIdClose")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PutPostsPostIdCloseResponseObject); ok {
		if err := validResponse.VisitPutPostsPostIdCloseResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetPostsPostIdComments operation middleware
func (sh *strictHandler) GetPostsPostIdComments(w http.ResponseWriter, r *http.Request, postId PostId) {
	var request GetPostsPostIdCommentsRequestObject

	request.PostId = postId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetPostsPostIdComments(ctx, request.(GetPostsPostIdCommentsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPostsPostIdComments")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetPostsPostIdCommentsResponseObject); ok {
		if err := validResponse.VisitGetPostsPostIdCommentsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// PostPostsPostIdComments operation middleware
func (sh *strictHandler) PostPostsPostIdComments(w http.ResponseWriter, r *http.Request, postId PostId) {
	var request PostPostsPostIdCommentsRequestObject

	request.PostId = postId

	var body PostPostsPostIdCommentsJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostPostsPostIdComments(ctx, request.(PostPostsPostIdCommentsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostPostsPostIdComments")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostPostsPostIdCommentsResponseObject); ok {
		if err := validResponse.VisitPostPostsPostIdCommentsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// DeletePostsPostIdCommentsCommentId operation middleware
func (sh *strictHandler) DeletePostsPostIdCommentsCommentId(w http.ResponseWriter, r *http.Request, postId PostId, commentId CommentId) {
	var request DeletePostsPostIdCommentsCommentIdRequestObject

	request.PostId = postId
	request.CommentId = commentId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeletePostsPostIdCommentsCommentId(ctx, request.(DeletePostsPostIdCommentsCommentIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeletePostsPostIdCommentsCommentId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeletePostsPostIdCommentsCommentIdResponseObject); ok {
		if err := validResponse.VisitDeletePostsPostIdCommentsCommentIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// PutPostsPostIdCommentsCommentId operation middleware
func (sh *strictHandler) PutPostsPostIdCommentsCommentId(w http.ResponseWriter, r *http.Request, postId PostId, commentId CommentId) {
	var request PutPostsPostIdCommentsCommentIdRequestObject

	request.PostId = postId
	request.CommentId = commentId

	var body PutPostsPostIdCommentsCommentIdJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PutPostsPostIdCommentsCommentId(ctx, request.(PutPostsPostIdCommentsCommentIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutPostsPostIdCommentsCommentId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PutPostsPostIdCommentsCommentIdResponseObject); ok {
		if err := validResponse.VisitPutPostsPostIdCommentsCommentIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xZ32/bNhD+V4jbHrnKadM96C1JlyH7kRrrgj0EQcFI55idRCoklc4z9L8PJEVLshXL",
	"ThzHA/oSRNbd8e6+48dP0hwSmRdSoDAa4jkUTLEcDSp3dSbzHIW5SO1FijpRvDBcCojh4gORE2KmSBJv",
	"BBS4vVEwMwUKguUIMSSLCBQU3pdcYQqxUSVS0MkUc2ZDT6TKmYEYypJbSzMrrLM2ios7qCoKY6kH0iik",
	"fiSHwvs+J4HKOutCCo2uMacs/QPvS9TGXiVSGNuBeA6sKDKeMJtd9EXbFOetZQolC1SG+yColFT2n9Vy",
	"m0yva7ObRVLy9gsmxifVbcYpS0lIq6JwLtUtT1MUh5Rjk1RF4UIYVIJln1A9oPoprLUEcW1EvBXxZhWF",
	"S3nWFPXE+riYyP7yBiu5lCSs75Ix57IU6SH1+lIa4pOqKFwJVpqpVPxfPKgkO3nZ237lNv+sZuFdNti5",
	"tF3n6j2FzGD6mZlOqJQZ/MHwHPvi8XSjZcsi3TL0Ugdd2JA8DRV3cl5tL11QtijKnr61mpGzf35DcWem",
	"EL8fjSjkXITro6HcQpi+BCxT/x8Bk4UnyvrGrZQZMsdSthKpWfZ5KRIX5sfjJhQXBu/QMZPhJsPeAnYz",
	"Fj7+0HjUNT0G0lYjcjQanJFW2V3H7WZrubYeDqGgMSkVN7NPlit83rfIFKqT0i4Srs5Df3/560+omcWB",
	"6+42vZ4aU3huCudBl6NOxhdkIhVh9m+ZEy0n5itTuIDCnWtlTk7GF0DhAZX2jkdvRm9GYbpYwSGGd+4n",
	"6jSKSzzK0SieuP/v0DXe4uHo2Eoe+BnN77XJkgx5OxqtJiv/9i0q85ypmfcnYQ17J7KCaO1yY2dAO2rw",
	"enmdjyKbEWXj4gMSWyCRiiSZ1JiSlOuk1LYLOoiy+xLVrFFlbjbbGmx541U3/dVufHBxg7lz/F7hBGL4",
	"Lmq0blSfMpGjq+a4Z0qxWd8x9fFXa/V2dPxYwEWqUaNLKgrvfdLrPfp00CqGLMuIh86SUk2zXexsNQE8",
	"5ZXgqUxnW7VtqFueN6ruvrWCulrB62inC/fBcubpznbkeJNOt4S7czkadukKlOciWhOX209tyrqGK40K",
	"buzUN7D78ggjAr/6J5xmA0dz/2BTeQrI0ODqQHxwv7uRGIfHoKVd3VdIYxLVbo/txt3skicAsb6ZJ2nO",
	"xXI3fTMII2P/rGjYnW4b0/WE+DINfNHt4fE43gwPs3hW2CVpEV1gwic8qeeXQi07lpir3F2TX5339gfs",
	"fijvePRu2KnzZL/nkduOVa+cCCfsUUaNnIpx2nh4Vs+c7R5o9Rt0Mbhm18g5ST4plZmiIphyowkTaXgf",
	"qfuBDTeH1G+NbTB/LdLfSMOG1yQvKGNf9QjJshaog9J3l8jt/iTpvJ/Zs4hezMlB6OiD5pmTNCUsTB0x",
	"cu1hUY9aNF987dhOk4dZPWt9LHna0NJBy2aNPRw9WwH8HEHffINa1fSbHOGvCMAhUMxoHxTzTbLuQrIm",
	"7QZrF9QPaKkyiCFiBXeDVe+DlTeZblssXsL5y+qm+i8AAP//Er/iBggeAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
