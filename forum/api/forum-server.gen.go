// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"context"
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/gorilla/mux"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all posts
	// (GET /posts)
	GetPosts(w http.ResponseWriter, r *http.Request)
	// Create a new post
	// (POST /posts)
	PostPosts(w http.ResponseWriter, r *http.Request)
	// Delete a Post
	// (DELETE /posts/{postId})
	DeletePostsPostId(w http.ResponseWriter, r *http.Request, postId PostId)
	// Get a specific post
	// (GET /posts/{postId})
	GetPostsPostId(w http.ResponseWriter, r *http.Request, postId PostId)
	// Get all comments
	// (GET /posts/{postId}/comments)
	GetPostsPostIdComments(w http.ResponseWriter, r *http.Request, postId PostId)
	// Add a comment to a post
	// (POST /posts/{postId}/comments)
	PostPostsPostIdComments(w http.ResponseWriter, r *http.Request, postId PostId)
	// Update a post
	// (PUT /posts/{postId}/comments)
	PutPostsPostIdComments(w http.ResponseWriter, r *http.Request, postId PostId)
	// Delete a comment
	// (DELETE /posts/{postId}/comments/{commentId})
	DeletePostsPostIdCommentsCommentId(w http.ResponseWriter, r *http.Request, postId PostId, commentId CommentId)
	// Update a comment
	// (PUT /posts/{postId}/comments/{commentId})
	PutPostsPostIdCommentsCommentId(w http.ResponseWriter, r *http.Request, postId PostId, commentId CommentId)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// GetPosts operation middleware
func (siw *ServerInterfaceWrapper) GetPosts(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPosts(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostPosts operation middleware
func (siw *ServerInterfaceWrapper) PostPosts(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{"User"})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostPosts(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeletePostsPostId operation middleware
func (siw *ServerInterfaceWrapper) DeletePostsPostId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "postId" -------------
	var postId PostId

	err = runtime.BindStyledParameter("simple", false, "postId", mux.Vars(r)["postId"], &postId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "postId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{"Admin"})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeletePostsPostId(w, r, postId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetPostsPostId operation middleware
func (siw *ServerInterfaceWrapper) GetPostsPostId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "postId" -------------
	var postId PostId

	err = runtime.BindStyledParameter("simple", false, "postId", mux.Vars(r)["postId"], &postId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "postId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPostsPostId(w, r, postId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetPostsPostIdComments operation middleware
func (siw *ServerInterfaceWrapper) GetPostsPostIdComments(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "postId" -------------
	var postId PostId

	err = runtime.BindStyledParameter("simple", false, "postId", mux.Vars(r)["postId"], &postId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "postId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPostsPostIdComments(w, r, postId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostPostsPostIdComments operation middleware
func (siw *ServerInterfaceWrapper) PostPostsPostIdComments(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "postId" -------------
	var postId PostId

	err = runtime.BindStyledParameter("simple", false, "postId", mux.Vars(r)["postId"], &postId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "postId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{"User"})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostPostsPostIdComments(w, r, postId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PutPostsPostIdComments operation middleware
func (siw *ServerInterfaceWrapper) PutPostsPostIdComments(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "postId" -------------
	var postId PostId

	err = runtime.BindStyledParameter("simple", false, "postId", mux.Vars(r)["postId"], &postId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "postId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{"User"})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutPostsPostIdComments(w, r, postId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeletePostsPostIdCommentsCommentId operation middleware
func (siw *ServerInterfaceWrapper) DeletePostsPostIdCommentsCommentId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "postId" -------------
	var postId PostId

	err = runtime.BindStyledParameter("simple", false, "postId", mux.Vars(r)["postId"], &postId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "postId", Err: err})
		return
	}

	// ------------- Path parameter "commentId" -------------
	var commentId CommentId

	err = runtime.BindStyledParameter("simple", false, "commentId", mux.Vars(r)["commentId"], &commentId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "commentId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{"Admin"})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeletePostsPostIdCommentsCommentId(w, r, postId, commentId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PutPostsPostIdCommentsCommentId operation middleware
func (siw *ServerInterfaceWrapper) PutPostsPostIdCommentsCommentId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "postId" -------------
	var postId PostId

	err = runtime.BindStyledParameter("simple", false, "postId", mux.Vars(r)["postId"], &postId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "postId", Err: err})
		return
	}

	// ------------- Path parameter "commentId" -------------
	var commentId CommentId

	err = runtime.BindStyledParameter("simple", false, "commentId", mux.Vars(r)["commentId"], &commentId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "commentId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{"User"})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutPostsPostIdCommentsCommentId(w, r, postId, commentId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/posts", wrapper.GetPosts).Methods("GET")

	r.HandleFunc(options.BaseURL+"/posts", wrapper.PostPosts).Methods("POST")

	r.HandleFunc(options.BaseURL+"/posts/{postId}", wrapper.DeletePostsPostId).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/posts/{postId}", wrapper.GetPostsPostId).Methods("GET")

	r.HandleFunc(options.BaseURL+"/posts/{postId}/comments", wrapper.GetPostsPostIdComments).Methods("GET")

	r.HandleFunc(options.BaseURL+"/posts/{postId}/comments", wrapper.PostPostsPostIdComments).Methods("POST")

	r.HandleFunc(options.BaseURL+"/posts/{postId}/comments", wrapper.PutPostsPostIdComments).Methods("PUT")

	r.HandleFunc(options.BaseURL+"/posts/{postId}/comments/{commentId}", wrapper.DeletePostsPostIdCommentsCommentId).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/posts/{postId}/comments/{commentId}", wrapper.PutPostsPostIdCommentsCommentId).Methods("PUT")

	return r
}
